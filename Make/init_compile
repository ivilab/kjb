# -----------------------------------------------------------------------------
#
# $Id: init_compile 22710 2019-07-11 23:19:44Z kobus $
# 
# Optional libraries. 
#     The main reason to edit this file is to add optional libraries.  Each
#     optional library has a section in this file. The order matters (and needs
#     some cleanup). A relatively safe place to add new ones is just before or
# #     after the template example (scan for "XXX"). 
# 
# To add an entry, two things are needed. 
#     Copy the XXX code block to an earlier location and edit it. The location
#     should be before the current location of the XXX example, because that one
#     is the last optional library entry. 
#
#     On occasion fancy tweaks are needed. Looking at some random examples might
#     help if you are having trouble.  One example is that the library you are
#     adding depends on another one. In this case, the dependency should already
#     have been processed so that you can check on its existence. See, for
#     example, LIB_LEVMAR which depends on LIB_LAPACK.
# 
#     Do a similar thing in Make/Makefile-defs, copying all strings that have
#     XXX in them, and changing XXX to a string corresponding to the variable
#     (should only be WITH_LIBS_HAVE_XXX). 
#
#     Do a similar thing in Make/Makefile-program, copying all strings that have
#     XXX in them, and changing XXX to a string corresponding to the variable
#     (should only be NEED_LIB_XXX).
#
#     Do a similar thing in src/KJB/Makefile-2, copying all strings that have
#     XXX in them, and changing XXX to a string corresponding to the variable
#     (should only be NEED_LIB_XXX). 
#
#     Do a similar thing in src/KJB_cpp/Makefile-2, copying all strings that
#     have XXX in them, and changing XXX to a string corresponding to the
#     variable (should only be NEED_LIB_XXX). 
#
# -----------------------------------------------------------------------------

# set echo 

# Kobus. Unfortunately, for absolute robustness, we cannot cache the path to the
# library and the tools because we might be operating on two or more valid
# source trees. For example, we might be switching between making in $HOME/src
# and in /misc/src. 

if (! $?KJB_SRC_PATH) then 
   bash -c 'echo "Script init_compile assumes KJB_SRC_PATH is set." 1>&2'
   exit 1
else if (! -d "${KJB_SRC_PATH}") then 
   bash -c 'echo "Script init_compile assumes KJB_SRC_PATH constains a valid directory." 1>&2'
   exit 1
endif 

pushd ${KJB_SRC_PATH} > /dev/null
   if ($?EXPORTED_SOURCE) then
       #
       # Setting DOC_DIR to "doc" in the current directory breaks the build
       # because the symbolic target "doc" becomes a real entity. We did this
       # originally to pattern what we do for non-export builds, until the above
       # problem surfaced. However, for export builds, putting the man pages in
       # to the "doc" sub-directory might be confusing anyway. So we now just
       # use KJB_SRC_PATH. 
       # 
       ### setenv DOC_DIR "$cwd"/doc/
       setenv DOC_DIR "${KJB_SRC_PATH}"
   else if (! $?DOC_DIR) then
       pushd ../  > /dev/null 
          setenv DOC_DIR "$cwd"/doc/
       popd > /dev/null 
   endif
popd > /dev/null 

# We are slowly purging the use of the "_DIR" forms. Eventually we should be
# able to do with the "_PATH" forms exclusively.
#
setenv MAKE_DIR ${KJB_SRC_PATH}Make/
setenv MAKE_SCRIPT_DIR ${MAKE_DIR}scripts/
setenv MAKE_BIN_DIR ${MAKE_DIR}bin/${MACHINE}/
setenv MAKE_UTIL_DIR ${MAKE_DIR}util/
setenv MAKE_EDIT_DIR ${MAKE_DIR}vim/
setenv KJB_LIB_DIR ${KJB_SRC_PATH}lib/

setenv MAKE_PATH ${KJB_SRC_PATH}Make/
setenv MAKE_SCRIPT_PATH ${MAKE_PATH}scripts/
setenv MAKE_BIN_PATH ${MAKE_PATH}bin/${MACHINE}/
setenv MAKE_UTIL_PATH ${MAKE_PATH}util/
setenv MAKE_EDIT_PATH ${MAKE_PATH}vim/
setenv KJB_LIB_PATH ${KJB_SRC_PATH}lib/

# Invariably we have KJB_HAVE_MACHINE, but if we do not, the we need to source
# init_machine as to be standalone. This could be a different copy than the one
# that build sources before sourcing this file (init_compile).
# 
if ($?KJB_HAVE_MACHINE) then
    # Do not use VERBOSE_ECHO_2 as we may not have it yet. 
    if ($?KJB_VERBOSE_2) then
        echo "Script init_compile is not sourcing ${MAKE_PATH}init_machine because KJB_HAVE_MACHINE is set."
    endif 
else 
    # Do not use VERBOSE_ECHO as we may not have it yet. 
    if ($?KJB_VERBOSE) then
        echo "Script init_compile is sourcing ${MAKE_PATH}init_machine."
    endif 

    source ${KJB_SRC_PATH}Make/init_machine
    if ($status) exit $status
endif 

if (! $?KJB_WARN_LEVEL) then
    setenv KJB_WARN_LEVEL 2
endif

# Temporary while bootstrapping. Once bootstrapped, we should favor simply using
# p_stderr.

set P_STDERR = "${MAKE_SCRIPT_PATH}p_stderr"

if (($?prompt) && (! $?KJB_QUIET)) then
    setenv ECHO "echo "
else 
    setenv ECHO ": echo "
endif 

# For single lines of verbose echoes. For blocks of text, use an "if" as usual. 
if ($?KJB_VERBOSE) then
    setenv VERBOSE_ECHO "echo "
else 
    setenv VERBOSE_ECHO ": echo "
endif 

# For single lines of verbose echoes. For blocks of text, use an "if" as usual. 
if ($?KJB_VERBOSE_2) then
    setenv VERBOSE_ECHO_2 "echo "
else 
    setenv VERBOSE_ECHO_2 ": echo "
endif 

# ---------------------------------------------------------------------
# Set up PATH. We need to do this before we read the cache because different
# programs may want different compilers, and setting up the PATH after the cache
# would mean that this would not appear to take effect until the cache was
# nullified. Notice that we do not cache PATH. 
     
if ($?BASE_PATH) then 
    setenv PATH "${BASE_PATH}"
endif 

if (! $?PATH) then
    setenv PATH ""
endif

if ("${PATH}" == "") then
    setenv PATH "/bin:/usr/bin" 
endif

set compiler_search_dir = ""

if ($?COMPILER_SEARCH_DIR) then
    if ("${COMPILER_SEARCH_DIR}" != "") then
        set compiler_search_dir = "${COMPILER_SEARCH_DIR}"
    endif 
endif 

if ("${compiler_search_dir}" == "") then
    if (-e "COMPILER_SEARCH_DIR") then
        set compiler_search_dir = `grep -v '^ *#' < COMPILER_SEARCH_DIR | grep -v '^ *$' | sed 's/ //g'`
    endif 
endif 

if ("${compiler_search_dir}" != "") then
    if (-d "${compiler_search_dir}") then 
        setenv PATH "${compiler_search_dir}:${PATH}" 
    endif 
else if (-d "/bin_gcc_preferred") then 
    setenv PATH "/bin_gcc_preferred:${PATH}" 
endif 

${VERBOSE_ECHO} 
${VERBOSE_ECHO} PATH for build is: ${PATH}
${VERBOSE_ECHO} 

################################################################################
#  

# ---------------------------------------------------------------------
# Set up environment variable cache

set cache_fname="";
set do_cache = 1

if ($?DONT_CACHE ) then
    if ($DONT_CACHE) then
        ${ECHO} '$DONT_CACHE variable is set to TRUE. Suppressing environment variable caching.'
        set do_cache = 0
    endif
endif

# could relax $USER constraint below if it is guaranteed to be there
if (($do_cache && ! $?USER) ) then
    ${ECHO} '$USER variable not defined. Suppressing environment variable caching.'
    set do_cache = 0
endif

# could delete this test as stat and tempfile are standard
if (($do_cache && ( ! -x /usr/bin/find )) ) then
    ${ECHO} 'Find command not found. Suppressing environment variable caching.'
    set do_cache = 0
endif

if($?TMPDIR) then
    set tmp = "$TMPDIR"
else
    set tmp = "/tmp"
    setenv TMPDIR "${tmp}"
endif

if ($do_cache ) then
    if (! -w $tmp ) then
        ${ECHO} 'Writable temp directory not found. Suppressing environment variable caching.'
        set do_cache = 0
    endif
endif

if ($do_cache ) then
    set tmp = "$tmp/$USER"
    
    if (! -e $tmp) then
        mkdir $tmp
    else if (! -w $tmp ) then
        ${ECHO} 'Writable temp directory not found. Suppressing environment variable caching.'
        set do_cache = 0
    endif
endif

if ($do_cache ) then
    set suffix=""

    if($?KJB_CC) then
        set suffix = "${suffix}.KJB_CC.${KJB_CC}"
    endif

    if($?KJB_CXX) then
        set suffix = "${suffix}.KJB_CXX.${KJB_CXX}"
    endif
endif

if ($?PRODUCTION) then
    if (("${PRODUCTION}" != "0") && ("${PRODUCTION}" != "1")) then
        ${ECHO} "Warning (init_compile): If set, PRODUCTION should be 0 or 1. Assuming 1 for ->${PRODUCTION}<-."
        setenv PRODUCTION 1
    endif 

    if ($do_cache ) then
        set suffix = "${suffix}.PRODUCTION.${PRODUCTION}"
    endif
endif

if ($?NO_LIBS) then
    if (("${NO_LIBS}" != "0") && ("${NO_LIBS}" != "1")) then
        ${ECHO} "Warning (init_compile): If set, NO_LIBS should be 0 or 1. Assuming 1 for ->${NO_LIBS}<-."
        setenv NO_LIBS 1
    endif 

    if ($do_cache ) then
        set suffix = "${suffix}.NO_LIBS.${NO_LIBS}"
    endif
endif

if ($?NO_BOOST) then
    if (("${NO_BOOST}" != "0") && ("${NO_BOOST}" != "1")) then
        ${ECHO} "Warning (init_compile): If set, NO_BOOST should be 0 or 1. Assuming 1 for ->${NO_BOOST}<-."
        setenv NO_BOOST 1
    endif 

    if ($do_cache ) then
        set suffix = "${suffix}.NO_BOOST.${NO_BOOST}"
    endif
endif

# One that might be used in test scripts in the future
if ($?ALT_LIBS) then
    if (("${ALT_LIBS}" != "0") && ("${ALT_LIBS}" != "1")) then
        ${ECHO} "Warning (init_compile): If set, ALT_LIBS should be 0 or 1. Assuming 1 for ->${ALT_LIBS}<-."
        setenv ALT_LIBS 1
    endif 

    if ($do_cache ) then
        set suffix = "${suffix}.ALT_LIBS.${ALT_LIBS}"
    endif
endif

if ($?FORCE_DEBUG) then
    if (("${FORCE_DEBUG}" != "0") && ("${FORCE_DEBUG}" != "1")) then
        ${ECHO} "Warning (init_compile): If set, FORCE_DEBUG should be 0 or 1. Assuming 1 for ->${FORCE_DEBUG}<-." 
        setenv FORCE_DEBUG 1
    endif 

    if ($do_cache ) then
        set suffix = "${suffix}.FORCE_DEBUG.${FORCE_DEBUG}"
    endif
endif

if ($?FORCE_TEST) then
    if (("${FORCE_TEST}" != "0") && ("${FORCE_TEST}" != "1")) then
        ${ECHO} "Warning (init_compile): If set, FORCE_TEST should be 0 or 1. Assuming 1 for ->${FORCE_TEST}<-."
        setenv FORCE_TEST 1
    endif 

    if ($do_cache) then
        set suffix = "${suffix}.FORCE_TEST.${FORCE_TEST}"
    endif
endif

if ($?FORCE_OPTIMIZE) then
    if (("${FORCE_OPTIMIZE}" != "0") && ("${FORCE_OPTIMIZE}" != "1")) then
        ${ECHO} "Warning (init_compile): If set, FORCE_OPTIMIZE should be 0 or 1. Assuming 1 for ->${FORCE_OPTIMIZE}<-."
        setenv FORCE_OPTIMIZE 1
    endif 

    if ($do_cache) then
        set suffix = "${suffix}.FORCE_OPTIMIZE.${FORCE_OPTIMIZE}"
    endif
endif

if ($?PREFER_PCH) then
    if (("${PREFER_PCH}" != "0") && ("${PREFER_PCH}" != "1")) then
        ${ECHO} "Warning (init_compile): If set, PREFER_PCH should be 0 or 1. Assuming 1 for ->${PREFER_PCH}<-."
        setenv PREFER_PCH 1
    endif 

    if ($do_cache) then
        set suffix = "${suffix}.PREFER_PCH.${PREFER_PCH}"
    endif
endif

if (! $?BOOST_VERSION) then
    setenv BOOST_VERSION ""
endif

# Becomming obsolete due to BUILD_ENV. 
# if ("${BOOST_VERSION}" == "") then
#     if (-e BOOST_VERSION) then 
#         setenv BOOST_VERSION `grep -v '^ *#' < BOOST_VERSION | grep -v '^ *$' | sed 's/ //g'`
#     endif 
# endif 

if ("${BOOST_VERSION}" != "") then
    if ($do_cache) then
        set suffix = "${suffix}.BOOST.${BOOST_VERSION}"
    endif

    ${VERBOSE_ECHO} BOOST_VERSION being forced to: ${BOOST_VERSION}
endif 

if ($do_cache) then
    set cache_fname = "$tmp/kjb_env${suffix}"

    # handle unwritable cache file
    if ( -e "${cache_fname}" && ! -w "${cache_fname}") then
        ${ECHO} 'Cache file not writable.  Suppressing environment variable caching.'
        set do_cache = 0
    endif
endif

if ($do_cache ) then
    if ($?DO_CACHE_LOCK) then
        # Kobus. Experimental. Implement a dumb lock. It is not perfect.
        #
        # Sleep a small amount, which is likely to be different (roughly one
        # chance in the magic number below, currently 30).  This does not
        # work on all systems, but it is not critical, although without it,
        # there is a high chance the locking will not happen.. 
        #
        set x = $$ ; @ x %= 30 ; sleep 0.$x >& /dev/null
        if (${status}) then
            ${ECHO} "Random sleep failed." 
        endif

        set cache_lock_file =  "${tmp}/cache_lock"

        if (-e ${cache_lock_file}) then
            set max_age = 100

            # If the lock is older than max_age seconds, ignore it. 
            set locked = `tools younger_than ${max_age} ${cache_lock_file}`

            if (${status}) then
                # If this command fails we assume that this is due to the lockfile being removed since
                # we checked for it due to the process that had it finally
                # finishing, which does happen. In this case we do nothing.
                ${ECHO} "Cache file disappeared while getting its age." 
            else if ("${locked}" == "") then
                ${ECHO} "Ignoring cache lock because it is older than ${max_age} seconds." 
            else
                set lock_proc = `cat ${cache_lock_file}`

                set count = 1
                # Wait up to N seconds to get the lock. 
                set wait_in_seconds = 30 

                while (${count} < ${wait_in_seconds})
                    ps ${lock_proc} >& /dev/null
                    if (${status}) then
                        ${ECHO} "Resetting lock file ${cache_lock_file} as process ${lock_proc} does not exist." 
                        break 
                    else if ("${lock_proc}" == "$$") then
                        ${ECHO} "Resetting lock file ${cache_lock_file} as the process that owns it is this one." 
                        ${ECHO} "This is likely due to early or forced exit of init_compile followed by sourcing init_compile." 
                        break 
                    endif

                    sleep 1

                    if (! -e "${cache_lock_file}") then
                        ${VERBOSE_ECHO} "Got the cache lock" 
                        break
                    endif

                    ${ECHO} "Waiting for the cache lock (${count}/${wait_in_seconds})" 

                    @ count += 1
                end

                if (${count} >= ${wait_in_seconds}) then
                    ${ECHO} "Ignoring cache lock due to time out." 
                endif
            endif
        endif

        ${VERBOSE_ECHO} "Setting cache lock." 

        echo $$ >! ${cache_lock_file}

        # End of optional activity of using a lock file for the cache. 
    endif

    if (-e "${cache_fname}") then
        # Kobus. Added a check that the cache is newer than this file. However,
        # we must use the system "test". If someone's program is test.c, then
        # weird things can happen. Fortunately, system test should be available
        # in a few common places.
        #
        set cache_is_old = 0
        set test_prog_dirs = "/bin /usr/bin /usr/X11/bin"
        set test_prog = ""

        foreach test_prog_dir (${test_prog_dirs})
            if (-x ${test_prog_dir}/test) then
                set test_prog = " ${test_prog_dir}/test"
                break
            endif
        end 

        if ("${test_prog}" != "") then
            # FIXME
            #
            # The dependency on init_ua_hpc should be studied. If it can be
            # removed, then remove the copying of it inside make_src_dist. 
            # Also, the first two must exist, but down below we assume
            # non-existance means out of date, which is true for other
            # dependencies added later. Perhaps two kinds of dependencies should
            # be considered.
            #
            set init_dependencies = "${KJB_SRC_PATH}/Make/init_machine ${KJB_SRC_PATH}/Make/init_compile ${KJB_SRC_PATH}/Make/init_ua_hpc"

            # TODO: Improve the precision of this test. 
            if ("${OS}" != "mac_osx") then
                set init_dependencies = "/etc/ld.so.cache ${init_dependencies}" 
            endif 

            ### if ("${USER}" == "kobus") then
                # Kobus. There seems to be small problem in this vicinity.
                # Perhaps the command gets too long for eval on the mac.
                # Providing some output (below) and an alternative for
                # experimentation.
                #
                ${VERBOSE_ECHO} "Using alternative method for loading ALL_LIBS from cache."

                cat $cache_fname | grep ALL_LIBS > ${tmp}/kjb_env.setenv_all_libs
                source ${tmp}/kjb_env.setenv_all_libs

                if ($?ALL_LIBS) then 
                    ${VERBOSE_ECHO} "Loading of ALL_LIBS from cache succeeded."
                    ${VERBOSE_ECHO} "ALL_LIBS: ${ALL_LIBS}"
                else 
                    setenv ALL_LIBS ""
                    ${VERBOSE_ECHO} "Loading of ALL_LIBS from cache failed. Setting ALL_LIBS to empty string."
                endif
                    
            ### else
                # Kyle.  Load only the ALL_LIBS variable from the cache
                ### set cmd = `cat $cache_fname | grep ALL_LIBS`
                ### eval "${cmd}"
            ## endif

            if ($?ALL_LIBS) then
                set  init_dependencies = "${init_dependencies} ${ALL_LIBS}"
            endif

            foreach init_dependency (${init_dependencies}) 
                if (-e "${init_dependency}") then
                    ${test_prog_dir}/test ${init_dependency} -ot ${cache_fname}

                    if (${status} == 1) then 
                        ${ECHO} "${cache_fname} is older than ${init_dependency}. Regenerating ..."

                        set cache_is_old = 1
                        break
                    endif
                else
                    ${ECHO} "Assuming cache is out of date because ${init_dependency} does not exist. Regenerating ..."
                    set cache_is_old = 1
                    break
                endif
            end 

            # End of case that we have a test program that can check times of
            # init dependencies.  
        endif

        if (${cache_is_old}) then
            # Kyle. We'll rebuild the cache, so start with a "clean" set of
            # environment variables by unsetting any variables we set above
            unsetenv ALL_LIBS
        else 
            ${VERBOSE_ECHO} "Using cache file: $cache_fname."

            source $cache_fname
            sed < ${cache_fname} 's/setenv  *\([^ ]*\)  */export \1=/' >!  "$tmp/kjb_env.sh"


            if ($?KJB_UA_HPC) then
                if ($?EXTRA_PATH) then
                    if (! $?EXTRA_PATH_ADDED) then
                        if ("${EXTRA_PATH}" != "") then
                            if (! $?BASE_PATH) then 
                                 setenv BASE_PATH "${PATH}"
                            endif
                            setenv PATH "${EXTRA_PATH}:${PATH}"
                            setenv BASE_PATH "${EXTRA_PATH}:${BASE_PATH}"
                        endif

                        setenv EXTRA_PATH_ADDED 1 
                    endif
                endif

                if ($?EXTRA_MANPATH) then
                    if (! $?EXTRA_MANPATH_ADDED) then
                        if ("${EXTRA_MANPATH}" != "") then
                            setenv MANPATH "${EXTRA_MANPATH}:${MANPATH}"
                        endif

                        setenv EXTRA_MANPATH_ADDED 1 
                    endif
                endif
            endif

            if ($?DO_CACHE_LOCK) then
                if (-e "${cache_lock_file}") then
                    ${VERBOSE_ECHO} "Removing the cache lock" 
                    /bin/rm -f "${cache_lock_file}"
                endif
            endif

            exit
        endif
    endif
    # create a file to store names of environment variables
    set varname_fname = "$tmp/kjb_varnames_$$"
    cat /dev/null >! "${varname_fname}"

    ${ECHO} "Generating environment variable cache in ${varname_fname} which will be written to ${cache_fname}."

    alias kjb_setenv 'setenv \!*; echo \!:1 >>! $varname_fname;'
else
    # Case that we do not want a cache. 
    alias kjb_setenv 'setenv \!*;'
    ${KJB_RM} ${tmp}/kjb_env.sh 
endif

# This env variable allows not having MAKE_SCRIPT_PATH in our path, but it
# should probably not be used in scripts that do not source init_compile. For
# general purpose shared scripts, it is probabably better that we assume that
# MAKE_SCRIPT_PATH is in the path (as it would likely be if one is using a
# shared script), and simply use the lower case version.
#
kjb_setenv P_STDERR  "${MAKE_SCRIPT_PATH}p_stderr"

kjb_setenv VAR_CACHE_FNAME "${cache_fname}"

# Done setting up environment variable cache. Everything that follows is only
# done if we are not grabbing the environment variables from the cache. This
# means that everything we need to export will be set below with kjb_setenv. 

################################################################################
#                 Sort out top level directories. 
################################################################################

# Work on a "misc" dir. We only wnat one of these. 
#
# If USER_WORK is defined, it specifies an alternative to HOME that will be
# searched first. This is encoded as user_work being non-empty string. 
#

set user_work = ""
if ($?USER_WORK) then
    if ("${USER_WORK}" != "${HOME}") then 
        set user_work = "${USER_WORK}"
    endif
endif

if ("${user_work}" != "") then
    kjb_setenv USER_DIR ${user_work}/
else
    kjb_setenv USER_DIR ${HOME}/
endif

kjb_setenv USER_BIN_DIR ${USER_DIR}bin/${MACHINE}/ 
kjb_setenv USER_LOAD_DIR ${USER_DIR}load/${MACHINE}/ 

# Work on a "misc" dir. we only wnat one of these. We go through some choices,
# first looking for one with a load, then one that exists. If neither succedes,
# we use ${HOME}/misc regardless of whether it works. 

set first_choice = ""
if ($?MISC_DIR) then
    set first_choice = "$MISC_DIR"
endif

# Root should not link code in non-root controlled dirs. 
if ("${USER}" == "root") then
    set misc_dirs = (${first_choice})
else
    if ($?MOUNTED_MISC_DIR) then 
        set misc_dirs = (${first_choice} ${MOUNTED_MISC_DIR} /misc/ ${HOME}/misc/ )
    else 
        set misc_dirs = (${first_choice} /misc/ /Volumes/misc/ ${HOME}/misc/ )
    endif

    set other_users = "kobus"
    foreach other_user (${other_users}) 
        id ${other_user} >& /dev/null
        if (! $status) then
            eval set other_user_home = "~${other_user}" >& /dev/null
            if (! $status) then
                set misc_dirs = "${misc_dirs} ${other_user_home}/misc/"
            endif
        endif
    end
endif

# We prefer a MISC_DIR with a load sub dir, but if we don't find one, then we
# use the first one that exists. 
#
set found = 0
foreach misc_dir (${misc_dirs})
    if (-d ${misc_dir}/load) then
        kjb_setenv MISC_DIR ${misc_dir}
        set found = 1
        break
    endif
end

if (! ${found}) then
    foreach misc_dir (${misc_dirs})
        if (-d ${misc_dir}) then
            kjb_setenv MISC_DIR ${misc_dir}
            set found = 1
            break
        endif
    end
endif

if (! ${found}) then
    kjb_setenv MISC_DIR ${HOME}/misc/
endif

set misc_search_dir = ""
if (-d "${MISC_DIR}") then
    set misc_search_dir = "${MISC_DIR}"
endif

kjb_setenv MISC_BIN_DIR ${MISC_DIR}bin/${MACHINE}/ 
kjb_setenv MISC_LOAD_DIR ${MISC_DIR}load/${MACHINE}/ 
kjb_setenv MISC_INCLUDE_DIR ${MISC_DIR}include/
kjb_setenv MISC_DOC_DIR ${MISC_DIR}doc/ 

# ##############################################################################
#
# Dirs for installation of libraries shared among computers. This sets the
# default values. If any of them are already set, then we do not touch them. 

if (! $?INSTALL_PREFIX_DIR) then
    kjb_setenv INSTALL_PREFIX_DIR "${MISC_DIR}"
endif

if (! $?INSTALL_LOAD_DIR) then
    kjb_setenv INSTALL_LOAD_DIR "${MISC_DIR}load/${MACHINE}/"
endif

if (! $?INSTALL_LOAD_AFT_DIR) then
    kjb_setenv INSTALL_LOAD_AFT_DIR "${MISC_DIR}load_after/${MACHINE}/"
endif

if (! $?INSTALL_INCLUDE_DIR) then
    kjb_setenv INSTALL_INCLUDE_DIR  "${MISC_DIR}include/"
endif

if (! $?INSTALL_BIN_DIR) then
    kjb_setenv INSTALL_BIN_DIR "${MISC_BIN_DIR}"
endif

if (! $?INSTALL_DATA_DIR) then
    kjb_setenv INSTALL_DATA_DIR "${MISC_DIR}share/"
endif

if (! $?INSTALL_DOC_DIR) then
    kjb_setenv INSTALL_DOC_DIR "${MISC_DIR}doc/"
endif

if (! $?INSTALL_INFO_DIR) then
    kjb_setenv INSTALL_INFO_DIR "${MISC_DIR}info/"
endif

if (! $?INSTALL_MAN_DIR) then
    kjb_setenv INSTALL_MAN_DIR "${MISC_DIR}man/"
endif

################################################################################

# Don't change the structure of the following line. It is edited automatically
# when exported versions are built. Specifically, we change the variable that is
# being set to EXPORTED_SOURCE (from NOT_EXPORTED_SOURCE). Emulating exported
# source can be achieved by setting EMULATE_EXPORTED_SOURCE. The following line
# is not used for anything, other than to force EXPORTED_SOURCE when edited to
# do so. Setting EMULATE_EXPORTED_SOURCE sets some defines below. 
#
# NOTE: Both building exported versions of the libraries and emulating doing so
#       are currently BROKEN.
#
if ($?EMULATE_EXPORTED_SOURCE) then
    kjb_setenv EXPORTED_SOURCE
else 
    kjb_setenv NOT_EXPORTED_SOURCE
endif

################################################################################

if ($?EXPORTED_SOURCE) then
    kjb_setenv KJB_ENVIRONMENT 0
endif

if (! $?KJB_ENVIRONMENT ) then
    kjb_setenv KJB_ENVIRONMENT 0
endif

################################################################################

# We have struggled with the recent change that linux packages are now often
# distributed by default as runtime only. This results in the latest .so.NN
# files, but no .a or .so for linking. We probably should have a way to report
# this, but it will take some work and we need to modularize this script anyway,
# so best to do it after that. 

# set filter_non_devel = " cat "
set filter_non_devel = " grep -v \.so\."

################################################################################

# These names are misleading. They are OBSOLETE and will be removed soon.
# kjb_setenv KJB_DIR              "/"
# kjb_setenv KJB_PARENT_DIR       "../"
# kjb_setenv KJB_CUR_DIR          "./"
#
# New names for the above. 
kjb_setenv KJB_DIR_STR          "/"
kjb_setenv KJB_PARENT_DIR_STR   "../"
kjb_setenv KJB_CUR_DIR_STR      "./"
#

kjb_setenv HTML_MAN_DIR "${DOC_DIR}man/html/"
kjb_setenv WIKI_MAN_DIR "${DOC_DIR}man/wiki/"
kjb_setenv MAN_DIR "${DOC_DIR}man/man3/"
kjb_setenv CAT_DIR "${DOC_DIR}man/cat3/"

if ($?PROGRAM_MAN_DIR == 0) then 
    kjb_setenv PROGRAM_MAN_DIR "${DOC_DIR}man/man1/"
endif 

if ($?PROGRAM_CAT_DIR == 0) then 
    kjb_setenv PROGRAM_CAT_DIR "${DOC_DIR}man/cat1/"
endif 

# This should NOT be null. 
kjb_setenv SHARED_DIR "shared/"

################################################################################

if ((-d /usr/local/uaopt) || (-d /uaopt) || (-d /cm/local)) then
    kjb_setenv KJB_UA_HPC
    if ( ! $do_cache ) then
        ${ECHO} "Warning: you cannot use DONT_CACHE on HPC, sorry."
    endif
endif

################################################################################

# Test whether we are on one of the TACC clusters.

echo `hostname` | grep tacc.utexas.edu$
if (! ${status}) then
    kjb_setenv KJB_TACC_HPC 1
    if ( ! $do_cache ) then
        ${ECHO} "Warning: you cannot use DONT_CACHE on HPC, sorry."
    endif
endif

################################################################################

set num_cpu = 1

if ("${OS}" == "mac_osx") then 
    set temp_num_cpu = `/usr/sbin/sysctl -a hw.ncpu | sed 's/.*: *\([1-9][0-9]*\) *$/\1/'`

    set test_digits = `echo ${temp_num_cpu} | grep '^[1-9][0-9]*$'`

    if ("${temp_num_cpu}" == "${test_digits}") then
        set num_cpu = ${temp_num_cpu}
    endif
else if (-e /proc/cpuinfo) then
    set num_cpu = `grep '^processor.*:.*' /proc/cpuinfo | /usr/bin/tail -1 | sed  's/^.*:[^0-9]*\([0-9]*\)$/\1/'`
    @ num_cpu += 1
endif

kjb_setenv NUM_CPU ${num_cpu}

set max_num_proc = `limit maxproc | sed 's/[^0-9]*\([0-9]*\).*/\1/'`

if (${status}) then
    ${ECHO} " "
    ${ECHO} "Failed to get the maxproc limit. Proceeding optimistically." 
    ${ECHO} " "
    kjb_setenv MAX_NUM_PROC -1
else if (("${max_num_proc}" == "") || ("${max_num_proc}" == "unlimited")) then
    kjb_setenv MAX_NUM_PROC -1
else 
    kjb_setenv MAX_NUM_PROC ${max_num_proc}
endif

set num_make_jobs = "${NUM_CPU}"

if (${MAX_NUM_PROC} > 0) then
    @ temp = ${MAX_NUM_PROC} / 8

    if ($num_make_jobs > $temp) then
        set num_make_jobs = ${temp}
    endif
endif

# Set a global upper bound.
#
if (${num_make_jobs} > 64) then
    set num_make_jobs = 64
endif
    
kjb_setenv GMAKE_NUM_CPU "-j ${num_make_jobs}"

if (${MAX_NUM_PROC} > 0) then
    @ temp = ${MAX_NUM_PROC} / 10

    if ($num_make_jobs > $temp) then
        kjb_setenv SERIALIZE_FILE_BUILD 1
    endif
endif

################################################################################

if (${OS} == "linux_x86_64") then
    # Assume make is gmake
    kjb_setenv KJB_MAKE_PROG "make" 
    kjb_setenv KJB_MAKE_OPTS "-r --no-print-directory" 
    kjb_setenv KJB_MAKE_OPTS_KEEP "-k"
    kjb_setenv KJB_MAKE_OPTS_SILENT "-s"
    kjb_setenv KJB_MAKE_OPTS_STOP "-S"
    kjb_setenv KJB_MAKE_OPTS_PAR "${GMAKE_NUM_CPU} ${KJB_MAKE_OPTS_KEEP}"
    kjb_setenv KJB_MAKE_OPTS_SER "-j 1 ${KJB_MAKE_OPTS_KEEP}"
    kjb_setenv KJB_MAKE_OPTS_DEBUG "-d"
else if (${OS} == "linux_386") then
    # Assume make is gmake
    kjb_setenv KJB_MAKE_PROG "make" 
    kjb_setenv KJB_MAKE_OPTS "-r --no-print-directory" 
    kjb_setenv KJB_MAKE_OPTS_KEEP "-k"
    kjb_setenv KJB_MAKE_OPTS_STOP "-S"
    kjb_setenv KJB_MAKE_OPTS_SILENT "-s"
    kjb_setenv KJB_MAKE_OPTS_PAR "${GMAKE_NUM_CPU} ${KJB_MAKE_OPTS_KEEP}"
    kjb_setenv KJB_MAKE_OPTS_SER "-j 1 ${KJB_MAKE_OPTS_KEEP}"
    kjb_setenv KJB_MAKE_OPTS_DEBUG "-d"
else if (${OS} == "mac_osx") then
    # Assume make is gmake
    kjb_setenv KJB_MAKE_PROG "make" 
    kjb_setenv KJB_MAKE_OPTS "-r --no-print-directory" 
    kjb_setenv KJB_MAKE_OPTS_KEEP "-k"
    kjb_setenv KJB_MAKE_OPTS_STOP "-S"
    kjb_setenv KJB_MAKE_OPTS_SILENT "-s"
    kjb_setenv KJB_MAKE_OPTS_PAR "${GMAKE_NUM_CPU} ${KJB_MAKE_OPTS_KEEP}"
    kjb_setenv KJB_MAKE_OPTS_SER "-j 1 ${KJB_MAKE_OPTS_KEEP}"
    kjb_setenv KJB_MAKE_OPTS_DEBUG "-d"
else 
    # Just and/or guessing or leaving blank.
    kjb_setenv KJB_MAKE_PROG "make" 
    kjb_setenv KJB_MAKE_OPTS "-r" 
    kjb_setenv KJB_MAKE_OPTS_KEEP "-k"
    kjb_setenv KJB_MAKE_OPTS_STOP "-S"
    kjb_setenv KJB_MAKE_OPTS_SILENT ""
    kjb_setenv KJB_MAKE_OPTS_SER ""
    kjb_setenv KJB_MAKE_OPTS_PAR ""
    kjb_setenv KJB_MAKE_OPTS_DEBUG "-d"
endif

# These can get adjusted in build-2 because they do not change the cached. 
kjb_setenv KJB_MAKE_PAR    "${KJB_MAKE_PROG} ${KJB_MAKE_OPTS} ${KJB_MAKE_OPTS_PAR}"
kjb_setenv KJB_MAKE_SERIAL "${KJB_MAKE_PROG} ${KJB_MAKE_OPTS} ${KJB_MAKE_OPTS_SER}"
kjb_setenv KJB_MAKE        "${KJB_MAKE_PAR}"

################################################################################

set use_ld_library_path = 0
set use_include_path = 0

if (($?KJB_UA_HPC) && (-e ${MAKE_PATH}init_ua_hpc)) then 
    if ($?UA_HPC_MODULES) then
        # 
        # If we are here, in the depths of init_compile, but this is not the
        # first time this module has been sourced, we might want a fresh one.
        # Clear to be sure. Note that this unsets UA_HPC_MODULES.
        # 
        set ua_hpc_clear = 1
        unset ua_hpc_init 
        source  ${MAKE_PATH}init_ua_hpc
    endif

    set ua_hpc_init = 1
    unset ua_hpc_clear 
    source  ${MAKE_PATH}init_ua_hpc

    if ($?UA_HPC_MODULES) then
        ${ECHO} " "
        ${ECHO} "Adding UA_HPC specfic environment variables to the cache"

        if ($?INTEL_LICENSE_FILE) echo INTEL_LICENSE_FILE >>! ${varname_fname}
        if ($?UA_HPC_MODULES) echo UA_HPC_MODULES >>! ${varname_fname}

        # Since UA HPC uses environment variables such as LD_LIBRARY_PATH
        # and INCLUDE, it seems prudent to cache them for this environment
        # even though we do not cache them normally. Ideally the cache
        # would have already extracted all relevant information, but we
        # cannot be sure that nothing will break if we pull LD_LIBRARY_PATH
        # and other environment variables from all the tools. 
        #
        if ($?LD_LIBRARY_PATH) echo LD_LIBRARY_PATH >>! ${varname_fname}
        if ($?INCLUDE) echo INCLUDE   >>! ${varname_fname}
        if ($?LOADEDMODULES) echo LOADEDMODULES  >>! ${varname_fname}
        if ($?_LMFILES_) echo _LMFILES_   >>! ${varname_fname}

        if ($?EXTRA_PATH) echo EXTRA_PATH   >>! ${varname_fname}
        if ($?EXTRA_MANPATH) echo EXTRA_MANPATH   >>! ${varname_fname}

        set use_ld_library_path = 1
        set use_include_path = 1

        alias clean_hpc 'clean_cache; unset ua_hpc_init; set ua_hpc_clear = 1; source "${MAKE_PATH}init_ua_hpc"'
        ${ECHO} " "
        ${ECHO} "Shell alias clean_hpc has been created." 
        ${ECHO} " "
    endif
endif


################################################################################
#
# We are going to do this more naively and simply than UA HPC.
# We just load the modules one time and set a flag saying "done."

if ($?KJB_TACC_HPC) then
    if ( ! $?TACC_HPC_MODULES) then
        source "${MAKE_PATH}/init_tacc_hpc"
        setenv TACC_HPC_MODULES 1
    endif
endif

################################################################################


# Ensure that needed programs exist, are not aliased, and have the right options
# for the current system. 

set needed_progs = "rm cat grep egrep sed ls ln touch chmod mkdir ar makedepend ${KJB_MAKE_PROG} cpp" 

# Patch paths if needed.  This whole section needs to be restructured to work
# better with the choosing of a compiler below. 

set more_paths = "/usr/ucb /usr/css/bin /usr/bin/X11 /usr/X11/bin /usr/X11R6/bin /usr/local/bin /usr/local/X11/bin /usr/local/X11R6/bin"

foreach needed_prog (${needed_progs})
    set have_prog = 0

    # Note: If sed is not in our "bootstrap list", this could fail. 
    set test_paths = `echo ${PATH} | sed 's/:/ /g'`
       
    foreach test_path ( $test_paths )
        if (-x ${test_path}/${needed_prog}) then
            set have_prog = 1
            break
        endif
    end

    if ( ! ${have_prog}) then
        set found_prog = 0

        foreach test_path ( $more_paths )
            if (-x ${test_path}/${needed_prog}) then
                kjb_setenv PATH "${PATH}:${test_path}"
                ${VERBOSE_ECHO} "Adding ${test_path} to PATH for ${needed_prog}."

                set found_prog = 1
                
                break
            endif
        end

        if (! ${found_prog} ) then
            ${ECHO} "Warning: Cannot find a path to ${needed_prog}."
        endif
    endif
end

# ------------------------------------------------------------------
# I don't think this is relevant anymore. Trying with it disabled.
#
# if (! $?LD_LIBRARY_PATH) then
#     kjb_setenv LD_LIBRARY_PATH ""
# endif
#
# set ld_path_dirs = `echo ${LD_LIBRARY_PATH} | sed 's/:/ /g'`
# set test_paths = `echo $PATH | sed 's/:/ /g'`
#
# set ld_path_changed = 0 
#
# foreach test_path (${test_paths}) 
#     set have_bin = `echo ${test_path} | grep '/bin'`
#
#     if ("${have_bin}" != "") then
#         set test_ld_path_dir = `echo ${test_path} | sed 's#/bin#/lib#'`
#
#         if (-d ${test_path}) then
#             set have_ld_path_dir = 0
#
#             foreach ld_path_dir (${ld_path_dirs}) 
#                 if ("${ld_path_dir}" == "${test_ld_path_dir}") then
#                     set have_ld_path_dir = 1
#                     break
#                 endif
#             end 
#
#             if (! ${have_ld_path_dir} ) then
#                 if ("${LD_LIBRARY_PATH}" == "") then
#                     kjb_setenv LD_LIBRARY_PATH "${test_ld_path_dir}"
#                 else 
#                     kjb_setenv LD_LIBRARY_PATH "${LD_LIBRARY_PATH}:${test_ld_path_dir}"
#                 endif
#
#                 set ld_path_changed = 1
#                 
#             endif
#          endif
#     endif
# end
#
# if (($?KJB_VERBOSE) && (${ld_path_changed})) then
#     echo "LD_LIBRARY_PATH is now: ${LD_LIBRARY_PATH}"
# endif
# ------------------------------------------------------------------

################################################################################
#
# I often use a sym link for this one, but it is /usr/local/X11R6/bin/makedepend
# on sun5 and hp

kjb_setenv MAKEDEPEND makedepend

set test_gnu_make = `make -v -f /dev/null |& grep "GNU Make"`

if ("${test_gnu_make}" != "") then 
    kjb_setenv MAKE_FLAVOR "gmake"
else if ("${OS}" == "sun5") then
    kjb_setenv MAKE_FLAVOR "sun5"
else 
    kjb_setenv MAKE_FLAVOR "UNKNOWN"
endif

if ("${MAKE_FLAVOR}" == "sun5") then 
    kjb_setenv SHELL_FOR_MAKE_FLAG ""
else
    kjb_setenv SHELL_FOR_MAKE_FLAG " -f"
endif

if (-x /bin/csh) then
    kjb_setenv SHELL_FOR_MAKE   "/bin/csh${SHELL_FOR_MAKE_FLAG}"
else if (-x /usr/bin/csh) then
    kjb_setenv SHELL_FOR_MAKE  "/usr/bin/csh${SHELL_FOR_MAKE_FLAG}"
else if (-x /bin/tcsh) then
    kjb_setenv SHELL_FOR_MAKE  "/bin/tcsh${SHELL_FOR_MAKE_FLAG}"
else if (-x /usr/bin/tcsh) then
    kjb_setenv SHELL_FOR_MAKE  "/usr/bin/tcsh${SHELL_FOR_MAKE_FLAG}"
else if (-x /usr/local/bin/csh) then
    kjb_setenv SHELL_FOR_MAKE  "/usr/local/bin/csh${SHELL_FOR_MAKE_FLAG}"
else
    # Back to the default. Things will likely break. 
    kjb_setenv SHELL_FOR_MAKE "/bin/sh${SHELL_FOR_MAKE_FLAG}"
endif

kjb_setenv KJB_MAKE_NO_OP       "${MAKE_SCRIPT_PATH}fancy_nop "
kjb_setenv KJB_MAKE_NOP         "${KJB_MAKE_NO_OP}" 

#
# ECHO suppressing (no relevant commands at this point, just this comment.)
#
# Both known versions of make respect the "@" echo suppress, but only gmake does
# this after variable substitution and so controlling whether we do it or now
# via environment variables is potentially not viable. 
#
# Currently we are assuming that all makes respect "@", which occurs in the
# Makefiles as is.  However, we may have to back off on this a some point if we
# run into version of make that does not respect "@".
#
kjb_setenv ECHO_IF_VERBOSE  "${MAKE_SCRIPT_PATH}echo_if_verbose" 
kjb_setenv ECHO_UNLESS_QUIET  "${MAKE_SCRIPT_PATH}echo_unless_quiet" 

# ---------------------------------------------------------------------

#
# Continue to define symbols for needed programs. Even if their current
# definition is not very interesting, it makes it easier if later we need to
# condition their definitions on the environment in the future as we have
# already done for some above, and will do for more of them below. 
#

kjb_setenv KJB_ECHO             "echo"
kjb_setenv KJB_CAT              "cat"
kjb_setenv KJB_CP               "cp -r -f"
kjb_setenv KJB_CREATE           "cp /dev/null"
kjb_setenv KJB_GREP             "grep"
kjb_setenv KJB_EGREP            "egrep"
kjb_setenv KJB_FILE             "file"
# A version of ls that outputs one file per line. Most if not all ls's do so
# when the output is not a terminal. However, we can use the '-1' option for
# clarity and robustness.
kjb_setenv KJB_LS               "ls -1"
kjb_setenv KJB_LN               "ln -s -f"
kjb_setenv KJB_MV               "mv"
kjb_setenv KJB_RM               "rm -r -f"
kjb_setenv KJB_TOUCH            "touch"
kjb_setenv KJB_TOUCH_1990       "touch -t 199001010000"
kjb_setenv KJB_PERMIT_EXECUTION "chmod -R a+rx"
kjb_setenv KJB_PERMIT_READ      "chmod -R a+rX"
kjb_setenv KJB_MKDIR            "mkdir -p"
kjb_setenv KJB_SED              "sed"

# setenv KJB_COMPRESS bzip2
# setenv KJB_COMPRESS_SUFFIX bz2
#
# Back to gzip --- It does not compress quite as well, but is more convenient
#
setenv KJB_COMPRESS             "gzip"
setenv KJB_COMPRESS_SUFFIX      "gz"

# ---------------------------------------------------------------------

set test_paths = `echo ${PATH} | sed 's/:/ /g'`
   
kjb_setenv KJB_STAT "stat"
kjb_setenv KJB_STAT_FLAVOR "NONE"

set have_stat = 0 

foreach test_path ( $test_paths )
    if (-x ${test_path}/stat) then
        set have_stat = 1
        break
    endif
end

if (${have_stat}) then
    set gnu_stat = `${KJB_STAT} --version |& grep 'GNU coreutils'`
    if ((! ${status} ) && ("${gnu_stat}" != "")) then
        kjb_setenv KJB_STAT_FLAVOR "gnu"
    else 
        set bsd_stat = `${KJB_STAT} -s . |& grep 'st_mtime'`
        if ((! ${status} ) && ("${bsd_stat}" != "")) then
            kjb_setenv KJB_STAT_FLAVOR "bsd"
        endif
    endif
endif

# ---------------------------------------------------------------------

kjb_setenv KJB_DIFF_TEST "diff -q" 

${KJB_DIFF_TEST} /dev/null /dev/null >& /dev/null

if (${status}) then
    kjb_setenv KJB_DIFF_TEST "diff"
endif

# ---------------------------------------------------------------------

### KJB_YACC ###

if ("${OS}" == "sun5") then
    if (`${MAKE_SCRIPT_PATH}can_execute byacc`) then
        kjb_setenv KJB_YACC byacc
    else if (`${MAKE_SCRIPT_PATH}can_execute bison`) then
        kjb_setenv KJB_YACC "bison -y"
    else
        kjb_setenv KJB_YACC "yacc"
    endif
else 
    which byacc >& /dev/null
    if (! ${status}) then 
        kjb_setenv KJB_YACC byacc
    else 
        which bison >& /dev/null
        if (! ${status}) then 
            kjb_setenv KJB_YACC "bison -y"
        else
            kjb_setenv KJB_YACC "yacc"
        endif
    endif
endif

# ---------------------------------------------------------------------

#
# Potential name clash if we use the variable "VIM". 
#

# This method really does not work very well. If we redirect output to /dev/null
# it is slow. If we run it in the background, then "-c" fails.  Switching
# permanently to the EX method below. 
# 
# kjb_setenv VIM_FOR_MAKE "vim -i NONE -u NONE -U NONE -n" 
# kjb_setenv VIM_SCRIPT_OPERATOR ">& /dev/null  -s"
# kjb_setenv VIM_SUFFIX "vim"
# # Error target as anything other than the screen slows things down a lot!
# # But not doing can lead to trouble also! 
# kjb_setenv VIM_IO_REDIRECTION  ''
#


#
# In vim 7, the carriage returns in substitution strings in files read in from
# standard input need to be protection with CTL-V, but this was not the case in
# earlier versions. Hence writing vim script files that are compatible is
# difficult. In the earlier versions, the "scriptin" facility was slow, but it
# seems to be better, partly due the -X option. Hence we read EX commands from
# standard input for versions 6 and lower, and we use the scripting method for
# version 7 and beyond. We crudely determine the version by checking that the -X
# option does in fact work. 

set vim_major_version = `vim --version |& grep 'VIM - Vi IMproved' | sed 's/VIM - Vi IMproved *\([0-9]*\)\..*/\1/'`

if (${status}) then
    ${P_STDERR} "Unable to get the vim version. Check that vim is installed."
    ${P_STDERR} "Aborting."
    exit 1
endif

#
# echo $vim_major_version

if ("${vim_major_version}" < 7) then
    kjb_setenv VIM_SUFFIX "ex"
else
    kjb_setenv VIM_SUFFIX "ex7"
endif

# Finding out VIM_WITHOUT_X This can take a while. If you are on a terminal,
# without the /dev/null, it is fast (although vim grabs the terminal). There
# must be some kind of timeout in vim that explains this. However,
# VIM_WITHOUT_X does not change very often on a given machine, and it is
# already known if you are using Kobus's login scripts. For other users,
# this problem will go away once we cache variables set by this script. 
#
if (! $?VIM_WITHOUT_X) then
    vim -X  -n -i NONE -u NONE -U NONE -c ':q' < /dev/null >& /dev/null

    if ("${status}") then
        kjb_setenv VIM_WITHOUT_X ""
    else 
        kjb_setenv VIM_WITHOUT_X "-X"
    endif
else if ($?KJB_VERBOSE) then
    ${ECHO} "Have VIM_WITHOUT_X. No need to determine it."
    endif
endif

#
# EX way seems the best. 
#
set prefer_ex = 1

if ("${prefer_ex}") then
    # 
    #  EX way. Generally best. 
    #
    kjb_setenv VIM_FOR_MAKE "vim ${VIM_WITHOUT_X} -n -i NONE -u NONE -U NONE -e" 
    kjb_setenv VIM_SCRIPT_OPERATOR '-s < '
    kjb_setenv VIM_IO_REDIRECTION  '>& /dev/null'
    kjb_setenv VIM_IO_REDIRECTION_2  '< /dev/null >& /dev/null'
else
    #
    # Vim script way. Does not work as well.  Keep this code handy for further
    # experimentation. 
    #
    kjb_setenv VIM_FOR_MAKE "vim ${VIM_WITHOUT_X} -n -i NONE -u NONE -U NONE" 
    kjb_setenv VIM_SCRIPT_OPERATOR ' -s '
    kjb_setenv VIM_IO_REDIRECTION  '< /dev/null >& /dev/null'
    kjb_setenv VIM_IO_REDIRECTION_2  '< /dev/null >& /dev/null'
endif

kjb_setenv MAKEDEPEND_OUTPUT  '>& /dev/null'


if ((${OS} == "linux_386") || (${OS} == "linux_x86_64")) then
    kjb_setenv ARCHIVE_OPTS "rsc"
else
    kjb_setenv ARCHIVE_OPTS "rc"
endif

kjb_setenv KJB_AR "ar ${ARCHIVE_OPTS}"

#
# Usually "ar" can do the ranlib bit already.
#
if (${OS} == "sun4") then 
    kjb_setenv KJB_RANLIB /bin/ranlib
else if (${OS} == "next") then 
    kjb_setenv KJB_RANLIB "/bin/ranlib -s" 
else if (${OS} == "mac_osx") then
    kjb_setenv KJB_RANLIB "/usr/bin/ranlib -s -no_warning_for_no_symbols"
else 
    kjb_setenv KJB_RANLIB "$KJB_MAKE_NO_OP"
endif


# ---------------------------------------------------------------------
#
# Locking tools. Under construction! It is not clear if we can get away with
# defining locking commands, or whether we need to embed the logic of different
# options in locking scripts. 
#
# Sync this code with that in kjb_lock!

if (`${MAKE_SCRIPT_PATH}can_execute flock`) then
    kjb_setenv KJB_LOCKING_METHOD "flock" 
else if ((`${MAKE_SCRIPT_PATH}can_execute lockfile-create`) && (`${MAKE_SCRIPT_PATH}can_execute lockfile-remove`)) then
    kjb_setenv KJB_LOCKING_METHOD "lockfile-progs" 
else
    kjb_setenv KJB_LOCKING_METHOD "fallback"
endif 

setenv KJB_LOCKFILE_PATH ${TMPDIR}/${USER}/lockfiles/

# ---------------------------------------------------------------------

#
# Sort out compilers. 
#

if ($?KJB_CC == 0) then
    kjb_setenv KJB_CC ""
endif

if ($?KJB_F77 == 0) then
    kjb_setenv KJB_F77 ""
endif

if ($?KJB_CXX == 0) then
    kjb_setenv KJB_CXX ""
endif

if ($?KJB_LD == 0) then
    kjb_setenv KJB_LD ""
endif

set user_paths = `echo $PATH | sed 's/:/ /g'`

# -------------------------- OLD CODE ARCHIVED  ----------------------------
#
# Logic for sun5 and hpux systems moved to init_compile_sun5_hpux_compilers.ARCHIVED 
#
# --------------------------------------------------------------------------

if ("${OS}" == "mac_osx") then
    set cc_choices = "icc clang gcc cc"
else 
    set cc_choices = "icc gcc cc"
endif

if ($?KJB_CC != 0) then
    set cc_choices = "${KJB_CC} ${cc_choices}" 
endif

set kjb_cc = ""

foreach cc_choice ( $cc_choices )
    set test_cc = 0

    foreach test_path ( ${user_paths} )
        if (-x $test_path/${cc_choice}) then
            set kjb_cc = "${cc_choice}"
            break 
        endif
    end

    if ("${kjb_cc}" != "") break
end 

if ("${kjb_cc}" == "") then
    ${ECHO} "No C compiler among (${cc_choices}) in PATH."
    ${ECHO} "PATH is set to: ${PATH}" 
    ${ECHO} "Setting KJB_CC to cc to reduce confusion."
    set kjb_cc = "cc"
else if ($?KJB_CC != 0) then
    if (("${kjb_cc}" != "${KJB_CC}") && ("${KJB_CC}" != "")) then
        ${P_STDERR} "Requested C compiler ${KJB_CC} not found in PATH."
        ${P_STDERR} "Using ${kjb_cc} instead."
    endif
endif

# Might be overwritten below. 
kjb_setenv KJB_CC ${kjb_cc} 

# -------------------------------------------------------------------------

if ("${OS}" == "mac_osx") then
    set c_plus_plus_choices = "icpc clang++ g++ c++ CC"
else 
    set c_plus_plus_choices = "icpc g++ c++ CC"
endif

if ($?KJB_CXX != 0) then
    set c_plus_plus_choices = "${KJB_CXX} ${c_plus_plus_choices}" 
endif

set kjb_c_plus_plus = ""

foreach c_plus_plus_choice ( $c_plus_plus_choices )
    set test_c_plus_plus = 0
    set test_paths = "${user_paths}"

    foreach test_path ( ${user_paths} )
        if (-x $test_path/${c_plus_plus_choice}) then
            set kjb_c_plus_plus = "${c_plus_plus_choice}"
            break 
        endif
    end

    if ("${kjb_c_plus_plus}" != "") break
end 

if ("${kjb_c_plus_plus}" == "") then
    ${P_STDERR} "No C++ compiler among (${c_plus_plus_choices}) in PATH."
    ${P_STDERR} "PATH is set to: ${PATH}" 
    ${P_STDERR} "Setting KJB_CC to c_plus_plus_not_found to reduce confusion."
    set kjb_c_plus_plus = "c_plus_plus_not_found"
else if ($?KJB_CXX != 0) then
    if (("${kjb_c_plus_plus}" != "${KJB_CXX}") && ("${KJB_CXX}" != "")) then
        ${P_STDERR} "Requested C++ compiler ${KJB_CXX} not found in PATH."
        ${P_STDERR} "Using ${kjb_c_plus_plus} instead."
    endif
endif

kjb_setenv KJB_CXX ${kjb_c_plus_plus} 

if ($?KJB_PREFER_CXX != 0) then
    if ("${KJB_PREFER_CXX}") then
        kjb_setenv KJB_CC "${KJB_CXX}"
    endif
endif

# -------------------------------------------------------------------------
 
if ("${OS}" == "mac_osx") then
    set f77_choices = "ifort clang gfortran g77 f77"
else 
    set f77_choices = "ifort gfortran g77 f77"
endif

if ($?KJB_F77 != 0) then
    set f77_choices = "${KJB_F77} ${f77_choices}" 
endif

set kjb_f77 = ""

set gfortran_load_dir = ""

foreach f77_choice ( $f77_choices )
    set test_f77 = 0

    foreach test_path ( ${user_paths} )
        if (-x $test_path/${f77_choice}) then
            set kjb_f77 = "${f77_choice}"
            break
        endif
     end
            
    if (("${f77_choice}" == "gfortran") || (("${OS}" == "mac_osx") && ("${f77_choice}" == "clang"))) then
        foreach test_path ( ${user_paths} )
            if (-x $test_path/gfortran) then
                set gfortran_bin = "$test_path/gfortran"
                
                if ("${OS}" == "mac_osx") then
                    set gfortran_load_dir = `${gfortran_bin} -print-file-name=libgfortran.dylib | sed 's/\/*libgfortran\.dylib$//g'`
                else 
                    set gfortran_load_dir = `${gfortran_bin} -print-file-name=libgfortran.so | sed 's/\/*libgfortran\.so$//g'`
                endif

                break 
            endif
        end
    endif

    if ("${kjb_f77}" != "") break
end 

if ("${kjb_f77}" == "") then
    ${P_STDERR} "No F77 compiler among (${f77_choices}) in PATH."
    ${P_STDERR} "PATH is set to: ${PATH}" 
    ${P_STDERR} "Setting KJB_F77 to f77 to reduce confusion."
    set kjb_f77 = "f77"
else if ($?KJB_F77 != 0) then
    if (("${kjb_f77}" != "${KJB_F77}") && ("${KJB_F77}" != "")) then
        ${P_STDERR} "Requested F77 compiler ${KJB_F77} not found in PATH."
        ${P_STDERR} "Using ${kjb_f77} instead."
    endif
endif

kjb_setenv KJB_F77 ${kjb_f77} 

set f77_legacy_flags = ""

if ("${KJB_F77}" == "gfortran") then
    set f77_legacy_flags = "-std=legacy"
else if ("${KJB_F77}" == "ifort") then
    set f77_legacy_flags = " "
endif

kjb_setenv F77_LEGACY_FLAGS "${f77_legacy_flags}" 

# ---------------------------------------------------------------------

# Note that the Makefiles sometimes we switch the linker to KJB_CXX. Right now,
# this occurs in Makefile-libs-needed.
#
if ("${KJB_LD}" == "") then
    kjb_setenv KJB_LD "${KJB_CC}"
endif

# ---------------------------------------------------------------------

if ($?KJB_VERBOSE) then
    echo ""
    echo "Choosing C       compiler: ${KJB_CC}"
    echo "Choosing C++     compiler: ${KJB_CXX}"
    echo "Choosing Fortran compiler: ${KJB_F77}"
    echo ""
endif

# ---------------------------------------------------------------------

# We define boolean variables for convenience in further expressions, that also
# deal with the case that we have set KJB_CC or KJB_CXX to something like
# g++-4.2. 

set kjb_cc_is_gcc = `echo ${KJB_CC} | grep -c '^gcc'`
set kjb_cc_is_gxx = `echo ${KJB_CC} | grep -c '^g++'`
set kjb_cxx_is_gxx = `echo ${KJB_CXX} | grep -c '^g++'`
set kjb_ld_is_gcc = `echo ${KJB_LD} | grep -c '^gcc'`
set kjb_ld_is_gxx = `echo ${KJB_LD} | grep -c '^g++'`

if ((${kjb_cc_is_gcc}) || (${kjb_cc_is_gxx})) then
    set kjb_cc_is_really_clang = `${KJB_CC} |& grep -c '[Cc]lang'`

    if (${kjb_cc_is_really_clang}) then
        ${ECHO} " "
        ${ECHO} "KJB_CC is set to gcc, but this is the clang version."
        ${ECHO} "Changing to clang to reduce confusion."
        ${ECHO} "This might break things. If so, fix init_compile"
        ${ECHO} " "

        kjb_setenv KJB_CC clang
        set kjb_cc_is_gcc = 0
        set kjb_cc_is_gxx = 0
    endif

    if ($?KJB_VERBOSE) then
        echo "$PATH"
        echo ""
        echo "Gnu/clang compiler version"
        ${KJB_CC} -v |& ${KJB_SED} 's/^/    /'
        echo ""
    endif
endif

if (${kjb_cxx_is_gxx}) then
    set kjb_cxx_is_really_clang = `${KJB_CXX} |& grep -c '[Cc]lang'`

    if (${kjb_cxx_is_really_clang}) then
        ${ECHO} " "
        ${ECHO} "KJB_CXX is set to g++, but this is the clang version."
        ${ECHO} "Changing to clang to reduce confusion."
        ${ECHO} "This might break things. If so, fix init_compile"
        ${ECHO} " "

        kjb_setenv KJB_CXX clang++
        set kjb_cxx_is_gxx = 0
    endif
endif



# ---------------------------------------------------------------------

if ($?INIT_COMPILE_SET_REAL) then 
     unsetenv REAL_OBJ_DIR
endif

# Root should not be trying to compile stuff on network drives. Also, if we
# mimicking (or doing) exported source we ensure that these two variables get the same values
# as would be the case for an external user (the defaults below).
#
if (("${USER}" != "root") && (! $?EXPORTED_SOURCE) && (! $?FORCE_STD_OBJ_DIR)) then 
    if (! $?REAL_OBJ_DIR) then 
        if ($?KJB_UA_HPC) then
            set src_is_network_drive = 1
        else
            pushd ${KJB_SRC_PATH} > /dev/null
            set src_is_network_drive = `df . | grep -c ' /net/'`
            popd > /dev/null
        endif

        # Current heuristic: if the src directory is a network drive, then try
        # to find a network drive for the object directories. 
        if ("${src_is_network_drive}") then
            set user_scratch_dir = "" 

            if ($?KJB_UA_HPC) then
                if (-d "/xdisk/${USER}") then
                    set test_user_scratch_dir = "/xdisk/${USER}/.kjb_obj"

                    ${KJB_MKDIR} "${test_user_scratch_dir}"
                    if (! ${status}) then
                        set user_scratch_dir = "${test_user_scratch_dir}"
                    endif
                endif
            else
                set scratch_places = "/scratch" 

                foreach scratch_place (${scratch_places})
                    if (-d "${scratch_place}") then 
                        set test_user_scratch_dir = "${scratch_place}/${USER}/.kjb_obj"
                        ${KJB_MKDIR} ${test_user_scratch_dir}
                        if (! ${status}) then
                            set user_scratch_dir = "${test_user_scratch_dir}"
                            break
                        endif
                    endif
                end
            endif

            if ("${user_scratch_dir}" != "") then
                kjb_setenv INIT_COMPILE_SET_REAL 1
                kjb_setenv REAL_OBJ_DIR "${user_scratch_dir}/"
                kjb_setenv REAL_MAKE_DOC_DIR "${user_scratch_dir}/"
            endif
        endif
    endif
endif

if (! $?REAL_OBJ_DIR) then 
    kjb_setenv INIT_COMPILE_SET_REAL 1
    kjb_setenv REAL_OBJ_DIR "./"
    kjb_setenv REAL_MAKE_DOC_DIR "./"
endif

################################################################################

# Now work on OBJ_DIR.

if (! $?NO_LIBS) then
    kjb_setenv NO_LIBS 0
endif

if (! $?NO_BOOST) then
    kjb_setenv NO_BOOST 0
endif

if ($?ALT_LIBS == 0) then
    kjb_setenv ALT_LIBS 0
endif


# We can suppress linking certain libraries, like a finer-grained NO_LIBS
#
# For example, if you want to force your executable NOT to link to libX11,
# regardless of whether libX11 is available, and regardless of whether the code
# would like to use X11, then do something like "setenv KJB_SUPPRESS_X11 1" in
# your environment before calling make.
#
# If you use any SUPPRESS variable, then you must also take responsibility to
# "make init_clean && make clean" every time you change one of these variables.

if ($?KJB_SUPPRESS_X11 == 0) then
    kjb_setenv KJB_SUPPRESS_X11 0
endif

if ($?KJB_SUPPRESS_OPENGL == 0) then
    kjb_setenv KJB_SUPPRESS_OPENGL 0
endif

if ($?KJB_SUPPRESS_GLUT == 0) then
    kjb_setenv KJB_SUPPRESS_GLUT 0
endif

if ($?KJB_SUPPRESS_CUDA == 0) then
    kjb_setenv KJB_SUPPRESS_CUDA 0
endif

if ($?KJB_SUPPRESS_OPENCL == 0) then
    kjb_setenv KJB_SUPPRESS_OPENCL 0
endif

if ($?KJB_SUPPRESS_CXX11 == 0) then
    kjb_setenv KJB_SUPPRESS_CXX11 0
endif

# Not currently used. 
kjb_setenv SINGLE_PRECISION 0 

if (! $?PRODUCTION) then
    if ($?EXPORTED_SOURCE) then
        kjb_setenv PRODUCTION 1
    else
        kjb_setenv PRODUCTION 0
    endif
endif
 
if ($?FORCE_CODE != 0) then
    kjb_setenv CODE "${FORCE_CODE}"
else if (${PRODUCTION}) then
    kjb_setenv CODE prod
else
    kjb_setenv CODE dev
endif


if ($?NO_LIBS != 0) then
    if (${NO_LIBS}) then
        kjb_setenv CODE "${CODE}_no_libs"
    endif
endif

if ($?NO_BOOST != 0) then
    if (${NO_BOOST}) then
        kjb_setenv CODE "${CODE}_no_boost"
    endif
endif

if ($?USE_OFFSCREEN_RENDERING == 0) then
    kjb_setenv USE_OFFSCREEN_RENDERING 0
endif
 
if ($?FORCE_OSMESA == 0) then
    setenv FORCE_OSMESA 0
endif

if ($?ALT_LIBS != 0) then
    if (${ALT_LIBS}) then
        kjb_setenv CODE "${CODE}_alt_libs"
    endif
endif

# More complex than needed because patching existing logic. 
set force_test = 0
set force_no_test = 0

if ($?FORCE_TEST) then 
    if ($FORCE_TEST) then
        set force_test = 1
    else
        set force_no_test = 1
    endif
endif

if (${force_no_test}) then
    kjb_setenv TEST ""

    if (! ${PRODUCTION}) then
        kjb_setenv CODE "${CODE}_no_test"
    endif
else if (${force_test}) then
    kjb_setenv TEST -DTEST

    if (${PRODUCTION}) then
        kjb_setenv CODE "${CODE}_test"
    endif
else if (${PRODUCTION}) then
    kjb_setenv TEST ""
else 
    kjb_setenv TEST -DTEST
endif

# End of patching existing logic.

#
# TEST generally implies TRACK_MEMORY (in l/l_sys_def.h). So this
# setting is only interesting if we are doing PRODUCTION.
#
if ( ! $?FORCE_TRACK_MEMORY) then 
    kjb_setenv FORCE_TRACK_MEMORY
endif

if (${FORCE_TRACK_MEMORY}) then
    kjb_setenv TRACK_MEMORY "-DTRACK_MEMORY_ALLOCATION"

    if (${PRODUCTION}) then
        kjb_setenv CODE "${CODE}_tma"
    endif
else
    kjb_setenv TRACK_MEMORY ""
endif

# More complex than needed because patching existing logic. 

set force_no_optimize = 0
set force_optimize = 0

if ($?FORCE_OPTIMIZE) then 
    if ($FORCE_OPTIMIZE) then
        set force_optimize = 1
    else
        set force_no_optimize = 1
    endif
endif

if (${force_no_optimize}) then
    if (${PRODUCTION} == 1) then
        kjb_setenv CODE "${CODE}_noopt"
    endif
else if (${force_optimize}) then
    if (${PRODUCTION} == 0) then
        kjb_setenv CODE "${CODE}_opt"
    endif
endif

set force_no_debug = 0
set force_debug = 0

if ($?FORCE_DEBUG) then 
    if ($FORCE_DEBUG) then
        set force_debug = 1
    else
        set force_no_debug = 1
    endif
endif

if (${force_debug}) then
    if (${PRODUCTION}) then
        kjb_setenv CODE "${CODE}_debug"
    endif
else if (${force_no_debug}) then
    if (${PRODUCTION} == 0) then
        kjb_setenv CODE "${CODE}_no_debug"
    endif
endif

# End patch of existing logic. 

set cxx_libs_versions = ""

if ("${BOOST_VERSION}" != "") then
    set cxx_libs_versions = "${cxx_libs_versions}_boost_${BOOST_VERSION}"
endif

if ($?FORCE_OBJ_DIR != 0) then
    if ("${FORCE_OBJ_DIR}" != "") then
        kjb_setenv OBJ_DIR "${FORCE_OBJ_DIR}"
        kjb_setenv CXX_OBJ_DIR "${FORCE_OBJ_DIR}"
        kjb_setenv F77_OBJ_DIR "${FORCE_OBJ_DIR}"
        kjb_setenv LD_OBJ_DIR "${FORCE_OBJ_DIR}"
        kjb_setenv EXEC_DIR "${FORCE_OBJ_DIR}"
    else
        ${P_STDERR} "If FORCE_OBJ_DIR is set, it must be reasonable directory string."
        exit 1
    endif

#     kjb_setenv GPU_OBJ_DIR "${OBJ_DIR}"
#     kjb_setenv GPU_F77_OBJ_DIR "${LD_OBJ_DIR}"
#     kjb_setenv GPU_CXX_OBJ_DIR "${CXX_OBJ_DIR}"
#     kjb_setenv GPU_LD_OBJ_DIR "${LD_OBJ_DIR}"
else 
    # The first sub-dir used to be "MACHINE", but we are experimenting with
    # linux box development dirs being more specific, but keeping MACHINE for
    # things like library search directories (with sub dirs for more specfic
    # instances). 
    kjb_setenv OBJ_DIR "${OS}${OS2}_${CPU}/${CODE}/${KJB_CC}/"
    kjb_setenv F77_OBJ_DIR "${OS}${OS2}_${CPU}/${CODE}/${KJB_F77}/"
    kjb_setenv CXX_OBJ_DIR "${OS}${OS2}_${CPU}/${CODE}/${KJB_CXX}${cxx_libs_versions}/"
    
    kjb_setenv LD_OBJ_TOP_DIR "${OS}${OS2}_${CPU}/${CODE}/"

    # No slashes at the end of this one. 
    kjb_setenv LD_OBJ_SUB_DIR "${KJB_CXX}${cxx_libs_versions}_${KJB_CC}"

    kjb_setenv LD_OBJ_DIR "${LD_OBJ_TOP_DIR}${LD_OBJ_SUB_DIR}/"

    kjb_setenv EXEC_LINK_NAME "exec"
    kjb_setenv EXEC_LINK "${OS}${OS2}_${CPU}/${CODE}/${EXEC_LINK_NAME}"

#     kjb_setenv GPU_OBJ_DIR "${MACHINE}${KJB_GPU_DIR}/${CODE}/${KJB_CC}/"
#     kjb_setenv GPU_F77_OBJ_DIR "${MACHINE}${KJB_GPU_DIR}/${CODE}/${KJB_F77}/"
#     kjb_setenv GPU_CXX_OBJ_DIR "${MACHINE}${KJB_GPU_DIR}/${CODE}/${KJB_CXX}/"
#     kjb_setenv GPU_LD_OBJ_DIR "${MACHINE}${KJB_GPU_DIR}/${CODE}/${KJB_CXX}${cxx_libs_versions}_${KJB_CC}/"

endif

set prefer_pch = 0

if ($?PREFER_PCH) then
    if (${PREFER_PCH}) then
        if ((($kjb_cc_is_gcc) || ($kjb_cc_is_gxx)) && ($kjb_cxx_is_gxx)) then
            set prefer_pch = ${PREFER_PCH}
        else 
            ${ECHO} "PCH preference is ignored because either cc is not gcc/g++ or c++ is not g++"
        endif
    endif
endif

if (${prefer_pch}) then
    kjb_setenv PCH_DIR "_PCH/${CXX_OBJ_DIR}"
    kjb_setenv PCH_SUFFIX ".gch"
else 
    kjb_setenv PCH_DIR ""
    kjb_setenv PCH_SUFFIX ""
endif


#
# Not currently very useful.
#
# Dynamic linking is generally a pain, but making static linking work in general
# can be even a bigger pain because the world has gone dynamic. Ideally, we could
# specify linking method on a per module basis, but this is not generally
# available. Hence we don't control static versus dynamic with flags. Instead,
# we hide the dynamic link version of those libraries where it is especially
# useful to have static linking (i.e., special purpose ones that are not
# generally available), and we don't want to (or can't) install them on every
# machine that we might want to run programs on. 
# 
# We retain the implemented control for experimentation on various machines.
#
if ( ! $?FORCE_STATIC) then 
    kjb_setenv FORCE_STATIC 0
endif


if ( ! $?FORCE_DYNAMIC) then 
    kjb_setenv FORCE_DYNAMIC 0
endif


if (${?VERBOSE_COMPILE} == 0) then
    kjb_setenv VERBOSE_COMPILE 0
endif

if ($VERBOSE_COMPILE == 1) then
    kjb_setenv CC_VERBOSE_FLAG "-#"
    kjb_setenv PP_VERBOSE_FLAG "-v"
else 
    kjb_setenv CC_VERBOSE_FLAG ""
    kjb_setenv PP_VERBOSE_FLAG ""
endif
   

if (${?ANSI_LEVEL} == 0) then
    kjb_setenv ANSI_LEVEL 0
endif

   
if (${?NO_MALLINFO} == 0) then
    kjb_setenv NO_MALLINFO 0
endif
   

if (${NO_MALLINFO}) then 
    kjb_setenv MALLINFO_DEFINE    "-DNO_MALLINFO"
else 
    kjb_setenv MALLINFO_DEFINE    ""
endif

################################################################################

if ( ! $?USE_SHARED_WARNINGS) then 
    kjb_setenv USE_SHARED_WARNINGS 0
endif

# These names are obsolete. If we wanted to do this, then consult Makefile-2.
# But we should not need to set them. Delete this soon. (And do init_ua_hpc
# also). 
#
# # The environment or the build script could have defined these. If not, make
# # them null strings.
# #
# if ($?EXTRA_CC_FLAGS == 0) then
#     kjb_setenv EXTRA_CC_FLAGS ""
# endif
# 
# if ($?EXTRA_CXX_FLAGS == 0) then
#     kjb_setenv EXTRA_CXX_FLAGS ""
# endif
# 
# if ($?EXTRA_LOAD_FLAGS == 0) then
#     kjb_setenv EXTRA_LOAD_FLAGS ""
# endif

# ---------------------------------------------------------------------

#
# C++ WARNING FILTER
#
# We filter the output of the g++ compiler.  The current reason to filter is
# to remove warning messages generated by Boost.  Boost is a C++ library that
# produces copious nuisance warning messages in GCC.
# By default we try to screen
# them, provided you have Perl, you are using g++, and you haven't opted out.
# Whereas if you opt out, if you are using another compiler, or if you lack
# Perl, then the filter is implemented in AWK and passes everything.
# The opt-out logic is not here, it's embedded in the KJB_WARN_LEVEL tests.
#
# To opt out (i.e., to show everything), set KJB_WARN_LEVEL to 4 or higher.

kjb_setenv KJB_CPP_DEFAULT_MSG_FILTER "${MAKE_SCRIPT_PATH}boost_warn_filter.pl"

# Set up the allpass filter, which lets all the Boost messages show up.
set kjb_awk = `which awk`
if (-x ${kjb_awk}) then
    kjb_setenv KJB_CPP_ALLPASS_MSG_FILTER \
            "${kjb_awk} "'"{print}/Compile status is: [^0]/{exit 1}"'
else
    # This system lacks basic cmds, so sabotage the output filter.
    ${ECHO} "Warning: system lacks awk(1), which we currently require."
    ${ECHO} "Warning: maybe you could write a script to take its place?"
    kjb_setenv KJB_CPP_ALLPASS_MSG_FILTER "false"
endif

# Do we have Perl?
# If there are questions about "why use env(1) here?" please ask Andrew P.
set kjb_perl_test = "/usr/bin/env perl --version"

${kjb_perl_test} >& /dev/null

if (${status}) then
    # Perl does not work, so change the default to no filter.
    kjb_setenv KJB_CPP_DEFAULT_MSG_FILTER "${KJB_CPP_ALLPASS_MSG_FILTER}"
else if (! ${kjb_cxx_is_gxx}) then
    # Filter cannot help, because it only understands g++ warning messages.
    kjb_setenv KJB_CPP_DEFAULT_MSG_FILTER "${KJB_CPP_ALLPASS_MSG_FILTER}"
else if (! -x ${KJB_CPP_DEFAULT_MSG_FILTER}) then
    # The filter program is missing!?  Weird.  Oh well, don't bother.
    ${ECHO} "Warning: missing filter script ${KJB_CPP_DEFAULT_MSG_FILTER}"
    kjb_setenv KJB_CPP_DEFAULT_MSG_FILTER "${KJB_CPP_ALLPASS_MSG_FILTER}"
endif

# ---------------------------------------------------------------------

# TODO, FIXME, CHECK --- c++11 is not so good with clang++. Currently we are
# letting compilers choose (should we be?).
#
if (! $?KJB_PREFER_CXX11) then
    if ("${KJB_CXX}" == "g++") then
        setenv KJB_PREFER_CXX11
    endif 
endif

if ($?KJB_PREFER_CXX11) then
    set cxx11_flags = ""
    foreach flag (c++11 c++0x) 
        # test for: lambdas, automatic type inference, and rvalue references
        set code = "int main(){[](){}; int y; int&& x = 1; auto z = 1;}"
        echo "$code" | ${KJB_CXX} -x c++ -c -std=${flag} -o /dev/null - >& /dev/null
        if (! $status) then
            set cxx11_flags = "-std=${flag} -DKJB_HAVE_CXX11"
            break
        endif
    end
    kjb_setenv KJB_CXX11_FLAGS  "$cxx11_flags"
else
    kjb_setenv KJB_CXX11_FLAGS  ""
endif

# ---------------------------------------------------------------------

### KJB_CPP ###

if ("${OS}" == "mac_osx") then 
    # 
    # On some macs, cpp is really broken.  Even specifying include directories
    # does not seem to work.  I am not sure what is going on. Anyway, if "gcc
    # -E" works, it is much more robust. 
    #
    if (("${KJB_CC}" == "gcc") || ("${KJB_CC}" == "g++"))  then
        kjb_setenv KJB_CPP              "gcc -E" 
    else
        #
        # cpp on the mac does not seem to respect nostdinc, and on some versions
        # the standard includes need to have __STDC__ defined. 
        #
        kjb_setenv KJB_CPP              "cpp -D__STDC__" 
    endif
else 
    kjb_setenv KJB_CPP              "cpp" 
endif

# ---------------------------------------------------------------------

# Experiment with handling this in scripts/finish_executable
#
# kjb_setenv KJB_RM_OBJ_DIR_LINK "${KJB_RM} "
# 
# if ((! ${KJB_ENVIRONMENT} ) && ("${OBJ_DIR}" != "") && ("${OBJ_DIR}" != "./")) then
#     kjb_setenv KJB_LINK_EXECUTABLE "${KJB_LN} "
# else
#     kjb_setenv KJB_LINK_EXECUTABLE "${MAKE_SCRIPT_PATH}link_executable "
# endif

# ---------------------------------------------------------------------

# Do NOT make MAKE_DOC_DIR null. You can overwrite your code !!!
# (We now check for that, though). 
kjb_setenv MAKE_DOC make_doc
kjb_setenv MAKE_DOC_DIR ${MAKE_DOC}/

##############################################################################

kjb_setenv INCLUDE_FLAG "-I"

#
# Include "after" means that we try to include the files only after all
# other possibilities have been exhausted. Further, if we use the gcc
# facility for this, it will treat these include dirs as system includes,
# forcing them to be last, AND suppressing warnings from them. If other
# compilers have the same concept, then we would handle that case also,
# possibly working it into a more general scheme. 
#
set force_no_after = 0

if ($?FORCE_NO_AFTER) then
    if ($FORCE_NO_AFTER) then
        set force_no_after = 1
    endif
endif

if (${force_no_after}) then
    kjb_setenv INCLUDE_AFTER_FLAG "${INCLUDE_FLAG}" 
    set have_dir_after = 0
else if (((${kjb_cc_is_gcc}) || (${kjb_cc_is_gxx})) && (${kjb_cxx_is_gxx})) then
    kjb_setenv INCLUDE_AFTER_FLAG "-idirafter " 
    set have_dir_after = 1
else if ((${OS} == "mac_osx") && (("${KJB_CC}" == "clang") || ("${KJB_CXX}" == "clang++"))) then 
    kjb_setenv INCLUDE_AFTER_FLAG "-idirafter " 
    set have_dir_after = 1
else if (("${KJB_CC}" == "icc") || ("${KJB_CXX}" == "icc")) then 
    kjb_setenv INCLUDE_AFTER_FLAG "-idirafter " 
    set have_dir_after = 1
else 
    kjb_setenv INCLUDE_AFTER_FLAG "${INCLUDE_FLAG}" 
    set have_dir_after = 0
endif

#
# Even if the compiler has a flag for "after", other tools might now. For
# example, makedepend and c2man might break if we use it, even if they have
# access to the same pre-processor as the compiler. So we need to construct a
# parallel version of including after that is guaranteed to work in generic
# cases. 
#
kjb_setenv GENERIC_INC_AFT_FLAG "${INCLUDE_FLAG}"

################################################################################

kjb_setenv ANSI_COMPILER 1

# 
# ------------------------------------------------------------------------------
#
#  g++
#

if (${kjb_cxx_is_gxx}) then
    set test_gxx = "${KJB_CXX}"
else
    set test_gxx = "g++"
endif

# The only difference between getting the version of g++ and gcc is the
# 'g++ -v'. If g++ is present, it is part of gcc. However, the version of gcc
# and the version of gcc used for  g++ could be different. 
# 
set gxx_version_str = `${test_gxx} -v |& grep "gcc version" |& sed 's/gcc version \([0-9.]*\).*/\1/'` 

if (${status}) then
    kjb_setenv GPP_VERSION 0
    kjb_setenv GPP_MAJOR_RELEASE 0
    kjb_setenv GPP_MINOR_RELEASE 0
else
    kjb_setenv GPP_VERSION `echo ${gxx_version_str} | sed "s/\([0-9]*\)\..*/\1/"`
    kjb_setenv GPP_MAJOR_RELEASE `echo ${gxx_version_str} | sed "s/[0-9]*\.\([0-9]*\)\..*/\1/"`
    kjb_setenv GPP_MINOR_RELEASE `echo ${gxx_version_str} | sed "s/[0-9]*\.[0-9]*\.\([0-9]*\)/\1/"`
endif

if ($?KJB_VERBOSE) then
    echo GPP_VERSION: $GPP_VERSION
    echo GPP_MAJOR_RELEASE: $GPP_MAJOR_RELEASE
    echo GPP_MINOR_RELEASE: $GPP_MINOR_RELEASE
endif

set gpp_ansi_flag =  ""
set gpp_force_single =  "-DDOUBLE_IS_FLOAT"
set gpp_heavy_opt =  "-O3"
set gpp_optimization =  "-O2"


set gpp_kjb_warn_0 = "-w"
set gpp_kjb_warn_1 = "-Wall"

if (${force_optimize}) then
    set gpp_kjb_warn_1 = "${gpp_kjb_warn_1}  -Wuninitialized" 
else if ( ( ! (${force_no_optimize})) && ($PRODUCTION)) then
    set gpp_kjb_warn_1 = "${gpp_kjb_warn_1}  -Wuninitialized" 
endif

set gpp_kjb_warn_2 = "${gpp_kjb_warn_1}  -Wpointer-arith -Wcast-qual -Wcast-align -W -Wwrite-strings -Wswitch-default -Wswitch-enum" 
set gpp_kjb_warn_3 = "${gpp_kjb_warn_2}"
set gpp_kjb_warn_4 = "${gpp_kjb_warn_3}"
set gpp_kjb_warn_5 = "-Werror ${gpp_kjb_warn_4}"

set gpp_md_flags =  ""
set gpp_misc_flags =  "${gpp_ansi_flag} ${KJB_CXX11_FLAGS} -fmessage-length=0 -no-integrated-cpp"
set gpp_thread_flags =  "-pthread"

set gpp_shared_flags =  "-fPIC" 

set gpp_compiler_includes = `echo | g++ -E -Wp,-v - |& grep '^ */'` 
# 
# ------------------------------------------------------------------------------
#
#  gcc
#

if ((${kjb_cc_is_gcc}) || (${kjb_cc_is_gxx})) then
    set test_gcc = "${KJB_CC}"
else
    set test_gcc = "gcc"
endif

# The only difference between getting the version of gcc and g++ is the
# 'gcc -v'. If g++ is present, it is part of gcc. However, the version of gcc
# and the verionf of gcc used for  g++ could be different. 
#
set gcc_version_str = `${test_gcc} -v |& grep "gcc version" |& sed 's/gcc version \([0-9.]*\).*/\1/'` 

if (${status}) then
    kjb_setenv GCC_VERSION 0
    kjb_setenv GCC_MAJOR_RELEASE 0
    kjb_setenv GCC_MINOR_RELEASE 0
else
    kjb_setenv GCC_VERSION `echo ${gcc_version_str} | sed "s/\([0-9]*\)\..*/\1/"`
    kjb_setenv GCC_MAJOR_RELEASE `echo ${gcc_version_str} | sed "s/[0-9]*\.\([0-9]*\)\..*/\1/"`
    kjb_setenv GCC_MINOR_RELEASE `echo ${gcc_version_str} | sed "s/[0-9]*\.[0-9]*\.\([0-9]*\)/\1/"`
endif

if ($?KJB_VERBOSE) then
    echo GCC_VERSION: $GCC_VERSION
    echo GCC_MAJOR_RELEASE: $GCC_MAJOR_RELEASE
    echo GCC_MINOR_RELEASE: $GCC_MINOR_RELEASE
endif

# The flag "-std-c89: is equivalent to -ansi, but in a form that a second
# directive in the compile line can override it. Contrary to what one might
# expect, only code that is incompatible with the standard is rejected. The
# "-pedantic" flag asks gcc to give warnings about extensions.
#
set gcc_c89_flags =  "-std=c89 -pedantic"
set gcc_c99_flags =  "-std=c99 -pedantic"
set gcc_force_single =  "-DDOUBLE_IS_FLOAT"
set gcc_heavy_opt =  "-O3"

#
# To come soon, now in beta: -ftree-vectorize  -fdump-tree-vect-stats 
# (And on MAC, need -maltivec). However, it is not clear when altivec is
# appropriate? 
#
if (${MACHINE} == "mac_osx_ppc") then
    set gcc_optimization =  "-O2 -maltivec"
else
    set gcc_optimization =  -O2
endif


set gcc_kjb_warn_0 = "-w"
set gcc_kjb_warn_1 = "-Wall"

if (${force_optimize}) then
    set gcc_kjb_warn_1 = "${gcc_kjb_warn_1}  -Wuninitialized" 
else if ( ( ! (${force_no_optimize})) && ($PRODUCTION)) then
    set gcc_kjb_warn_1 = "${gcc_kjb_warn_1}  -Wuninitialized" 
endif

set gcc_kjb_warn_2 = "${gcc_kjb_warn_1} -Wmissing-prototypes -Wpointer-arith -Wcast-qual -Wcast-align -Wmissing-declarations -Wbad-function-cast -W  -Wwrite-strings" 
set gcc_kjb_warn_3 = "${gcc_kjb_warn_2}"
set gcc_kjb_warn_4 = "${gcc_kjb_warn_3}"
set gcc_kjb_warn_5 = "-Werror ${gcc_kjb_warn_4}"

if ("${EMULATE_WIN32}") then
    set gcc_md_flags =  "-D_WIN32 -nostdinc -nostdinc++ ${WIN32_INCLUDE}"
else
    set gcc_md_flags =  ""
endif

set gcc_thread_flags =  "-pthread"
set gcc_shared_flags =  "-fPIC" 

set gcc_compiler_includes = `echo | gcc -E -Wp,-v - |& grep '^ */'` 

# 
# ------------------------------------------------------------------------------
#
#  icpc
#
set ICPC_ANSI_FLAG =  ""
set icpc_force_single =  ""
set icpc_heavy_opt =  "-O2"
set icpc_optimization =  "-O2"
set icpc_kjb_warn_0 =  ""
set icpc_kjb_warn_1 =  ""
set icpc_kjb_warn_2 =  ""
set icpc_kjb_warn_3 =  ""
set icpc_kjb_warn_4 =  ""
set icpc_kjb_warn_5 =  ""
set icpc_md_flags =  ""
set icpc_c89_flags =  ""
set icpc_c99_flags =  ""
set icpc_thread_flags =  ""

# Fill in later. 
set icpc_shared_flags =  "" 

# icc is an integrated compiler.
#
set icpc_cxx_md_flags =  "" 
set icpc_cxx_misc_flags =  "${KJB_CXX11_FLAGS}" 

set icpc_f77_md_flags =  "" 
set icpc_f77_misc_flags =  "" 

# FIXME 
set icpc_compiler_includes = "/usr/include"
# 
# ------------------------------------------------------------------------------
#
#  icc
#
set ICC_ANSI_FLAG =  ""
set icc_force_single =  ""
set icc_heavy_opt =  "-O2"
set icc_optimization =  "-O2"
set icc_kjb_warn_0 =  ""
set icc_kjb_warn_1 =  ""
set icc_kjb_warn_2 =  ""
set icc_kjb_warn_3 =  ""
set icc_kjb_warn_4 =  ""
set icc_kjb_warn_5 =  ""
set icc_md_flags =  ""
set icc_c89_flags =  ""
set icc_c99_flags =  ""
set icc_thread_flags =  ""

# Fill in later. 
set icc_shared_flags =  "" 

# icc is an integrated compiler.
#
set icc_cxx_md_flags =  "" 
set icc_cxx_misc_flags =  "" 

set icc_f77_md_flags =  "" 
set icc_f77_misc_flags =  "" 

# FIXME 
set icc_compiler_includes = "/usr/include"
# 
# ------------------------------------------------------------------------------
#

setenv PREFERRED_STD "C89"

if ("${KJB_CC}" == "clang++") then 
    kjb_setenv COMPILER_DEFINE -DCLANG_COMPILER 
    kjb_setenv CC_FORCE_SINGLE  "${gpp_force_single}"
    kjb_setenv CC_HEAVY_OPT  "${gpp_heavy_opt}"
    kjb_setenv CC_OPTIMIZATION  "${gpp_optimization}"
    kjb_setenv CC_KJB_WARN_0 "${gpp_kjb_warn_0}"
    kjb_setenv CC_KJB_WARN_1 "${gpp_kjb_warn_1}"
    kjb_setenv CC_KJB_WARN_2 "${gpp_kjb_warn_2}"
    kjb_setenv CC_KJB_WARN_3 "${gpp_kjb_warn_3}"
    kjb_setenv CC_KJB_WARN_4 "${gpp_kjb_warn_4}"
    kjb_setenv CC_KJB_WARN_5 "${gpp_kjb_warn_5}"
    kjb_setenv CC_MD_FLAGS "${gpp_md_flags}"
    
    # If the compiler is specified to be C++, then the C standard is probably (hopefully) ignored? 
    kjb_setenv CC_C89_FLAGS ""
    kjb_setenv CC_C99_FLAGS ""

    kjb_setenv CC_THREAD_FLAGS "${gpp_thread_flags}"
    kjb_setenv CC_SHARED_FLAGS "${gpp_shared_flags}" 
    kjb_setenv CC_PCH_SUFFIX ".gch" 
    kjb_setenv CC_COMPILER_INCLUDES "${gpp_compiler_includes}" 
else if ("${KJB_CC}" == "clang") then
    kjb_setenv COMPILER_DEFINE -DCLANG_COMPILER 
    kjb_setenv CC_FORCE_SINGLE  "${gcc_force_single}"
    kjb_setenv CC_HEAVY_OPT  "${gcc_heavy_opt}"
    kjb_setenv CC_OPTIMIZATION  "${gcc_optimization}"
    kjb_setenv CC_KJB_WARN_0 "${gcc_kjb_warn_0}"
    kjb_setenv CC_KJB_WARN_1 "${gcc_kjb_warn_1}"
    kjb_setenv CC_KJB_WARN_2 "${gcc_kjb_warn_2}"
    kjb_setenv CC_KJB_WARN_3 "${gcc_kjb_warn_3}"
    kjb_setenv CC_KJB_WARN_4 "${gcc_kjb_warn_4}"
    kjb_setenv CC_KJB_WARN_5 "${gcc_kjb_warn_5}"
    kjb_setenv CC_MD_FLAGS "${gcc_md_flags}"
    kjb_setenv CC_C89_FLAGS "${gcc_c89_flags} -DUSING_C89"
    kjb_setenv CC_C99_FLAGS "${gcc_c99_flags} -DUSING_C99"
    kjb_setenv CC_THREAD_FLAGS "${gcc_thread_flags}"
    kjb_setenv CC_SHARED_FLAGS "${gcc_shared_flags}" 
    kjb_setenv CC_PCH_SUFFIX ".gch" 
    kjb_setenv CC_COMPILER_INCLUDES "${gcc_compiler_includes}" 
    
    # For clang on mac, the header files are prejorative to c99.
    setenv PREFERRED_STD "C99"
else if (${kjb_cc_is_gxx})  then
    kjb_setenv COMPILER_DEFINE -DGNU_COMPILER 
    kjb_setenv CC_FORCE_SINGLE  "${gpp_force_single}"
    kjb_setenv CC_HEAVY_OPT  "${gpp_heavy_opt}"
    kjb_setenv CC_OPTIMIZATION  "${gpp_optimization}"
    kjb_setenv CC_KJB_WARN_0 "${gpp_kjb_warn_0}"
    kjb_setenv CC_KJB_WARN_1 "${gpp_kjb_warn_1}"
    kjb_setenv CC_KJB_WARN_2 "${gpp_kjb_warn_2}"
    kjb_setenv CC_KJB_WARN_3 "${gpp_kjb_warn_3}"
    kjb_setenv CC_KJB_WARN_4 "${gpp_kjb_warn_4}"
    kjb_setenv CC_KJB_WARN_5 "${gpp_kjb_warn_5}"
    kjb_setenv CC_MD_FLAGS "${gpp_md_flags}"

    # If the compiler is specified to be C++, then the C standard is probably (hopefully) ignored? 
    kjb_setenv CC_C89_FLAGS ""
    kjb_setenv CC_C99_FLAGS ""

    kjb_setenv CC_THREAD_FLAGS "${gpp_thread_flags}"
    kjb_setenv CC_SHARED_FLAGS "${gpp_shared_flags}" 
    kjb_setenv CC_PCH_SUFFIX ".gch" 
    kjb_setenv CC_COMPILER_INCLUDES "${gpp_compiler_includes}" 
else if (${kjb_cc_is_gcc}) then
    kjb_setenv COMPILER_DEFINE -DGNU_COMPILER 
    kjb_setenv CC_FORCE_SINGLE  "${gcc_force_single}"
    kjb_setenv CC_HEAVY_OPT  "${gcc_heavy_opt}"
    kjb_setenv CC_OPTIMIZATION  "${gcc_optimization}"
    kjb_setenv CC_KJB_WARN_0 "${gcc_kjb_warn_0}"
    kjb_setenv CC_KJB_WARN_1 "${gcc_kjb_warn_1}"
    kjb_setenv CC_KJB_WARN_2 "${gcc_kjb_warn_2}"
    kjb_setenv CC_KJB_WARN_3 "${gcc_kjb_warn_3}"
    kjb_setenv CC_KJB_WARN_4 "${gcc_kjb_warn_4}"
    kjb_setenv CC_KJB_WARN_5 "${gcc_kjb_warn_5}"
    kjb_setenv CC_MD_FLAGS "${gcc_md_flags}"
    kjb_setenv CC_C89_FLAGS "${gcc_c89_flags} -DUSING_C89"
    kjb_setenv CC_C99_FLAGS "${gcc_c99_flags} -DUSING_C99"
    kjb_setenv CC_THREAD_FLAGS "${gcc_thread_flags}"
    kjb_setenv CC_SHARED_FLAGS "${gcc_shared_flags}" 
    kjb_setenv CC_PCH_SUFFIX ".gch" 
    kjb_setenv CC_COMPILER_INCLUDES "${gcc_compiler_includes}" 
else if ("${KJB_CC}" == "icpc") then
    kjb_setenv COMPILER_DEFINE -DINTEL_COMPILER 
    kjb_setenv CC_FORCE_SINGLE  "${icpc_force_single}"
    kjb_setenv CC_HEAVY_OPT  "${icpc_heavy_opt}"
    kjb_setenv CC_OPTIMIZATION  "${icpc_optimization}"
    kjb_setenv CC_KJB_WARN_0 "${icpc_kjb_warn_0}"
    kjb_setenv CC_KJB_WARN_1 "${icpc_kjb_warn_1}"
    kjb_setenv CC_KJB_WARN_2 "${icpc_kjb_warn_2}"
    kjb_setenv CC_KJB_WARN_3 "${icpc_kjb_warn_3}"
    kjb_setenv CC_KJB_WARN_4 "${icpc_kjb_warn_4}"
    kjb_setenv CC_KJB_WARN_5 "${icpc_kjb_warn_5}"
    kjb_setenv CC_MD_FLAGS "${icpc_md_flags}"

    # This is a C++ compiler, so hopefully empty C standard is the right answer.
    kjb_setenv CC_C89_FLAGS ""
    kjb_setenv CC_C99_FLAGS ""

    kjb_setenv CC_THREAD_FLAGS "${icpc_thread_flags}"
    kjb_setenv CC_SHARED_FLAGS "${icpc_shared_flags}" 
    kjb_setenv CC_PCH_SUFFIX "" 
    kjb_setenv CC_COMPILER_INCLUDES "${icpc_compiler_includes}" 
else if ("${KJB_CC}" == "icc") then
    kjb_setenv COMPILER_DEFINE -DINTEL_COMPILER 
    kjb_setenv CC_FORCE_SINGLE  "${icc_force_single}"
    kjb_setenv CC_HEAVY_OPT  "${icc_heavy_opt}"
    kjb_setenv CC_OPTIMIZATION  "${icc_optimization}"
    kjb_setenv CC_KJB_WARN_0 "${icc_kjb_warn_0}"
    kjb_setenv CC_KJB_WARN_1 "${icc_kjb_warn_1}"
    kjb_setenv CC_KJB_WARN_2 "${icc_kjb_warn_2}"
    kjb_setenv CC_KJB_WARN_3 "${icc_kjb_warn_3}"
    kjb_setenv CC_KJB_WARN_4 "${icc_kjb_warn_4}"
    kjb_setenv CC_KJB_WARN_5 "${icc_kjb_warn_5}"
    kjb_setenv CC_MD_FLAGS "${icc_md_flags}"
    kjb_setenv CC_C89_FLAGS "${icc_c89_flags}"
    kjb_setenv CC_C99_FLAGS "${icc_c99_flags}"
    kjb_setenv CC_THREAD_FLAGS "${icc_thread_flags}"
    kjb_setenv CC_SHARED_FLAGS "${icc_shared_flags}" 
    # 
    # TODO: Look up the flags for icc.  
    kjb_setenv CC_PCH_SUFFIX "FIXME" 
    kjb_setenv CC_COMPILER_INCLUDES "${icc_compiler_includes}" 
else 
    kjb_setenv COMPILER_DEFINE -DUNKNOWN_COMPILER 
    kjb_setenv CC_FORCE_SINGLE  ""
    kjb_setenv CC_HEAVY_OPT  ""
    kjb_setenv CC_OPTIMIZATION  ""
    kjb_setenv CC_KJB_WARN_0 ""
    kjb_setenv CC_KJB_WARN_1 ""
    kjb_setenv CC_KJB_WARN_2 ""
    kjb_setenv CC_KJB_WARN_3 ""
    kjb_setenv CC_KJB_WARN_4 ""
    kjb_setenv CC_KJB_WARN_5 ""
    kjb_setenv CC_MD_FLAGS ""
    kjb_setenv CC_C89_FLAGS ""
    kjb_setenv CC_C99_FLAGS ""
    kjb_setenv CC_THREAD_FLAGS ""
    kjb_setenv CC_SHARED_FLAGS "" 
    kjb_setenv CC_PCH_SUFFIX "" 
    kjb_setenv CC_COMPILER_INCLUDES "/usr/include" 
endif

################################################################################

if (("${KJB_CXX}" == "clang++") || ("${KJB_CXX}" == "clang")) then 
    kjb_setenv COMPILER_DEFINE -DCLANG_COMPILER 
    kjb_setenv CXX_FORCE_SINGLE  "${gpp_force_single}"
    kjb_setenv CXX_HEAVY_OPT  "${gpp_heavy_opt}"
    kjb_setenv CXX_OPTIMIZATION  "${gpp_optimization}"
    kjb_setenv CXX_KJB_WARN_0 "${gpp_kjb_warn_0}"
    kjb_setenv CXX_KJB_WARN_1 "${gpp_kjb_warn_1}"
    kjb_setenv CXX_KJB_WARN_2 "${gpp_kjb_warn_2}"
    kjb_setenv CXX_KJB_WARN_3 "${gpp_kjb_warn_3}"
    kjb_setenv CXX_KJB_WARN_4 "${gpp_kjb_warn_4}"
    kjb_setenv CXX_KJB_WARN_5 "${gpp_kjb_warn_5}"
    kjb_setenv CXX_MD_FLAGS "${gpp_md_flags}"
    #
    # When we added the namespace stuff, we ran into mysterious compile problems
    # that were absent when the preprocessed code was used. Hence we have an
    # interaction with the g++ integrated preprocessor. It is not clear if there
    # is a better way to structure the C include files to fix this. As a work
    # around, we will just use the standard preprocessor. 
    #
    kjb_setenv CXX_MISC_FLAGS "${gpp_misc_flags}"
    kjb_setenv CXX_THREAD_FLAGS "${gpp_thread_flags}"
    kjb_setenv CXX_SHARED_FLAGS "${gpp_shared_flags}" 
    kjb_setenv CXX_COMPILER_INCLUDES "${gpp_compiler_includes}" 
else if (${kjb_cxx_is_gxx}) then
    kjb_setenv COMPILER_DEFINE -DGNU_COMPILER 
    kjb_setenv CXX_FORCE_SINGLE  "${gpp_force_single}"
    kjb_setenv CXX_HEAVY_OPT  "${gpp_heavy_opt}"
    kjb_setenv CXX_OPTIMIZATION  "${gpp_optimization}"
    kjb_setenv CXX_KJB_WARN_0 "${gpp_kjb_warn_0}"
    kjb_setenv CXX_KJB_WARN_1 "${gpp_kjb_warn_1}"
    kjb_setenv CXX_KJB_WARN_2 "${gpp_kjb_warn_2}"
    kjb_setenv CXX_KJB_WARN_3 "${gpp_kjb_warn_3}"
    kjb_setenv CXX_KJB_WARN_4 "${gpp_kjb_warn_4}"
    kjb_setenv CXX_KJB_WARN_5 "${gpp_kjb_warn_5}"
    kjb_setenv CXX_MD_FLAGS "${gpp_md_flags}"
    #
    # When we added the namespace stuff, we ran into mysterious compile problems
    # that were absent when the preprocessed code was used. Hence we have an
    # interaction with the g++ integrated preprocessor. It is not clear if there
    # is a better way to structure the C include files to fix this. As a work
    # around, we will just use the standard preprocessor. 
    #
    kjb_setenv CXX_MISC_FLAGS "${gpp_misc_flags}"
    kjb_setenv CXX_THREAD_FLAGS "${gpp_thread_flags}"
    kjb_setenv CXX_SHARED_FLAGS "${gpp_shared_flags}" 
    kjb_setenv CXX_COMPILER_INCLUDES "${gpp_compiler_includes}" 
else if (("$KJB_CXX" == "icpc") || ("$KJB_CXX" == "icc")) then
    kjb_setenv COMPILER_DEFINE -DINTEL_COMPILER 
    kjb_setenv CXX_FORCE_SINGLE  "${icpc_force_single}"
    kjb_setenv CXX_HEAVY_OPT  "${icpc_heavy_opt}"
    kjb_setenv CXX_OPTIMIZATION  "${icpc_optimization}"
    kjb_setenv CXX_KJB_WARN_0 "${icpc_kjb_warn_0}"
    kjb_setenv CXX_KJB_WARN_1 "${icpc_kjb_warn_1}"
    kjb_setenv CXX_KJB_WARN_2 "${icpc_kjb_warn_2}"
    kjb_setenv CXX_KJB_WARN_3 "${icpc_kjb_warn_3}"
    kjb_setenv CXX_KJB_WARN_4 "${icpc_kjb_warn_4}"
    kjb_setenv CXX_KJB_WARN_5 "${icpc_kjb_warn_5}"
    kjb_setenv CXX_MD_FLAGS "${icpc_cxx_md_flags}"
    kjb_setenv CXX_MISC_FLAGS "${icpc_cxx_misc_flags}"
    kjb_setenv CXX_THREAD_FLAGS "${icpc_thread_flags}"
    kjb_setenv CXX_SHARED_FLAGS "${icpc_shared_flags}" 
    kjb_setenv CXX_COMPILER_INCLUDES "${icpc_compiler_includes}" 
else 
    kjb_setenv COMPILER_DEFINE -DUNKNOWN_COMPILER 
    kjb_setenv CXX_FORCE_SINGLE  ""
    kjb_setenv CXX_HEAVY_OPT  ""
    kjb_setenv CXX_OPTIMIZATION  ""
    kjb_setenv CXX_KJB_WARN_0 ""
    kjb_setenv CXX_KJB_WARN_1 ""
    kjb_setenv CXX_KJB_WARN_2 ""
    kjb_setenv CXX_KJB_WARN_3 ""
    kjb_setenv CXX_KJB_WARN_4 ""
    kjb_setenv CXX_KJB_WARN_5 ""
    kjb_setenv CXX_MD_FLAGS ""
    kjb_setenv CXX_MISC_FLAGS ""
    kjb_setenv CXX_THREAD_FLAGS ""
    kjb_setenv CXX_SHARED_FLAGS ""
    kjb_setenv CXX_COMPILER_INCLUDES "/usr/include" 
endif

################################################################################

if ("${KJB_F77}" == "clang") then
    kjb_setenv COMPILER_DEFINE -DCLANG_COMPILER 
    kjb_setenv F77_FORCE_SINGLE  "${gcc_heavy_opt}"
    kjb_setenv F77_HEAVY_OPT  "${gcc_heavy_opt}"
    kjb_setenv F77_OPTIMIZATION  "${gcc_optimization}"
    kjb_setenv F77_KJB_WARN_0 "${gcc_kjb_warn_0}"
    kjb_setenv F77_KJB_WARN_1 "${gcc_kjb_warn_1}"
    kjb_setenv F77_KJB_WARN_2 "${gcc_kjb_warn_2}"
    kjb_setenv F77_KJB_WARN_3 "${gcc_kjb_warn_3}"
    kjb_setenv F77_KJB_WARN_4 "${gcc_kjb_warn_4}"
    kjb_setenv F77_KJB_WARN_5 "${gcc_kjb_warn_5}"
    kjb_setenv F77_MD_FLAGS "${gcc_md_flags}"
    kjb_setenv F77_MISC_FLAGS ""
    kjb_setenv F77_THREAD_FLAGS "${gcc_thread_flags}"
    kjb_setenv F77_SHARED_FLAGS "${gcc_shared_flags}"
    kjb_setenv F77_COMPILER_INCLUDES "${gcc_compiler_includes}" 
else if (("${KJB_F77}" == "gfortran") || ("${KJB_F77}" == "g77")) then
    kjb_setenv COMPILER_DEFINE -DGNU_COMPILER 
    kjb_setenv F77_FORCE_SINGLE  "${gcc_heavy_opt}"
    kjb_setenv F77_HEAVY_OPT  "${gcc_heavy_opt}"
    kjb_setenv F77_OPTIMIZATION  "${gcc_optimization}"
    kjb_setenv F77_KJB_WARN_0 "${gcc_kjb_warn_0}"
    kjb_setenv F77_KJB_WARN_1 "${gcc_kjb_warn_1}"
    kjb_setenv F77_KJB_WARN_2 "${gcc_kjb_warn_2}"
    kjb_setenv F77_KJB_WARN_3 "${gcc_kjb_warn_3}"
    kjb_setenv F77_KJB_WARN_4 "${gcc_kjb_warn_4}"
    kjb_setenv F77_KJB_WARN_5 "${gcc_kjb_warn_5}"
    kjb_setenv F77_MD_FLAGS "${gcc_md_flags}"
    kjb_setenv F77_MISC_FLAGS ""
    kjb_setenv F77_THREAD_FLAGS "${gcc_thread_flags}"
    kjb_setenv F77_SHARED_FLAGS "${gcc_shared_flags}"
    kjb_setenv F77_COMPILER_INCLUDES "${gcc_compiler_includes}" 
else if ($KJB_F77 == "ifort") then
    kjb_setenv COMPILER_DEFINE -DINTEL_COMPILER 
    kjb_setenv F77_FORCE_SINGLE  "${icc_heavy_opt}"
    kjb_setenv F77_HEAVY_OPT  "${icc_heavy_opt}"
    kjb_setenv F77_OPTIMIZATION  "${icc_optimization}"
    kjb_setenv F77_KJB_WARN_0 "${icc_kjb_warn_0}"
    kjb_setenv F77_KJB_WARN_1 "${icc_kjb_warn_1}"
    kjb_setenv F77_KJB_WARN_2 "${icc_kjb_warn_2}"
    kjb_setenv F77_KJB_WARN_3 "${icc_kjb_warn_3}"
    kjb_setenv F77_KJB_WARN_4 "${icc_kjb_warn_4}"
    kjb_setenv F77_KJB_WARN_5 "${icc_kjb_warn_5}"
    kjb_setenv F77_MD_FLAGS "${icc_f77_md_flags}"
    kjb_setenv F77_MISC_FLAGS "${icc_f77_misc_flags}"
    kjb_setenv F77_THREAD_FLAGS "${icc_thread_flags}"
    kjb_setenv F77_SHARED_FLAGS "${icc_shared_flags}"
    kjb_setenv F77_COMPILER_INCLUDES "${icc_compiler_includes}"
else 
    kjb_setenv COMPILER_DEFINE -DUNKNOWN_COMPILER 
    kjb_setenv F77_FORCE_SINGLE  ""
    kjb_setenv F77_HEAVY_OPT  ""
    kjb_setenv F77_OPTIMIZATION  ""
    kjb_setenv F77_KJB_WARN_0 ""
    kjb_setenv F77_KJB_WARN_1 ""
    kjb_setenv F77_KJB_WARN_2 ""
    kjb_setenv F77_KJB_WARN_3 ""
    kjb_setenv F77_KJB_WARN_4 ""
    kjb_setenv F77_KJB_WARN_5 ""
    kjb_setenv F77_MD_FLAGS ""
    kjb_setenv F77_MISC_FLAGS ""
    kjb_setenv F77_THREAD_FLAGS ""
    kjb_setenv F77_SHARED_FLAGS ""
    kjb_setenv F77_COMPILER_INCLUDES "/usr/include"
endif

kjb_setenv MD_DEFINES "-D${UC_OS} -D${UC_MACHINE} ${MALLINFO_DEFINE} ${COMPILER_DEFINE}"


################################################################################

if ("${OS}" == "mac_osx") then
    # I still have not figured out why or where __BLOCK__ is getting defined, and
    # thus why we need to undefine it. ALso, currently it does not seem needed.
    #
    # kjb_setenv C2MAN_MD_DEFINES "-U__BLOCKS__"
    kjb_setenv C2MAN_MD_DEFINES ""

    # These are now handled in l_sys_sys.h. We had them here to gaurd against
    # bad include order, but this leads to other problems. For example, we need
    # some typdef's instead of #defines. 
    #
    # kjb_setenv C2MAN_CPP_CMD "cpp -std=c89 -C -D__C2MAN__ -D'__builtin_va_list=void*' -D'__asm(X)=' -D'__GNUC_VA_LIST'"
    kjb_setenv C2MAN_CPP_CMD "cpp -std=c89 -C -D__C2MAN__"
else
    kjb_setenv C2MAN_MD_DEFINES ""
    kjb_setenv C2MAN_CPP_CMD "cpp -std=c89 -C -D__C2MAN__"
endif

################################################################################

# These apply to most compilers used so far except for recent versions of
# gcc/g++. In that case, they get overwritten.
#
set cc_debug_flags = "-g" 
set cxx_debug_flags = "-g" 
set f77_debug_flags = "-g" 

if (${kjb_cc_is_gcc}) then
    if (${GCC_VERSION} > 3) then
        set cc_debug_flags = "-g3" 
    endif
else if (${kjb_cc_is_gxx}) then
    if (${GPP_VERSION} > 3) then
        set cc_debug_flags = "-g3" 
    endif
endif

if (${kjb_cxx_is_gxx}) then
    if (${GPP_VERSION} > 3) then
        set cxx_debug_flags = "-g3" 
    endif
endif


if (${force_debug}) then
    kjb_setenv CC_DEBUG "${cc_debug_flags} -DDEBUGGING"
    kjb_setenv CXX_DEBUG "${cxx_debug_flags} -DDEBUGGING"
    kjb_setenv F77_DEBUG "${f77_debug_flags} -DDEBUGGING"
else if (${force_no_debug}) then
    kjb_setenv CC_DEBUG "-DNDEBUG"
    kjb_setenv CXX_DEBUG "-DNDEBUG"
    kjb_setenv F77_DEBUG "-DNDEBUG"
else if ($PRODUCTION ) then
    kjb_setenv CC_DEBUG "-DNDEBUG"
    kjb_setenv CXX_DEBUG "-DNDEBUG"
    kjb_setenv F77_DEBUG "-DNDEBUG"
else
    kjb_setenv CC_DEBUG "${cc_debug_flags} -DDEBUGGING"
    kjb_setenv CXX_DEBUG "${cxx_debug_flags} -DDEBUGGING"
    kjb_setenv F77_DEBUG "${f77_debug_flags} -DDEBUGGING"
endif


if (${force_optimize}) then
    kjb_setenv CC_OPTIMIZE "${CC_OPTIMIZATION}"
    kjb_setenv CXX_OPTIMIZE "${CXX_OPTIMIZATION}"
    kjb_setenv F77_OPTIMIZE "${F77_OPTIMIZATION}"
else if (${force_no_optimize}) then
    kjb_setenv CC_OPTIMIZE ""
    kjb_setenv CXX_OPTIMIZE ""
    kjb_setenv F77_OPTIMIZE ""
else if ($PRODUCTION) then
    kjb_setenv CC_OPTIMIZE "${CC_OPTIMIZATION}"
    kjb_setenv CXX_OPTIMIZE "${CXX_OPTIMIZATION}"
    kjb_setenv F77_OPTIMIZE "${F77_OPTIMIZATION}"
else if ($SINGLE_PRECISION) then
    # Not used yet. 
    kjb_setenv CC_OPTIMIZE "${CC_OPTIMIZATION} ${CC_FORCE_SINGLE}"
    kjb_setenv CXX_OPTIMIZE "${CXX_OPTIMIZATION} ${CXX_FORCE_SINGLE}"
    kjb_setenv F77_OPTIMIZE "${F77_OPTIMIZATION} ${F77_FORCE_SINGLE}"
else 
    kjb_setenv CC_OPTIMIZE ""
    kjb_setenv CXX_OPTIMIZE ""
    kjb_setenv F77_OPTIMIZE ""
endif


if ($?USER == 0) then 
    if ($?LOGNAME != 0) then 
       kjb_setenv USER "${LOGNAME}"
    else if (-x /bin/whoami) then
       kjb_setenv USER `/bin/whoami`
    else if (-x /usr/bin/whoami) then
       kjb_setenv USER `/usr/bin/whoami`
    else 
       kjb_setenv USER unknown
    endif
endif

kjb_setenv PROGRAMMER "${USER}"
kjb_setenv PROGRAMMER_FLAGS "-DPROGRAMMER_IS_${PROGRAMMER} -DPROGRAMMER="'\"'"${PROGRAMMER}"'\"'

if ($?EMULATE_EXPORTED_SOURCE) then
    # This is not a true emulation. There are lots more #defines that need to be
    # either set or unset to completely emulate exported source. See the script
    # "clean_src". 
    #
    kjb_setenv EXPORTED_DEFINES "-DSKIP_FOR_EXPORT"
endif

kjb_setenv CC_NULL_STD_BASE_FLAGS "-DCOMPILING_C_SOURCE ${CC_MD_FLAGS} ${MD_DEFINES}"
kjb_setenv CC_C89_BASE_FLAGS "${CC_C89_FLAGS} -DCOMPILING_C_SOURCE ${CC_MD_FLAGS} ${MD_DEFINES}"
kjb_setenv CC_C99_BASE_FLAGS "${CC_C99_FLAGS} -DCOMPILING_C_SOURCE ${CC_MD_FLAGS} ${MD_DEFINES}"

# Some of the following Logic is duplicated in build-2 because the choice of
# standard is not tied to the cache. 
if ($?FORCE_C99) then
    kjb_setenv CC_BASE_FLAGS "${CC_C99_BASE_FLAGS}" 
else if ($?FORCE_C89) then
    kjb_setenv CC_BASE_FLAGS "${CC_C89_BASE_FLAGS}" 
else if ($?FORCE_NULL_STD) then
    kjb_setenv CC_BASE_FLAGS "${CC_NULL_STD_BASE_FLAGS}" 
else if ("$PREFERRED_STD" == "C99") then
    kjb_setenv CC_BASE_FLAGS "${CC_C99_BASE_FLAGS}" 
else if ("$PREFERRED_STD" == "C89") then
    kjb_setenv CC_BASE_FLAGS "${CC_C89_BASE_FLAGS}" 
else 
    kjb_setenv CC_BASE_FLAGS "${CC_NULL_STD_BASE_FLAGS}" 
endif

kjb_setenv CXX_BASE_FLAGS "${CXX_MISC_FLAGS}  -DCOMPILING_CPLUSPLUS_SOURCE ${CXX_MD_FLAGS} ${MD_DEFINES}"
kjb_setenv F77_BASE_FLAGS "${F77_MISC_FLAGS} -DCOMPILING_F77_SOURCE ${F77_MD_FLAGS} ${MD_DEFINES}"

# Defaults that are overwritten in build-2 if the user sets a warn level.
# Changes here should be paralleled in build-2.

if (${KJB_WARN_LEVEL} == 0) then
    kjb_setenv CC_KJB_WARNINGS "${CC_KJB_WARN_0}"
    kjb_setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_0}"
    kjb_setenv F77_KJB_WARNINGS "${F77_KJB_WARN_0}"
    kjb_setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_DEFAULT_MSG_FILTER}"
else if (${KJB_WARN_LEVEL} == 1) then
    kjb_setenv CC_KJB_WARNINGS "${CC_KJB_WARN_1}"
    kjb_setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_1}"
    kjb_setenv F77_KJB_WARNINGS "${F77_KJB_WARN_1}"
    kjb_setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_DEFAULT_MSG_FILTER}"
else if (${KJB_WARN_LEVEL} == 2) then
    kjb_setenv CC_KJB_WARNINGS "${CC_KJB_WARN_2}"
    kjb_setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_2}"
    kjb_setenv F77_KJB_WARNINGS "${F77_KJB_WARN_2}"
    kjb_setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_DEFAULT_MSG_FILTER}"
else if (${KJB_WARN_LEVEL} == 3) then
    kjb_setenv CC_KJB_WARNINGS "${CC_KJB_WARN_3}"
    kjb_setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_3}"
    kjb_setenv F77_KJB_WARNINGS "${F77_KJB_WARN_3}"
    kjb_setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_DEFAULT_MSG_FILTER}"
else if (${KJB_WARN_LEVEL} == 4) then
    kjb_setenv CC_KJB_WARNINGS "${CC_KJB_WARN_4}"
    kjb_setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_4}"
    kjb_setenv F77_KJB_WARNINGS "${F77_KJB_WARN_4}"
    kjb_setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_ALLPASS_MSG_FILTER}"
else if (${KJB_WARN_LEVEL} >= 5) then
    kjb_setenv CC_KJB_WARNINGS "${CC_KJB_WARN_5}"
    kjb_setenv CXX_KJB_WARNINGS "${CXX_KJB_WARN_5}"
    kjb_setenv F77_KJB_WARNINGS "${F77_KJB_WARN_5}"
    kjb_setenv KJB_CPP_MESSAGE_FILTER "${KJB_CPP_ALLPASS_MSG_FILTER}"
endif

################################################################################

if ((${kjb_cc_is_gcc}) || (${kjb_cc_is_gxx})) then
    if (${OS} == "mac_osx") then
        kjb_setenv LOAD_FLAGS "-bind_at_load" 
    else
        kjb_setenv LOAD_FLAGS " "
    endif

    kjb_setenv STATIC "-static"
    kjb_setenv DYNAMIC "-dynamic"
    kjb_setenv DEFAULT_DYNAMIC  1
else if (("${OS}" == "sun5") && ("${KJB_CC}" == "cc")) then
    kjb_setenv STATIC "-B static -dn"
    kjb_setenv DYNAMIC "-B dynamic -dy"
    kjb_setenv DEFAULT_DYNAMIC  1
    kjb_setenv LOAD_FLAGS ""
else 
    #
    # Random guesses.
    #
    kjb_setenv LOAD_FLAGS ""
    kjb_setenv STATIC ""
    kjb_setenv DYNAMIC ""
    kjb_setenv DEFAULT_DYNAMIC  1
endif


if ((${FORCE_STATIC}) && (${DEFAULT_DYNAMIC})) then
    kjb_setenv STATIC_OR_DYNAMIC "${STATIC}"
else if ((${FORCE_DYNAMIC}) && ( ! ${DEFAULT_DYNAMIC}))  then
    kjb_setenv STATIC_OR_DYNAMIC "${DYNAMIC}"
else
    kjb_setenv STATIC_OR_DYNAMIC ""
endif

kjb_setenv LOAD_FLAGS "${LOAD_FLAGS} ${STATIC_OR_DYNAMIC}"

if (("${OS}" == "linux_x86_64") || ("${OS}" == "linux_386") || ("${OS}" == "sun5")) then
    kjb_setenv DYNAMIC_SUFFIX "so"
else if ("${OS}" == "mac_osx") then 
    kjb_setenv DYNAMIC_SUFFIX "dylib"
endif

if ((${kjb_ld_is_gcc}) || (${kjb_ld_is_gxx})) then
    if (("${OS}" == "linux_x86_64") || ("${OS}" == "linux_386") || ("${OS}" == "sun5")) then
        kjb_setenv LD_SHARED_FLAGS "-shared -fPIC" 
        kjb_setenv LD_OUTPUT_FLAG "-o" 
        #
        # It is not clear why we need soname as used in examples on the web, and
        # what the corresponding incatation is on the mac. Try without. 
        #     kjb_setenv LD_SONAME_FLAG "-Wl,-soname," 
        kjb_setenv LD_SONAME_FLAG "" 
    else if ("${OS}" == "mac_osx") then
        kjb_setenv LD_SHARED_FLAGS "-dynamiclib -fPIC" 
        kjb_setenv LD_OUTPUT_FLAG "-o" 
        kjb_setenv LD_SONAME_FLAG "" 
    endif
else if ("${KJB_CC}" == "clang") then
    if ("${OS}" == "mac_osx") then
        kjb_setenv LD_SHARED_FLAGS "-shared -fpic" 
        kjb_setenv LD_OUTPUT_FLAG "-o" 
        kjb_setenv LD_SONAME_FLAG "" 
    endif
else if ("${KJB_CC}" == "icc") then
    if (("${OS}" == "linux_x86_64") || ("${OS}" == "linux_386") || ("${OS}" == "sun5")) then
        kjb_setenv LD_SHARED_FLAGS "-shared -fPIC" 
        kjb_setenv LD_OUTPUT_FLAG "-o" 
        kjb_setenv LD_SONAME_FLAG "" 
    endif
else if (("${OS}" == "sun5") && ("${KJB_CC}" == "cc")) then
    # Fill in later. 
    kjb_setenv LD_OUTPUT_FLAG "-o" 
    kjb_setenv LD_SHARED_FLAGS ""
    kjb_setenv LD_SONAME_FLAG ""
else 
    # Fill in later. 
    kjb_setenv LD_OUTPUT_FLAG "-o" 
    kjb_setenv LD_SHARED_FLAGS ""
    kjb_setenv LD_SONAME_FLAG ""
endif


################################################################################

#
# Continue to FIXME.
#
# Legacy code for system dependent relatively standard libraries. Some of this
# functionality is slowly being moved to the more generic system below.
# Eventually, this section should simply set symbols that are different across
# platforms such as MD_LIB_CURSES to be used below. Even this minimal
# functionality should be rationalized and moved as needed.
#

kjb_setenv MD_LIB_CURSES ""

if ("${OS}" == "sun5") then
    # kjb_setenv BASIC_STD_LIBS "-lm -lcurses -ltermcap"
    kjb_setenv BASIC_STD_LIBS "-lm -ltermcap -lc"

    if ((${kjb_cc_is_gcc}) || (${kjb_cc_is_gxx})) then
        # Malloc(3X) gives trouble. 
        # Bug in gcc? malloc(3X)? my code? 
        kjb_setenv MD_LIBS ""
    else
        kjb_setenv MD_LIBS  "-lmalloc"
    endif

    kjb_setenv STD_LIBS "$BASIC_STD_LIBS $MD_LIBS"
    # kjb_setenv X11_LIBS "-lXext -lX11 -lX"
    kjb_setenv X11_LIBS "-lXext -lX11"
    kjb_setenv NET_LIBS "-lsocket -lnsl"

    kjb_setenv LIB_STD "${STD_LIBS}"
    kjb_setenv LIB_NET "${NET_LIBS}"
else if (${OS} == "linux_x86_64") then
    kjb_setenv BASIC_STD_LIBS "-lm -lc"
    kjb_setenv MD_LIB_CURSES "-lncurses" 
    #
    # Malloc(3X) gives trouble. 
    # Bug in gcc? malloc(3X)? my code? 
    # kjb_setenv MD_LIBS  "-lmalloc"
    kjb_setenv MD_LIBS ""

    kjb_setenv STD_LIBS "$BASIC_STD_LIBS $MD_LIBS"
     
    # TRY to work with each X11 library separately. 
    #
    # kjb_setenv X11_LIBS "-lXext -lX11"
    kjb_setenv X11_LIBS "-lX11"
    kjb_setenv NET_LIBS "-lnsl"

    kjb_setenv LIB_STD "${STD_LIBS}"
    kjb_setenv LIB_NET "${NET_LIBS}"
else if (${OS} == "linux_386") then
    kjb_setenv BASIC_STD_LIBS "-lm -lc"
    kjb_setenv MD_LIB_CURSES "-lncurses" 
    #
    # Malloc(3X) gives trouble. 
    # Bug in gcc? malloc(3X)? my code? 
    # kjb_setenv MD_LIBS  "-lmalloc"
    kjb_setenv MD_LIBS ""

    kjb_setenv STD_LIBS "$BASIC_STD_LIBS $MD_LIBS"
    # TRY to work with each X11 library separately. 
    #
    # kjb_setenv X11_LIBS "-lXext -lX11"
    kjb_setenv X11_LIBS "-lX11"
    kjb_setenv NET_LIBS "-lnsl"

    kjb_setenv LIB_STD "${STD_LIBS}"
    kjb_setenv LIB_NET "${NET_LIBS}"
else if ("${OS}" == "sgi") then
    kjb_setenv BASIC_STD_LIBS "-lm -ltermcap -lc"
    kjb_setenv MD_LIB_CURSES "-lcurses" 

    if ((${kjb_cc_is_gcc}) || (${kjb_cc_is_gxx})) then
        # Malloc(3X) gives trouble. 
        # Bug in gcc? malloc(3X)? my code? 
        kjb_setenv MD_LIBS ""
    else
        #
        # Works, but gives use preemption warnings. 
        #
        # kjb_setenv MD_LIBS  "-lmalloc"
        #
        kjb_setenv MD_LIBS "" 
    endif

    kjb_setenv STD_LIBS "$BASIC_STD_LIBS $MD_LIBS"
    kjb_setenv X11_LIBS "-lX11"
    kjb_setenv NET_LIBS "-lsocket -lnsl"

    kjb_setenv LIB_STD "${STD_LIBS}"
    kjb_setenv LIB_NET "${NET_LIBS}"
else if (${OS} == "mac_osx") then
    kjb_setenv BASIC_STD_LIBS "-lm -ltermcap -lc"
    kjb_setenv MD_LIB_CURSES "-lcurses" 
    kjb_setenv MD_LIBS ""

    kjb_setenv STD_LIBS "$BASIC_STD_LIBS $MD_LIBS"
    kjb_setenv X11_LIBS "-lX11"
    kjb_setenv NET_LIBS "-lsocket -lnsl"

    kjb_setenv LIB_STD "${STD_LIBS}"
    kjb_setenv LIB_NET "${NET_LIBS}"
else 
    # Well, we are not so sure, but we need defaults, or there is no chance
    # that an unknown system will work! 

    kjb_setenv BASIC_STD_LIBS "-lm -ltermcap -lc"
    kjb_setenv MD_LIB_CURSES "-lncurses" 
    kjb_setenv MD_LIBS ""

    kjb_setenv STD_LIBS "$BASIC_STD_LIBS $MD_LIBS"
    kjb_setenv X11_LIBS "-lX11"
    kjb_setenv NET_LIBS "-lsocket -lnsl"

    kjb_setenv LIB_STD "${STD_LIBS}"
    kjb_setenv LIB_NET "${NET_LIBS}"
endif

################################################################################

kjb_setenv LINT_FLAGS "-D${UC_MACHINE} -D${UC_OS} ${TEST}"

if (("${OS}" == "sun5") && ("$KJB_CC" == "cc")) then
    kjb_setenv LINT lint

    kjb_setenv LINT_IGNORE ""
    kjb_setenv LINT_EXTRA ""

    #
    # Enhanced mode--Buggy! 
    #
    # kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_EMPTY_TRANSLATION_UNIT" 
    # kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_FUNC_RET_ALWAYS_IGNOR"
    # kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_FUNC_RET_MAYBE_IGNORED"
    # kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_H_C_CHECK0"
    # kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_H_C_CHECK1"
    # kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_BAD_FORMAT_STR"
    # kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_EMPTY_TRANSLATION_UNIT" 
    #
    #
    # kjb_setenv LINT_EXTRA "${LINT_EXTRA} -errchk-%all
    #
    # kjb_setenv LINT_LIBRARY_FLAGS "-s -u -m -Ncheck -errtags -errhdr -Xtransition $LINT_EXTRA $LINT_IGNORE"
    #
    # kjb_setenv LINT_PROGRAM_FLAGS "-s -u -Ncheck -Nlevel=1 -errtags -errhdr -Xtransition $LINT_EXTRA $LINT_IGNORE"


    kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_FUNC_RET_ALWAYS_IGNOR2"
    kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_FUNC_RET_MAYBE_IGNORED2"
    kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_BAD_FORMAT_STR2"
    kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_EMPTY_TRANSLATION_UNIT" 
    kjb_setenv LINT_IGNORE "$LINT_IGNORE -erroff=E_NAME_DECL_NOT_USED_DEF2" 

    kjb_setenv LINT_PROGRAM_FLAGS "-s -u -errtags -errhdr -Xtransition $LINT_EXTRA $LINT_IGNORE"

    kjb_setenv LINT_LIBRARY_FLAGS "-s -u -m -errtags -errhdr -Xtransition $LINT_EXTRA $LINT_IGNORE"


    kjb_setenv LINT_CREATE_LIBRARY "-o"

    #kjb_setenv LINT_CREATE_FLAGS  "-v -x"
    kjb_setenv LINT_CREATE_FLAGS   ""

    kjb_setenv LINT_LIB_PREFIX     "llib-l"
else  
    kjb_setenv LINT lclint
    kjb_setenv LINT_IGNORE ""
    kjb_setenv LINT_EXTRA ""
    kjb_setenv LINT_PROGRAM_FLAGS ""
    kjb_setenv LINT_LIBRARY_FLAGS ""
    kjb_setenv LINT_CREATE_LIBRARY ""
    kjb_setenv LINT_CREATE_FLAGS  ""
    kjb_setenv LINT_LIB_PREFIX    ""
    kjb_setenv LINT_FLAGS ""
endif

################################################################################

kjb_setenv SPLINT_CC_FLAGS "-D${UC_MACHINE} -D${UC_OS} ${TEST}"

kjb_setenv SPLINT lclint

kjb_setenv SPLINT_IGNORE ""
kjb_setenv SPLINT_EXTRA ""

################################################################################

kjb_setenv CC_TEST_OR_OPTIMIZE "${TRACK_MEMORY} ${TEST} ${CC_DEBUG} ${CC_OPTIMIZE}"
kjb_setenv CC_DONT_OPTIMIZE    "${TEST} ${CC_DEBUG}"
kjb_setenv CC_ALWAYS_OPTIMIZE  "${CC_OPTIMIZATION}"

kjb_setenv CXX_TEST_OR_OPTIMIZE "${TRACK_MEMORY} ${TEST} ${CXX_DEBUG} ${CXX_OPTIMIZE}"
kjb_setenv CXX_DONT_OPTIMIZE    "${TEST} ${CXX_DEBUG}"
kjb_setenv CXX_ALWAYS_OPTIMIZE  "${CXX_OPTIMIZATION}"

kjb_setenv F77_TEST_OR_OPTIMIZE "${TRACK_MEMORY} ${TEST} ${F77_DEBUG} ${F77_OPTIMIZE}"
kjb_setenv F77_DONT_OPTIMIZE    "${TEST} ${F77_DEBUG}"
kjb_setenv F77_ALWAYS_OPTIMIZE  "${F77_OPTIMIZATION}"

if ($USE_SHARED_WARNINGS) then 
    kjb_setenv CC_SHARED_WARNINGS "${CC_KJB_WARNINGS}"
else 
    kjb_setenv CC_SHARED_WARNINGS "${CC_KJB_WARN_0}" 
    kjb_setenv LINT_FLAGS "${LINT_FLAGS} -DDONT_LINT_SHARED"

    if ($?LC_LINT_FLAGS) then 
        kjb_setenv LC_LINT_FLAGS "${LC_LINT_FLAGS} -DDONT_LINT_SHARED"
    endif
endif


# =============================================================================
#
# Some initializations for includes and loads. 
#
# =============================================================================


# The variable optional_libs sets up a list of possible libraries and the header
# files whose presence indicate that the corresponding library should be linked.
# Multiple such header files are handled by multiple library/header pairs.
# Availability of the library is indicated by variables of the form KJB_HAVE_XXX
# which evaluate to either the NULL string or a define for the compiler.
# optional_libs is used as an argument to the script make_libs_needed.
#
set optional_libs = ""

# Colect header strings that indicate when a gpu enabled library may be used. 
set gpu_enabled_libs = ""

# EXTRA_OPT_INCLUDES will collect additional common locations that are added if
# needed for any of the optional libraries. 
#
set needed_opt_includes = " "

# AFTER_INCLUDES contains locations that serve as a last resort for any
# optional libraries. Last resort locations cannot simply be at the end of
# BASE_XXX_INCLUDES, as this is followed in compile lines by extra includes
# for optional libraries which are not in common locations. 
#
set used_inc_dirs = ""
set after_includes = " "
set generic_aft_includes = " "

# These strings are built based on the optional libs found on this system. They
# are then distilled at the end of the script to produce OPTIONAL_INCLUDES,
# AFTER_INCLUDES, and GENERIC_AFT_INCLUDES.
#
set needed_load_dirs = ""
set needed_inc_dirs = ""
set needed_for_libs = ""

set kjb_have = ""
set all_kjb_have = ""

# =============================================================================
#
# Create a list of places to look for libraries. 
#
# =============================================================================

if ("${OS}" == "linux_x86_64") then
    set lib_str_list = "lib64 lib lib64/x86_64-linux-gnu lib/x86_64-linux-gnu"
else if ("${OS}" == "linux_386") then
    set lib_str_list = "lib lib/i386-linux-gnu"
else 
    set lib_str_list = "lib"
endif

set load_dirs = ""

# for Mac OSX
set framework_dirs = "/System/Library/Frameworks"

# ------------------------------------------------

set before_load_dirs = ""

if (($?LINUX_FLAVOR) && ($?LINUX_FLAVOR_VERSION)) then
    set os_str = "${LINUX_FLAVOR}.${LINUX_FLAVOR_VERSION}"
else 
    set os_str = ""
endif 

if ("${user_work}" != "") then
    set try_dirs = "${user_work}/ ${HOME}/"
else 
    set try_dirs = "${HOME}/"
endif

if ("${misc_search_dir}" != "") then
    set try_dirs = "${try_dirs} ${misc_search_dir}"
endif

set blank = ""
foreach try_dir (${try_dirs})
    set try_load_dir = "${try_dir}load_before/${MACHINE}"
    if (-e ${try_load_dir}) then
        if ("${os_str}" != "") then
            if (-e "${try_load_dir}/${os_str}") then
                set before_load_dirs = "${before_load_dirs}${blank}${try_load_dir}/${os_str}"
                set blank = " "
            endif 
        endif 

        set before_load_dirs = "${before_load_dirs}${blank}${try_load_dir}"
        set blank = " "

#         if ("${KJB_GPU_DIR}" != "") then
#             set try_load_dir = "${try_load_dir}${KJB_GPU_DIR}"
#             if (-e ${try_load_dir}) then
#                 set before_load_dirs = "${before_load_dirs}${blank}${try_load_dir}"
#             endif
#         endif
    endif
end

# ------------------------------------------------

set user_load_dirs = ""

if ("${user_work}" != "") then
    set try_dirs = "${user_work}/ ${HOME}/"
else 
    set try_dirs = "${HOME}/"
endif

set blank = ""
foreach try_dir (${try_dirs})
    set try_load_dir = "${try_dir}load/${MACHINE}"
    if (-e ${try_load_dir}) then
        if ("${os_str}" != "") then
            if (-e "${try_load_dir}/${os_str}") then
                set user_load_dirs = "${user_load_dirs}${blank}${try_load_dir}/${os_str}"
                set blank = " "
            endif 
        endif 

        set user_load_dirs = "${user_load_dirs}${blank}${try_load_dir}"
        set blank = " "

#         if ("${KJB_GPU_DIR}" != "") then
#             set try_load_dir = "${try_load_dir}${KJB_GPU_DIR}"
#             if (-e ${try_load_dir}) then
#                 set before_load_dirs = "${before_load_dirs}${blank}${try_load_dir}"
#             endif
#         endif
    endif
end

# ------------------------------------------------
# ------------------------------------------------

# IMPORTANT NOTE: FIXME 
#
# This is about where the synchrony with how we do includes and loads break
# down. Perhaps natural because they are different in some respects, but we
# should do better. Currently, ivilab_load_dirs combined with system_load_dirs
# corresponds roughly to the cobinationa of default_opt_inc_dirs and
# extra_opt_inc_dirs. The order within the respective combinations should be as
# similar as possible. 
#
# This might be better addressed when (if!) we do a rewrite of init_compile that
# consults a file for each library componant. 
#
# A POSSIBLE IMPROVEMENT not exclusive of others:
# Perhaps we should look at the corresponding load/header location first, before
# going through the generic list. This begs the question whether it is better to
# key off of load, or off of include. Using load implies fewer changes, and
# probably makes more sense.  
#
# ------------------------------------------------
# ------------------------------------------------

set boost_load_dirs = ""

# For Homebrew, at least. This is following some boost version directory trees
# that Clay supplied, which were different for versions 1.59.0 and 1.67.0_1. The
# trees are pretty idiosyncratic, so this likely will need updating by someone
# who is actively using homebrew. 
#
if ("${BOOST_VERSION}" != "") then
    # Version string without the last component. IE, 1.59 instead of 1.59.0. 
    set boost_version_short = `echo ${BOOST_VERSION} | sed 's/\([^.][^.]*\.[^.][^.]*\)\..*/\1/'`

    set try_load_dirs = ""
    foreach lib_str (${lib_str_list})
        set try_load_dirs = "${try_load_dirs} /usr/local/opt/boost@${BOOST_VERSION}/${lib_str} /usr/local/Cellar/boost@${boost_version_short}/${BOOST_VERSION}/${lib_str} /usr/local/Cellar/boost/${BOOST_VERSION}/${lib_str}"
    end 

    set boost_ld_dirs_blank = ""

    foreach try_load_dir ($try_load_dirs)
        if (-d ${try_load_dir}) then
            set boost_load_dirs = "${boost_load_dirs}${boost_ld_dirs_blank}${try_load_dir}"
            set boost_ld_dirs_blank = " "
        endif
    end
endif

# echo boost_load_dirs: ${boost_load_dirs}

# Corresponds roughly to default_opt_inc_dirs. 

set try_load_dirs = ""
foreach lib_str (${lib_str_list})
    set try_load_dirs = "${try_load_dirs} /opt/local/${lib_str} /usr/local/${lib_str} /opt/local/${lib_str} /usr/local/opt/${lib_str}"
end

set ivilab_load_dirs = ""
set ivilab_ld_dirs_blank = ""

foreach try_load_dir ($try_load_dirs)
    if (-d ${try_load_dir}) then
        set ivilab_load_dirs = "${ivilab_load_dirs}${ivilab_ld_dirs_blank}${try_load_dir}"
        set ivilab_ld_dirs_blank = " "
    endif
end 

set try_misc_dirs = "${misc_search_dir}"

foreach try_misc_dir (${try_misc_dirs})
    set try_load_dir = "${try_misc_dir}link/${MACHINE}"
    if (-e ${try_load_dir}) then
        if ("${os_str}" != "") then
            if (-e "${try_load_dir}/${os_str}") then
                set ivilab_load_dirs = "${ivilab_load_dirs}${blank}${try_load_dir}/${os_str}"
                set blank = " "
            endif 
        endif 

        set ivilab_load_dirs = "${ivilab_load_dirs}${ivilab_ld_dirs_blank}${try_load_dir}"
        set ivilab_ld_dirs_blank = " "

#         if ("${KJB_GPU_DIR}" != "") then
#             set try_load_dir = "${try_load_dir}${KJB_GPU_DIR}"
#             if (-e ${try_load_dir}) then
#                 set before_load_dirs = "${before_load_dirs}${blank}${try_load_dir}"
#             endif
#         endif
    endif
end

foreach try_misc_dir (${try_misc_dirs})
    set try_load_dir = "${try_misc_dir}load/${MACHINE}"
    if (-e ${try_load_dir}) then
        if ("${os_str}" != "") then
            if (-e "${try_load_dir}/${os_str}") then
                set ivilab_load_dirs = "${ivilab_load_dirs}${blank}${try_load_dir}/${os_str}"
                set blank = " "
            endif 
        endif 

#         if ("${KJB_GPU_DIR}" != "") then
#             set try_load_dir = "${try_load_dir}${KJB_GPU_DIR}"
#             if (-e ${try_load_dir}) then
#                 set before_load_dirs = "${before_load_dirs}${ivilab_ld_dirs_blank}${try_load_dir}"
#             endif
#         endif

        set ivilab_load_dirs = "${ivilab_load_dirs}${ivilab_ld_dirs_blank}${try_load_dir}"
        set ivilab_ld_dirs_blank = " "

    endif
end

# ------------------------------------------------

set system_load_dirs = "" 

set try_load_dirs = ""

set try_load_dirs = "${try_load_dirs} /opt/intel/mkl/lib/intel64"

set sunwspro = 0
if ("${OS}" == "sun5")  then 
    set sunwspro_dirs = "/usr/opt/SUNWspro /opt/SUNWspro /usr/local/SUNWspro /usr/sww/opt/SUNWspro"

    foreach sunwspro_dir (${sunwspro_dirs}) 
        if (-e ${sunwspro_dir}/lib) then 
             set sunwspro = 1
             set try_load_dirs = "${try_load_dirs} ${sunwspro_dir}/lib"
             break
        endif
    end 
endif

foreach lib_str (${lib_str_list})
    set try_load_dirs = "${try_load_dirs} /usr/local/cuda/${lib_str} /sw/lib /usr/sww/${lib_str} /usr/${lib_str} /${lib_str}"
end

set system_ld_dirs_blank = ""
foreach try_load_dir ($try_load_dirs)
    if (-d ${try_load_dir}) then
        # Get the real path (we don't want symlinks), and remove duplicates. 
        pushd ${try_load_dir} > /dev/null
            set test_dir = `pwd`
            set found = 0
            foreach cur_sys_load_dir (${system_load_dirs}) 
                if ("${cur_sys_load_dir}" == "${test_dir}") then
                    set found = 1
                    break
                endif
            end 

            if (! ${found}) then
                set system_load_dirs = "${system_load_dirs}${system_ld_dirs_blank}${test_dir}"
                set system_ld_dirs_blank = " "
            endif
        popd > /dev/null 
    endif
end 

# ------------------------------------------------

set after_load_dirs = ""

if ("${user_work}" != "") then
    set try_dirs = "${user_work}/ ${HOME}/"
else 
    set try_dirs = "${HOME}/"
endif

if ("${misc_search_dir}" != "") then
    set try_dirs = "${try_dirs} ${misc_search_dir}"
endif

set blank = ""
foreach try_dir (${try_dirs})
    set try_load_dir = "${try_dir}load_after/${MACHINE}"
        if ("${os_str}" != "") then
            if (-e "${try_load_dir}/${os_str}") then
                set after_load_dirs = "${after_load_dirs}${blank}${try_load_dir}/${os_str}"
                set blank = " "
            endif 
        endif 

    if (-e ${try_load_dir}) then
        set after_load_dirs = "${after_load_dirs}${blank}${try_load_dir}"
        set blank = " "
    endif
end

# ------------------------------------------------

# =============================================================================

# Develop a list of possible include directories to check when we need one. 

#
# Include locations that are used first, and are assumed to be provided by
# the Makefiles (e.g. $KJB_SRC_PATH/include_before). 

set before_inc_dirs = ""
set try_inc_dirs = "${KJB_SRC_PATH}include_before"

if ("${user_work}" != "") then
    set try_inc_dirs = "${try_inc_dirs} ${user_work}/include_before"
endif

set try_inc_dirs = "${try_inc_dirs} ${HOME}/include_before"

if ("${misc_search_dir}" != "") then
    set try_inc_dirs = "${try_inc_dirs} ${misc_search_dir}include_before"
endif

set blank = ""
foreach try_inc_dir (${try_inc_dirs}) 
    if (-e "${try_inc_dir}") then
        if (-e "${try_inc_dir}/${MACHINE}") then
            if ("${os_str}" != "") then
                if (-e "${try_inc_dir}/${MACHINE}/${os_str}") then
                    if (-e "${try_inc_dir}/${MACHINE}/${os_str}/${KJB_CC}") then
                        set have_header = `find ${try_inc_dir}/${MACHINE}/${os_str}/${KJB_CC} -name '*.h' -o -name '*.hpp' | wc -l | sed 's/ *//g' `

                        if (${have_header})  then
                            set before_inc_dirs = "${before_inc_dirs}${blank}${try_inc_dir}/${MACHINE}/${os_str}/${KJB_CC}" 
                            set blank = " "
                        endif
                    endif

                    set have_header = `find ${try_inc_dir}/${MACHINE}/${os_str} -maxdepth 1 -name '*.h' -o -name '*.hpp' |  wc -l | sed 's/ *//g' `

                    if (${have_header})  then
                        set before_inc_dirs = "${before_inc_dirs}${blank}${try_inc_dir}/${MACHINE}/${os_str}" 
                        set blank = " "
                    endif
                endif
            endif 

            set have_header = `find ${try_inc_dir}/${MACHINE} -maxdepth 1  -name '*.h' -o -name '*.hpp' |  wc -l | sed 's/ *//g' `

            if (${have_header})  then
                set before_inc_dirs = "${before_inc_dirs}${blank}${try_inc_dir}/${MACHINE}" 
                set blank = " "
            endif
        endif

        set have_header = `find ${try_inc_dir} -maxdepth 1 -name '*.h' -o -name '*.hpp' | wc -l | sed 's/ *//g' `

        if (${have_header})  then
            set before_inc_dirs = "${before_inc_dirs}${blank}${try_inc_dir}" 
            set blank = " "
        endif
    endif
end

# ---------------------------------------------------------------------

# Basic include locations that are included before the standard includes if any
# component of the whole KJB system needs it. This simplifies compile lines,
# even though the particular piece of code that is being compiled may not need
# that include directory. 
#
set default_opt_inc_dirs = ""

set try_inc_dirs = "/opt/local/include /usr/local/include /opt/local/include /usr/local/opt/include"

foreach try_inc_dir ($try_inc_dirs)
    if (-e ${try_inc_dir}) then
            set default_opt_inc_dirs = "${default_opt_inc_dirs} ${try_inc_dir}" 
        endif
    endif
end 

# ---------------------------------------------------------------------

# Basic include locations that will not be found otherwise. These are included
# when compiling code that needs them. 
#
set extra_opt_inc_dirs = ""

if ("${user_work}" != "") then
    set try_inc_dirs = "${user_work}/include ${HOME}/include"
else 
    set try_inc_dirs = "${HOME}/include"
endif

if ("${misc_search_dir}" != "") then
    set try_inc_dirs = "${try_inc_dirs} ${misc_search_dir}include"
endif

set blank = ""
foreach try_inc_dir ($try_inc_dirs)
    if (-e ${try_inc_dir}) then
        if (-e ${try_inc_dir}/${MACHINE}) then
            if ("${os_str}" != "") then
                if (-e ${try_inc_dir}/${MACHINE}/${os_str}) then
                    set extra_opt_inc_dirs = "${extra_opt_inc_dirs}${blank}${try_inc_dir}/${MACHINE}/${os_str}" 
                    set blank = " "
                endif
            endif 

            set extra_opt_inc_dirs = "${extra_opt_inc_dirs}${blank}${try_inc_dir}/${MACHINE}" 
            set blank = " "
        endif

        set extra_opt_inc_dirs = "${extra_opt_inc_dirs}${blank}${try_inc_dir}" 
        set blank = " "
    endif
end 


# KB. 18/06/10. I am not sure about this comment, or if we still neet libergo
# here. 
#
# Currently we link against /usr/local/lib before /usr/lib, so we include
# /usr/local/include before the standard includes. 
#
set try_inc_dirs = "/opt/intel/mkl /opt/intel/mkl/include ${HOME}/.local/src/libergo"

foreach try_inc_dir ($try_inc_dirs)
    if (-e ${try_inc_dir}) then
            set extra_opt_inc_dirs = "${extra_opt_inc_dirs} ${try_inc_dir}" 
        endif
    endif
end 

set boost_inc_dirs = ""
# For Homebrew, at least. 
if ("${BOOST_VERSION}" != "") then
    # Version string without the last component. IE, 1.59 instead of 1.59.0. 
    set boost_version_short = `echo ${BOOST_VERSION} | sed 's/\([^.][^.]*\.[^.][^.]*\)\..*/\1/'`

    set try_inc_dirs = "/usr/local/opt/boost@${BOOST_VERSION}/include /usr/local/Cellar/boost@${boost_version_short}/${BOOST_VERSION}/include /usr/local/Cellar/boost/${BOOST_VERSION}/include"

    foreach try_inc_dir ($try_inc_dirs)
        if (-e ${try_inc_dir}) then
            set boost_inc_dirs = "${boost_inc_dirs} ${try_inc_dir}" 
         endif 
    end 
endif 

# echo boost_inc_dirs: $boost_inc_dirs

# ---------------------------------------------------------------------

#  Directories that we assume are included even if we do not specify them. We
#  don't want to add directories for files that available in the standard
#  included directories, unless we are having difficulty forcing the correct
#  order of includes. 

set std_inc_dirs = ""

set try_inc_dirs = "/usr/include"

if ((${kjb_cc_is_gcc}) || (${kjb_cc_is_gxx})) then
    set gcc_inc = `${KJB_CC} -v |& grep "Reading specs from" | sed 's/Reading specs from *//' | sed 's/\/specs.*//'`
    set try_inc_dirs = "${gcc_inc}/include ${try_inc_dirs}"
endif

set blank = ""
foreach try_inc_dir ($try_inc_dirs)
    if (-e ${try_inc_dir}) then
        set std_inc_dirs = "${std_inc_dirs}${blank}${try_inc_dir}" 
        set blank = " "
    endif
end

# ---------------------------------------------------------------------

# Include locations that are used last, and are assumed to be provided by
# the Makefiles (e.g. $KJB_SRC_PATH/include_after). 
#

set after_inc_dirs = ""

# The order here is the reverse of the include_before locations. 

if ("${misc_search_dir}" != "") then
    set try_inc_dirs = "${misc_search_dir}include_after"
else
    set try_inc_dirs = ""
endif

if ("${user_work}" != "") then
    set try_inc_dirs = "${try_inc_dirs} ${user_work}/include_after"
endif

set try_inc_dirs = "${try_inc_dirs} ${HOME}/include_after ${KJB_SRC_PATH}include_after"

set blank = ""

foreach try_inc_dir (${try_inc_dirs}) 
    if (-e "${try_inc_dir}") then
        set after_inc_dirs = "${after_inc_dirs}${blank}${try_inc_dir}" 
        set blank = " "

        if (-e "${try_inc_dir}/${MACHINE}") then
            set after_inc_dirs = "${after_inc_dirs}${blank}${try_inc_dir}/${MACHINE}" 
            set blank = " "

            if ("${os_str}" != "") then
                if (-e "${try_inc_dir}/${MACHINE}/${os_str}") then
                    set after_inc_dirs = "${after_inc_dirs}${blank}${try_inc_dir}/${MACHINE}/${os_str}" 
                    set blank = " "
                
                    if (-e "${try_inc_dir}/${MACHINE}/${os_str}/${KJB_CC}") then
                        set after_inc_dirs = "${after_inc_dirs}${blank}${try_inc_dir}/${MACHINE}/${os_str}/${KJB_CC}" 
                        set blank = " "
                    endif
                endif 
            endif
        endif
    endif
end 

# =============================================================================

# Setup X11 because it is a special case that can influence the load dir set and
# include dir set. Likely this should be handled in a better way.
#
# Currently, X11 is handled as the following special case. 
#
# FIXME 
#
# LIB_X11 needs to be next because we then put the found x_dir in
# extra_opt_inc_dirs.  Which gets used by "inc_dirs" later. This is all a bit of
# a HACK that should be fixed at some point. 

set kjb_have_x11 = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_X11"

set lib_x11 = ""

## Now set automatically at the end, and only if needed.
# kjb_setenv INCLUDE_X11 ""

kjb_setenv OPTIONS_X11 ""
kjb_setenv CC_FLAGS_X11 ""
set optional_libs = "${optional_libs} X11:Xlib\.h"

# FIXME
#
# Setting the location of the X11 libraries could use some additional
# robustness. For example, we should probably check for all libs in X11_LIBS.
# Second, there was a problem on v01 where there was  libXext.so.6.4 but no link
# libXext.so pointing to it. So we probably should loop, first looking for a
# suite of .a files, and then a suite of .so files. 
#
# On the OTHER hand, perhaps we should try to determine when we might ever need
# extra X11 libraries based on includes and make them separate entities. 
 
set x_dirs = "/usr/X11R6 /usr/local/X11R6 /opt/local/X11 /usr/openwin/usr/local/X11R6 /usr/local/X11 /usr/X11 /usr / "

set found_x11 = 0 

foreach lib_str (${lib_str_list})
    if (${NO_LIBS} || ${KJB_SUPPRESS_X11}) break

    foreach x_dir ( $x_dirs )
        set load_dir = ${x_dir}/${lib_str}

        if (! -d "${load_dir}") continue

        # FIXME 
        #
        # This should probably be a loop over all X11 libs that are going to be in
        # LIB_X11. 
        #
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libX11\\. | ${filter_non_devel}`
        set have_lib_2 = `/bin/ls -1 ${load_dir} | grep ^libXext\\. | ${filter_non_devel}`

        if (("${have_lib}" != "") && ("${have_lib_2}" != "")) then
            set inc_dir = ${x_dir}/include

            if (-e ${inc_dir}/X11/Xlib.h) then
                # Get the real path (we don't want symlinks), and remove duplicates. 
                pushd ${load_dir} > /dev/null
                    set x_load_dir = `pwd`
                popd > /dev/null 

                set x_inc_dir = "${inc_dir}"

                set needed_inc_dirs  = "${needed_inc_dirs} ${x_inc_dir}"
                set needed_load_dirs = "${needed_load_dirs} ${x_load_dir}"
                set needed_for_libs  = "${needed_for_libs} X11"

                set extra_opt_inc_dirs = "${extra_opt_inc_dirs} ${x_inc_dir}" 

                foreach cur_sys_load_dir (${system_load_dirs}) 
                    if ("${cur_sys_load_dir}" == "${test_dir}") then
                        set found = 1
                        break
                    endif
                end 

                if (! ${found}) then
                    set system_load_dirs = "${system_load_dirs}${system_ld_dirs_blank}${x_load_dir}"
                    set system_ld_dirs_blank = " "
                endif

                set system_load_dirs = "${system_load_dirs} ${x_load_dir}"

                set kjb_have_x11 = "-DKJB_HAVE_X11"
                set kjb_have = "${kjb_have} ${kjb_have_x11}"
                set lib_x11 = "${X11_LIBS}" 
                
                set found_x11 = 1

                break
            endif
        endif
    end 

    if (${found_x11}) break 
end

kjb_setenv LIB_X11 "${lib_x11}"
kjb_setenv KJB_HAVE_X11 "${kjb_have_x11}"

if ($?KJB_VERBOSE) then
    echo ""

    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_X11 due to NO_LIBS"
    else if (${KJB_SUPPRESS_X11}) then
        echo "Script init_compile skipped LIB_X11 due to KJB_SUPPRESS_X11"
    else if ("${KJB_HAVE_X11}" != "") then
        echo ""
        echo "Script init_compile found X11"
        echo "    LIB_X11: ${LIB_X11}"
        echo "    include: ${x_inc_dir}"
        echo "    load   : ${x_load_dir}"
    else
        echo "Script init_compile did NOT find X11"
    endif
endif

# =============================================================================

# The load dirs variable will be augmented to have ld_path_load_dirs in front.
# The definition that emerges at the end neeeds to be consistent with the one
# near the end where we need to form the same string but with the dummy label
# "AFTER".
#
set load_dirs = "${before_load_dirs} ${user_load_dirs} ${ivilab_load_dirs} ${system_load_dirs} ${gfortran_load_dir} ${after_load_dirs}" 
set ld_path_load_dirs = ""

if (${use_ld_library_path}) then 
    # LD_LIBRARY_PATH is tricky. It is used to "hack" load order for dynamic libs
    # and is "considered harmful." If set, LD_LIBRARY_PATH is consulted first. 
    #
    # However, we may want programs compiled on a machine with the dynamic library
    # being able to run on machines where that library must be located on a server.
    # Further, odd directories for dynamic libs would have to be registered on some
    # machines. 
    #
    # We can take LD_LIBRARY_PATH as a hint of the desired load order. However, this
    # is only for dynamic libraries. We do not want LD_LIBRARY_PATH to influence our
    # search for static libraries. 
    #
    # Doing exactly the right thing would take a lot of work. Hence we implement the
    # following. We exclude libs in LD_LIBRARY_PATH that do not exist, or have
    # already been processed. What remains is considered first. 

    if ($?KJB_VERBOSE) then
        echo ""
        echo "Using LD_LIBRARY_PATH" 
        echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}" 
        echo ""
    endif

    if (-d "${MISC_LOAD_DIR}") then
        # Hack time. Since we do not control HPC computers, we need to put loads
        # before the very first ones which will be LD_LIBRARY_PATH ones. We
        # cannot simply put them before, because they should then be in
        # LD_LIBRARY_PATH. So, we slip MISC_LOAD_DIR into LD_LIBRARY_PATH. 

        if ("${LD_LIBRARY_PATH}" == "") then 
            setenv LD_LIBRARY_PATH "${MISC_LOAD_DIR}"
        else 
            setenv LD_LIBRARY_PATH "${MISC_LOAD_DIR}:${LD_LIBRARY_PATH}"
        endif

        if (-d "${MISC_LOAD_DIR}${KJB_CC}") then
            setenv LD_LIBRARY_PATH "${MISC_LOAD_DIR}${KJB_CC}:${LD_LIBRARY_PATH}"
        endif

        if (-d "${MISC_LOAD_DIR}${KJB_CXX}") then
            setenv LD_LIBRARY_PATH "${MISC_LOAD_DIR}${KJB_CXX}:${LD_LIBRARY_PATH}"
        endif

#         if ("${KJB_GPU_DIR}" != "") then
#             if (-d "${MISC_LOAD_DIR}${}") then
#                 setenv LD_LIBRARY_PATH "${MISC_LOAD_DIR}${KJB_GPU_DIR}:${LD_LIBRARY_PATH}"
#             endif
#         endif
    endif

    if ( ${?LD_LIBRARY_PATH}) then
        set load_dirs_so_far = "${load_dirs}" 

        set try_load_dirs = `echo $LD_LIBRARY_PATH | sed "y/:/ /"`
        
        foreach try_load_dir ($try_load_dirs)
            if (-e ${try_load_dir}) then
                set need_it = 1 
                foreach load_dir ($load_dirs_so_far)
                    if ("${load_dir}" == "${try_load_dir}") then
                        set need_it = 0
                        break
                    endif
                end 

                if (${need_it}) then
                    ${VERBOSE_ECHO} "Adding ${try_load_dir} for library search due to LD_LIBRARY_PATH"

                    if ($use_include_path) then
                        # Sometimes the needed include directory is not provided
                        # by the modulecmd scripts, but it can be inferred from
                        # the load path. 
                         
                        set try_load_dir_base = `echo ${try_load_dir} | sed 's#/lib[0-9]*$#/#'`

                        if (-d "${try_load_dir_base}include") then
                            if ($?INCLUDE) then
                                # We need to add directories afterwards here so
                                # that MISC_INCLUDE_DIR remains first. 
                                #  
                                if ("${INCLUDE}" != "") then
                                    setenv INCLUDE "${INCLUDE}:${try_load_dir_base}/include" 
                                else
                                    setenv INCLUDE "${try_load_dir_base}/include" 
                                endif
                            else
                                setenv INCLUDE "${try_load_dir_base}/include" 
                            endif
                            
                            ${VERBOSE_ECHO} "Adding ${try_load_dir_base}/include to INCLUDE"
                        endif
                    endif

                    set load_dirs_so_far = "${load_dirs_so_far} ${try_load_dir}" 

                    #
                    # We want to be careful with blanks here. 
                    #
                    if ("${ld_path_load_dirs}" == "") then
                        set ld_path_load_dirs = "${try_load_dir}"
                    else
                        set ld_path_load_dirs = "${ld_path_load_dirs} ${try_load_dir}"
                    endif
                endif
            endif
        end 

        set load_dirs = "${ld_path_load_dirs} ${load_dirs}"
    endif
endif

# =============================================================================

set inc_dirs = "${before_inc_dirs} ${default_opt_inc_dirs} ${std_inc_dirs} ${extra_opt_inc_dirs} ${after_inc_dirs}" 

# Mimic what we do with LD_LIBRARY_PATH

set inc_path_inc_dirs = ""

if (${use_include_path}) then 
    if (-d "${MISC_INCLUDE_DIR}") then
        #
        # Hack time. Since we do not control HPC computers, we need to put
        # includes before the very first ones which will be INCLUDE ones. We
        # cannot simply put them before, because they should then be in INCLUDE
        # which could influcence something. So, we slip MISC_INCLUDE_DIR into
        # the very begining of INCLUDE. 
        #
        if ($?INCLUDE) then
            if ("${INCLUDE}" != "") then
                setenv INCLUDE "${MISC_INCLUDE_DIR}:${INCLUDE}" 
            else
                setenv INCLUDE "${MISC_INCLUDE_DIR}" 
            endif
        else
            setenv INCLUDE "${MISC_INCLUDE_DIR}" 
        endif

        if (-d "${MISC_INCLUDE_DIR}${KJB_CC}") then
            setenv INCLUDE "${MISC_INCLUDE_DIR}${KJB_CC}:${INCLUDE}" 
        endif

        if (-d "${MISC_INCLUDE_DIR}${KJB_CXX}") then
            setenv INCLUDE "${MISC_INCLUDE_DIR}${KJB_CXX}:${INCLUDE}" 
        endif
    endif

    if ($?INCLUDE) then
        ${VERBOSE_ECHO} "INCLUDE is set to: ${INCLUDE}" 

        set inc_dirs_so_far = "${inc_dirs}" 

        set try_inc_dirs = `echo $INCLUDE | sed "y/:/ /"`
        
        foreach try_inc_dir ($try_inc_dirs)
            if (-e ${try_inc_dir}) then
                set need_it = 1 
                foreach inc_dir ($inc_dirs_so_far)
                    if ("${inc_dir}" == "${try_inc_dir}") then
                        set need_it = 0
                        break
                    endif
                end 

                if (${need_it}) then
                    set inc_dirs_so_far = "${inc_dirs_so_far} ${try_inc_dir}" 

                    ${VERBOSE_ECHO} "Adding ${try_inc_dir} for library search due to INCLUDE"

                    if ("${inc_path_inc_dirs}" == "") then
                        set inc_path_inc_dirs = "${try_inc_dir}"
                    else
                        set inc_path_inc_dirs = "${inc_path_inc_dirs} ${try_inc_dir}"
                    endif
                endif
            endif
        end 

        set inc_dirs = "${inc_path_inc_dirs} ${inc_dirs}"
    endif
endif

# =============================================================================

if ($?KJB_VERBOSE) then
    echo ""
    echo "Script init_compile is looking for includes in:"
    echo "    ${inc_dirs}"
    echo " "
    echo "More specifically:"

    if (${use_include_path}) then
        echo "    inc_path_inc_dirs: ${inc_path_inc_dirs}"
    endif

    echo "    before_inc_dirs:      ${before_inc_dirs}"
    echo "    default_opt_inc_dirs: ${default_opt_inc_dirs}"
    echo "    extra_opt_inc_dirs:   ${extra_opt_inc_dirs}"
    echo "    std_inc_dirs:         ${std_inc_dirs}"
    echo "    after_inc_dirs:       ${after_inc_dirs}"
    
    echo " "
    echo "Notes:"
    echo "    If any of the possible before_inc_dirs exist, they will be included first."
    echo "    The default ones for optional libs will be included to reduce compile line mess."
    echo "    The extra ones for optional libs are used to set module specific includes to be used when needed."
    echo "    The standard ones are assumed to be included; if what is needed is there, then we do not do anything."
    echo "    The after_inc_dirs are similar to extra_opt_inc_dirs, except they are forced to be included last."
    echo " "
endif

# The next two symbols are not needed in general, but having a record of all
# include dirs is useful for debugging. Also, we sometimes set CPATH to
# KJB_CPATH to it to pass what we learn here to other build systems like
# configure and cmake. 
#
kjb_setenv ALL_INCLUDES "${inc_dirs}"
kjb_setenv KJB_CPATH `echo ${ALL_INCLUDES} | sed 's/  */:/g'`

# -----------------------------------------------------------------------------

which ldconfig >& /dev/null
if (! ${status}) then
    set  configured_load_dirs = `sh -c 'ldconfig -p 2>/dev/null' | grep '^/.*:' | sed 's/\(^[^:]*\):.*/\1/' `
    
    if ("${configured_load_dirs}" != "") then
        foreach configured_load_dir ($configured_load_dirs)
            if (-d ${configured_load_dir}) then
                # Get the real path (we don't want symlinks), and remove duplicates. 
                pushd ${configured_load_dir} > /dev/null
                    set test_dir = `pwd`
                    set found = 0
                    foreach cur_sys_load_dir (${system_load_dirs}) 
                        if ("${cur_sys_load_dir}" == "${test_dir}") then
                            set found = 1
                            break
                        endif
                    end 

                    if (! ${found}) then
                        set system_load_dirs = "${system_load_dirs}${system_ld_dirs_blank}${test_dir}"
                        set system_ld_dirs_blank = " "

                        ${VERBOSE_ECHO} "Adding ${test_dir} to library search places due to ldconfig output."
                    endif
                popd > /dev/null 
            endif
        end 
    endif 
endif

# -----------------------------------------------------------------------------

if ($?KJB_VERBOSE) then
    echo ""
    echo "Paths for searching for libraries: ${load_dirs}"
    echo ""
    echo "More specifically:"

    if (${use_ld_library_path}) then
        echo "    ld_path_load_dirs: ${ld_path_load_dirs}"
    endif

    echo "    before_load_dirs:  ${before_load_dirs}"
    echo "    user_load_dirs:    ${user_load_dirs}"
    echo "    ivilab_load_dirs:  ${ivilab_load_dirs}"
    echo "    system_load_dirs:  ${system_load_dirs}"
    echo "    after_load_dirs:   ${after_load_dirs}"
    echo " "

    if (${use_ld_library_path}) then
        echo "Note: ld_path_load_dirs is computed from LD_LIBRARY_PATH, excluding ones in other variables."
    endif
endif

# All libs is used to check if the cache is up to date. It must be set. 
#
kjb_setenv ALL_LIBS "${load_dirs}"

# 
# We set KJB_LIBRARY_PATH to it to pass what we learn
# here to other setup scripts. 
#
kjb_setenv KJB_LIBRARY_PATH `echo ${ALL_LIBS} | sed 's/  */:/g'`

# ---------------------------------------  LIB_PTHREAD  -----------------------------------------

set kjb_have_pthread = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_PTHREAD"
set lib_pthread =  ""
kjb_setenv OPTIONS_PTHREAD ""
kjb_setenv CC_FLAGS_PTHREAD "${CC_THREAD_FLAGS}"
set optional_libs = "${optional_libs} PTHREAD:pthread\.h"

set pthread_inc_dir = ""
set pthread_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libpthread\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set pthread_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${pthread_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/pthread.h) then
                set pthread_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${pthread_inc_dir}" != "") then
        set kjb_have_pthread = "-DKJB_HAVE_PTHREAD"
        set lib_pthread =  "-lpthread"

        set needed_inc_dirs = "${needed_inc_dirs} ${pthread_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${pthread_load_dir}"
        set needed_for_libs = "${needed_for_libs} PTHREAD"

        set kjb_have = "${kjb_have} ${kjb_have_pthread}"
    endif
endif

kjb_setenv KJB_HAVE_PTHREAD "${kjb_have_pthread}"
kjb_setenv LIB_PTHREAD "${lib_pthread}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_PTHREAD due to NO_LIBS"
    else if ("${KJB_HAVE_PTHREAD}" != "") then
        echo "Script init_compile found PTHREAD"
        echo "    LIB_PTHREAD: ${LIB_PTHREAD}"
        echo "    include: ${pthread_inc_dir}"
        echo "    load   : ${pthread_load_dir}"
    else
        echo "Script init_compile did NOT find PTHREAD"
    endif
endif

# ----------------------  LIB_F77 -----------------------------------

# Currently, F77 is handled as a special case as it is only used in support of
# other components. Thus there is no KJB_HAVE_F77 and no interaction with
# NO_LIBS. 
#
# We ASSUME that all F77 libraries (e.g., libgfortran, libg2c) with the same
# name are equivalent, no matter where they are found. If this is not the case,
# then it is probably easier to fix the offending libraries than make this
# script robust with respect to this! 
#
# Under this assumption, then the only issue the particular F77 library needed
# for each component. Our heuristic is to use LIB_F77, unless there is a F77
# library in the same directory as the component, in which case that library
# name is used. Again, the exact library used might be in a directory that is
# checked first---only the name is determined form the component directory. 
#
#
kjb_setenv LIB_F77 ""

kjb_setenv LIB_F77_LOAD_DIR ""

# This tells us what names to use if we need a fortran library. If there are
# more than one, then they are in heuristic priority order.  
#
set f77_strings = ""
set f77_extra_libs = ""
#
# Deal with some rare special cases first.  
#
if (${sunwspro}) then
    kjb_setenv LIB_F77 "-lF77 -lM77 -lsunmath -lm"
else if (${OS} == "hpux") then
    kjb_setenv LIB_F77 "-lf -lisamstub"
else 
    if ("${KJB_F77}" == "ifort") then
        # Hack, and probably not quite right. 
        set preferred_f77_string = "ifcore" 
        # Hack. Need to improve once what we are doing is tested.
        set f77_extra_libs = "-lpthread"
    else
        set preferred_f77_string = "${KJB_F77}"
    endif

    # More common cases. 
    # 
    # We use LIB_F77 to link against fortran libraries (e.g., lapack), and
    # success can potentially depend on both the compiler for that library, and
    # the compiler we are using to link with. Hence it seems very difficult to
    # come up with a strategy that is guaranteed to work. Here we find a library
    # for the fortran compiler, and then also include one of g2c or f2c as some
    # versions of our libraries assume that one of these exists. 
    #
    if ((${kjb_cc_is_gcc}) || (${kjb_cc_is_gxx})) then
        set f77_strings = "${preferred_f77_string} g2c f2c" 
    else 
        set f77_strings = "${preferred_f77_string} f2c g2c" 
    endif

    foreach f77_string (${f77_strings}) 
        if (("${OS}" == "mac_osx") && ("${f77_string}" == "clang")) then
            set f77_string = "gfortran"
        endif

        foreach load_dir (${load_dirs}) 
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^lib${f77_string}\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                kjb_setenv LIB_F77 "-l${f77_string} ${f77_extra_libs}"
                kjb_setenv LIB_F77_LOAD_DIR "${load_dir}" 
                break
            endif
        end

        if ("${LIB_F77}" != "") break
    end 
endif

if ($?KJB_VERBOSE) then
    echo ""

    if ("${LIB_F77}" != "") then
        echo ""
        echo "Script init_compile found lib F77"
        echo "    LIB_F77: ${LIB_F77}"
        echo "    load   : ${LIB_F77_LOAD_DIR}"
    else
        echo "Script init_compile did NOT find lib F77"
    endif
endif

# ------------------------------    XINERAMA   -------------------------------------
#
set kjb_have_xinerama = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_XINERAMA"
set lib_xinerama = ""
kjb_setenv OPTIONS_XINERAMA ""
kjb_setenv CC_FLAGS_XINERAMA ""
 
set optional_libs = "${optional_libs} XINERAMA:Xinerama\.h"

set xinerama_inc_dir = ""
set xinerama_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libXinerama\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set xinerama_load_dir = "${load_dir}"
            break
        endif

        if (-d "${load_dir}/extensions") then 
            set load_dir = "${load_dir}/extensions"

            if ("${have_lib}" != "") then
                set xinerama_load_dir = "${load_dir}"
                break
            endif
        endif
    end

    if ("${xinerama_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/X11/Xinerama.h) then
                set xinerama_inc_dir = "${inc_dir}" 
                break
            endif
        end

        if ("${xinerama_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/X11/extensions/Xinerama.h) then 
                    set xinerama_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif
    endif

    if ("${xinerama_inc_dir}" != "") then
        set kjb_have_xinerama = "-DKJB_HAVE_XINERAMA"
        set lib_xinerama = -lXinerama
        set needed_inc_dirs = "${needed_inc_dirs} ${xinerama_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${xinerama_load_dir}"
        set needed_for_libs = "${needed_for_libs} XINERAMA"

        set kjb_have = "${kjb_have} ${kjb_have_xinerama}"
    endif
endif

kjb_setenv KJB_HAVE_XINERAMA "${kjb_have_xinerama}"
kjb_setenv LIB_XINERAMA "${lib_xinerama}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_XINERAMA due to NO_LIBS"
    else if ("${KJB_HAVE_XINERAMA}" != "") then
        echo "Script init_compile found XINERAMA"
        echo "    LIB_XINERAMA: ${LIB_XINERAMA}"
        echo "    include: ${xinerama_inc_dir}"
        echo "    load   : ${xinerama_load_dir}"
    else
        echo "Script init_compile did NOT find XINERAMA"
    endif
endif

# ------------------------------    XFT   -------------------------------------
#
set kjb_have_xft = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_XFT"
set lib_xft = ""
kjb_setenv OPTIONS_XFT ""
kjb_setenv CC_FLAGS_XFT ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the XFT library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
# The backslash in "\.h" is intentional:  `man grep | grep period` is why.
set optional_libs = "${optional_libs} XFT:Xft\.h"

set xft_inc_dir = ""
set xft_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libXft\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set xft_load_dir = "${load_dir}"
            break
        endif

        if (-d ${load_dir}/Xft) then 
            set load_dir = "${load_dir}/Xft"

            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libXft\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                set xft_load_dir = "${load_dir}"
                break
            endif
        endif
    end

    if ("${xft_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/X11/Xft.h) then
                set xft_inc_dir = "${inc_dir}" 
                break
            endif
        end

        if ("${xft_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/X11/Xft/Xft.h) then 
                    set xft_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif
    endif

    if ("${xft_inc_dir}" != "") then
        set kjb_have_xft = "-DKJB_HAVE_XFT"
        set lib_xft = -lXft
        set needed_inc_dirs = "${needed_inc_dirs} ${xft_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${xft_load_dir}"
        set needed_for_libs = "${needed_for_libs} XFT"

        set kjb_have = "${kjb_have} ${kjb_have_xft}"
    endif
endif

kjb_setenv KJB_HAVE_XFT "${kjb_have_xft}"
kjb_setenv LIB_XFT "${lib_xft}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_XFT due to NO_LIBS"
    else if ("${KJB_HAVE_XFT}" != "") then
        echo "Script init_compile found XFT"
        echo "    LIB_XFT: ${LIB_XFT}"
        echo "    include: ${xft_inc_dir}"
        echo "    load   : ${xft_load_dir}"
    else
        echo "Script init_compile did NOT find XFT"
    endif
endif

# ------------------------------    FONTCONFIG   -------------------------------------
#
set kjb_have_fontconfig = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_FONTCONFIG"
set lib_fontconfig = ""
kjb_setenv OPTIONS_FONTCONFIG ""
kjb_setenv CC_FLAGS_FONTCONFIG ""
 
set optional_libs = "${optional_libs} FONTCONFIG:fontconfig\.h"

set fontconfig_inc_dir = ""
set fontconfig_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libfontconfig\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set fontconfig_load_dir = "${load_dir}"
            break
        endif

        if (-d "${load_dir}/fontconfig") then 
            set load_dir = "${load_dir}/fontconfig"

            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libfontconfig\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                set fontconfig_load_dir = "${load_dir}"
                break
            endif
        endif
    end

    if ("${fontconfig_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/fontconfig.h) then
                set fontconfig_inc_dir = "${inc_dir}" 
                break
            endif
        end

        if ("${fontconfig_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/fontconfig/fontconfig.h) then 
                    set fontconfig_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif
    endif

    if ("${fontconfig_inc_dir}" != "") then
        set kjb_have_fontconfig = "-DKJB_HAVE_FONTCONFIG"
        set lib_fontconfig = -lfontconfig

        set needed_inc_dirs = "${needed_inc_dirs} ${fontconfig_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${fontconfig_load_dir}"
        set needed_for_libs = "${needed_for_libs} FONTCONFIG"

        set kjb_have = "${kjb_have} ${kjb_have_fontconfig}"
    endif
endif

kjb_setenv KJB_HAVE_FONTCONFIG "${kjb_have_fontconfig}"
kjb_setenv LIB_FONTCONFIG "${lib_fontconfig}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_FONTCONFIG due to NO_LIBS"
    else if ("${KJB_HAVE_FONTCONFIG}" != "") then
        echo "Script init_compile found FONTCONFIG"
        echo "    LIB_FONTCONFIG: ${LIB_FONTCONFIG}"
        echo "    include: ${fontconfig_inc_dir}"
        echo "    load   : ${fontconfig_load_dir}"
    else
        echo "Script init_compile did NOT find FONTCONFIG"
    endif
endif

# -------------------------  LIB_OSMESA  ----------------------------------
#
# OSMESA preeempts CUDA and OPENGL decisions so this must be before those
# blocks. 
#

kjb_setenv OPTIONS_OSMESA ""
kjb_setenv CC_FLAGS_OSMESA ""
       
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_OSMESA"
set optional_libs = "${optional_libs} OSMESA:GL/osmesa\.h"

set kjb_have_osmesa = ""
set lib_osmesa = ""

set need_gl = 1
set use_osmesa = 0
set found_osmesa = 0 

set osmesa_inc_dir = ""
set osmesa_load_dir = ""

if (! ${NO_LIBS} && ! ${KJB_SUPPRESS_OPENGL}) then
    foreach load_dir (${load_dirs}) 
        set load_dir = "${load_dir}" 

        if (-d "${load_dir}") then
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libOSMesa\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                set have_lib = `/bin/ls -1 ${load_dir} | grep ^libGLU\\. | ${filter_non_devel}`
                if ("${have_lib}" != "") then
                    set osmesa_load_dir = "${load_dir}"
                    break
                endif
            endif
        endif
    end

    if ("${osmesa_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            set inc_dir = "${inc_dir}" 

            if (-e ${inc_dir}/GL/osmesa.h) then
                set osmesa_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

if ("${osmesa_inc_dir}" != "") then
    set found_osmesa = 1
endif

    if ((${found_osmesa}) && ($FORCE_OSMESA)) then 
#         set kjb_have_osmesa = "-DKJB_HAVE_OSMESA -DKJB_HAVE_OPENGL -DKJB_HAVE_GLUT -DKJB_HAVE_GLEW"
#         set kjb_have_osmesa = "-DKJB_HAVE_OSMESA -DKJB_HAVE_OPENGL -DKJB_HAVE_GLUT"
        set kjb_have_osmesa = "-DKJB_HAVE_OSMESA -DKJB_HAVE_OPENGL"
        set lib_osmesa = "-lOSMesa  -lGLU" 

        set needed_inc_dirs = " ${needed_inc_dirs} ${osmesa_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${osmesa_load_dir}"
        set needed_for_libs = "${needed_for_libs} OSMESA"

        set kjb_have = "${kjb_have} ${kjb_have_osmesa}"
    endif
endif

kjb_setenv KJB_HAVE_OSMESA "${kjb_have_osmesa}"
kjb_setenv LIB_OSMESA "${lib_osmesa}"

if ("${KJB_HAVE_OSMESA}" != "") then
    set need_gl = 0
    set use_osmesa = 1
endif

if ($?KJB_VERBOSE) then
    echo ""

    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_OSMESA due to NO_LIBS"
    else if (${KJB_SUPPRESS_OPENGL}) then
        echo "Script init_compile skipped LIB_OSMESA due to KJB_SUPPRESS_OPENGL"
    else if ("${KJB_HAVE_OSMESA}" != "") then
        echo "Script init_compile found OSMESA"
        echo "    LIB_OSMESA: ${LIB_OSMESA}"
        echo "    include: ${osmesa_inc_dir}"
        echo "    load   : ${osmesa_load_dir}"
    else if (${FORCE_OSMESA}) then 
        echo "Script init_compile did NOT find OSMESA despite FORCE_OSMESA being set to true."
    else if (${found_osmesa}) then 
        echo "Script init_compile found OSMESA, but it is not being used because FORCE_OSMESA is not set to true."
    else 
        echo "Script init_compile did not find OSMESA."
    endif
endif

# -----------------------------------------------------------------------------
#  CUDA
#
#  OSMESA preeempts CUDA decisions so this must be after the MESA block. 
# -----------------------------------------------------------------------------
#
set kjb_have_cuda = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_CUDA"
set lib_cuda = ""
kjb_setenv OPTIONS_CUDA ""
kjb_setenv CC_FLAGS_CUDA ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the CUDA library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} CUDA:cuda\.h"
set gpu_enabled_libs = "${gpu_enabled_libs} cuda\.h"

set cuda_inc_dir = ""
set cuda_load_dir = ""

if ((! ${NO_LIBS}) && (! ${KJB_SUPPRESS_CUDA}) && (! ${use_osmesa})) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep libcuda\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set cuda_load_dir = "${load_dir}"
            break
        endif
    end
 
    if ("${cuda_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/cuda.h) then
                set cuda_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all of them (i.e., breadth-first search).
        #
        if ("${cuda_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/cuda/cuda.h) then 
                    set cuda_inc_dir = "${inc_dir}/cuda" 
                    break
                endif
            end
        endif
    endif

    if ("${cuda_inc_dir}" != "") then
        set kjb_have_cuda = "-DKJB_HAVE_CUDA"
        set lib_cuda = -lcuda
        # or, if CUDA depends on YYY then instead of the above,
        # do something like set lib_cuda = "-lcuda ${LIB_YYY}"
        # so that you link every library that your cuda-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${cuda_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${cuda_load_dir}"
        set needed_for_libs = "${needed_for_libs} CUDA"

        set kjb_have = "${kjb_have} ${kjb_have_cuda}"
    endif
endif

kjb_setenv KJB_HAVE_CUDA "${kjb_have_cuda}"
kjb_setenv LIB_CUDA "${lib_cuda}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_CUDA due to NO_LIBS"
    else if (${KJB_SUPPRESS_CUDA}) then
        echo "Script init_compile skipped LIB_CUDA due to KJB_SUPPRESS_CUDA"
   else if (${use_osmesa}) then
       echo "Script init_compile skipped LIB_CUDA beause we are using OSMESA."
    else if ("${KJB_HAVE_CUDA}" != "") then
        echo "Script init_compile found CUDA"
        echo "    LIB_CUDA: ${LIB_CUDA}"
        echo "    include: ${cuda_inc_dir}"
        echo "    load   : ${cuda_load_dir}"
    else
        echo "Script init_compile did NOT find CUDA"
    endif
endif

# -----------------------------------------------------------------------------
#  CUDART
#
#  OSMESA preeempts CUDA decisions so this must be after the MESA block. 
# -----------------------------------------------------------------------------
#
set kjb_have_cudart = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_CUDART"
set lib_cudart = ""
kjb_setenv OPTIONS_CUDART ""
kjb_setenv CC_FLAGS_CUDART ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the CUDART library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} CUDART:cuda_runtime.*\.h"
set gpu_enabled_libs = "${gpu_enabled_libs} cuda_runtime\.h"

set cudart_inc_dir = ""
set cudart_load_dir = ""

if ((! ${NO_LIBS}) && (! ${KJB_SUPPRESS_CUDA}) && (! ${use_osmesa})) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep libcudart\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set cudart_load_dir = "${load_dir}"
            break
        endif
    end
 
    if ("${cudart_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/cuda_runtime.h) then
                set cudart_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all of them (i.e., breadth-first search).
        #
        if ("${cudart_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/cuda/cuda_runtime.h) then 
                    set cudart_inc_dir = "${inc_dir}/cuda" 
                    break
                endif
            end
        endif
    endif

    if ("${cudart_inc_dir}" != "") then
        set kjb_have_cudart = "-DKJB_HAVE_CUDART"
        set lib_cudart = -lcudart
        # or, if CUDART depends on YYY then instead of the above,
        # do something like set lib_cudart = "-lcudart ${LIB_YYY}"
        # so that you link every library that your cudart-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${cudart_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${cudart_load_dir}"
        set needed_for_libs = "${needed_for_libs} CUDART"

        set kjb_have = "${kjb_have} ${kjb_have_cudart}"
    endif
endif

kjb_setenv KJB_HAVE_CUDART "${kjb_have_cudart}"
kjb_setenv LIB_CUDART "${lib_cudart}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_CUDART due to NO_LIBS"
    else if (${KJB_SUPPRESS_CUDA}) then
        echo "Script init_compile skipped LIB_CUDART due to KJB_SUPPRESS_CUDA"
   else if (${use_osmesa}) then
       echo "Script init_compile skipped LIB_CUDART beause we are using OSMESA."
    else if ("${KJB_HAVE_CUDART}" != "") then
        echo "Script init_compile found CUDART"
        echo "    LIB_CUDART: ${LIB_CUDART}"
        echo "    include: ${cudart_inc_dir}"
        echo "    load   : ${cudart_load_dir}"
    else
        echo "Script init_compile did NOT find CUDART"
    endif
endif

# -----------------------------------------------------------------------------
#   LIBCUDPP - Cuda Data Performance Primitives
#
#   OSMESA preeempts CUDA decisions so this must be after the MESA block. 
# -----------------------------------------------------------------------------
#
set kjb_have_cudpp = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_CUDPP"
set lib_cudpp = ""
kjb_setenv OPTIONS_CUDPP ""
kjb_setenv CC_FLAGS_CUDPP ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the CUDPP library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} CUDPP:cudpp\.h"
set gpu_enabled_libs = "${gpu_enabled_libs} cudpp\.h"

set cudpp_inc_dir = ""
set cudpp_load_dir = ""

if ((! ${NO_LIBS}) && (! ${KJB_SUPPRESS_CUDA}) && (! ${use_osmesa})) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libcudpp\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set cudpp_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${cudpp_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/cudpp.h) then
                set cudpp_inc_dir = "${inc_dir}" 
                break
            endif
        end

    endif

    if ("${cudpp_inc_dir}" != "") then
        set kjb_have_cudpp = "-DKJB_HAVE_CUDPP"
        set lib_cudpp = "-lcudpp -lcudart"
        # or, if CUDPP depends on YYY then instead of the above,
        # do something like set lib_cudpp = "-lcudpp ${LIB_YYY}"
        # so that you link every library that your cudpp-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${cudpp_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${cudpp_load_dir}"
        set needed_for_libs = "${needed_for_libs} CUDPP"

        set kjb_have = "${kjb_have} ${kjb_have_cudpp}"
    endif
endif

kjb_setenv KJB_HAVE_CUDPP "${kjb_have_cudpp}"
kjb_setenv LIB_CUDPP "${lib_cudpp}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_CUDPP due to NO_LIBS"
    else if (${KJB_SUPPRESS_CUDA}) then
        echo "Script init_compile skipped LIB_CUDPP due to KJB_SUPPRESS_CUDA"
   else if (${use_osmesa}) then
       echo "Script init_compile skipped LIB_CUDPP beause we are using OSMESA."
    else if ("${KJB_HAVE_CUDPP}" != "") then
        echo "Script init_compile found CUDPP"
        echo "    LIB_CUDPP: ${LIB_CUDPP}"
        echo "    include: ${cudpp_inc_dir}"
        echo "    load   : ${cudpp_load_dir}"
    else
        echo "Script init_compile did NOT find CUDPP"
    endif
endif

# -----------------------------------------------------------------------------
#  LIBCUDCVT - Cuda Computer Vision Tools
#
#  OSMESA preeempts CUDA decisions so this must be after the MESA block. 
# -----------------------------------------------------------------------------
#
set kjb_have_cudcvt = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_CUDCVT"
set lib_cudcvt = ""
kjb_setenv OPTIONS_CUDCVT ""
kjb_setenv CC_FLAGS_CUDCVT ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the CUDCVT library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} CUDCVT:cudcvt/.*h"
set gpu_enabled_libs = "${gpu_enabled_libs} cudcvt\.h"

set cudcvt_inc_dir = ""
set cudcvt_load_dir = ""

if ((! ${NO_LIBS}) && (! ${KJB_SUPPRESS_CUDA}) && (! ${use_osmesa})) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libcudcvt\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set cudcvt_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${cudcvt_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/cudcvt/util.h) then
                set cudcvt_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${cudcvt_inc_dir}" != "") then
        set kjb_have_cudcvt = "-DKJB_HAVE_CUDCVT"
        set lib_cudcvt = "-lcudcvt -lcudart"
        # or, if CUDCVT depends on YYY then instead of the above,
        # do something like set lib_cudcvt = "-lcudcvt ${LIB_YYY}"
        # so that you link every library that your cudcvt-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${cudcvt_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${cudcvt_load_dir}"
        set needed_for_libs = "${needed_for_libs} CUDCVT"

        set kjb_have = "${kjb_have} ${kjb_have_cudcvt}"
    endif
endif

kjb_setenv KJB_HAVE_CUDCVT "${kjb_have_cudcvt}"
kjb_setenv LIB_CUDCVT "${lib_cudcvt}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_CUDCVT due to NO_LIBS."
    else if ("${KJB_HAVE_CUDART}" == "") then
        echo "Script init_compile skipped LIB_CUDCVT due to missing dependency CUDART."
    else if (${KJB_SUPPRESS_CUDA}) then
        echo "Script init_compile skipped LIB_CUDCVT due to KJB_SUPPRESS_CUDA"
   else if (${use_osmesa}) then
       echo "Script init_compile skipped LIB_CUDCVT beause we are using OSMESA."
    else if ("${KJB_HAVE_CUDCVT}" != "") then
        echo "Script init_compile found CUDCVT"
        echo "    LIB_CUDCVT: ${LIB_CUDCVT}"
        echo "    include: ${cudcvt_inc_dir}"
        echo "    load   : ${cudcvt_load_dir}"
    else
        echo "Script init_compile did NOT find CUDCVT"
    endif
endif

# ---------------------------------  OPENGL -----------------------------------
#  
# OSMESA preeempts OPENGL decisions so this must be after the MESA block. 
#
# Currently we insist on finding both GL and GLU. I am not sure
# if this always makes sense.
#

set kjb_have_opengl = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_OPENGL"
set lib_opengl = ""
kjb_setenv OPTIONS_OPENGL ""
kjb_setenv CC_FLAGS_OPENGL ""
#
# Having additional library signatures is OK.
#
set optional_libs = "${optional_libs} OPENGL:GL/gl\.h"
set optional_libs = "${optional_libs} OPENGL:GL/glu\.h"
set optional_libs = "${optional_libs} OPENGL:OpenGL/gl\.h"
set optional_libs = "${optional_libs} OPENGL:OpenGL/glu\.h"

set opengl_inc_dir = ""
set opengl_load_dir = ""

if ((! ${NO_LIBS}) && (! ${KJB_SUPPRESS_OPENGL}) && (${need_gl})) then
   # Currently hacked as a special case.
   if ("${OS}" == "mac_osx") then
       if ("${LIB_X11}" != "") then
           set lib_opengl = "-framework OpenGL -lXmu -lXi"
       else
           # last ditch effort 
           # When do we need Xmu or Xi? They are not always there.
           set lib_opengl = "-framework OpenGL "
       endif
       set kjb_have_opengl = "-DKJB_HAVE_OPENGL"
   else if ("${LIB_X11}" != "") then
       #
       # At some point it seemed that some systems supported linking with a
       # .so.VERSION but not a .so linked to it, but this was either an
       # erroneous conclusion or perhaps some user specific environment
       # variable.  We decided that the real problem is that if one does not
       # install the "development" version of a library package on some systems
       # such as Ubuntu, then you do not get the links presumably because you
       # only "use" code, and don't compile it, and the code that was build by
       # others knows which library it wants.  So, I am going back to allowing
       # .so, but not .so.VERSION.
       #
       # foreach dynamic_str ('\.a$' '\.so$' '\.so')
       foreach dynamic_str ('\.a$' '\.so$' '\.dylib$') 
           foreach load_dir (${load_dirs})
               set have_lib = `/bin/ls -1 ${load_dir} | grep ^libGL${dynamic_str}`
               set have_lib_2 = `/bin/ls -1 ${load_dir} | grep ^libGLU${dynamic_str}`

               if (("${have_lib}" != "") && ("${have_lib_2}" != "") ) then
                   set opengl_load_dir = "${load_dir}"
                   break
               endif
            end

            if ("${opengl_load_dir}" != "") break
       end

       if ("${opengl_load_dir}" != "") then
           foreach inc_dir (${inc_dirs})
               if ((-e ${inc_dir}/GL/gl.h) && (-e ${inc_dir}/GL/glu.h)) then
                   set opengl_inc_dir = "${inc_dir}"
                   break
               endif
           end
       endif

       if ("${opengl_inc_dir}" != "") then
           set kjb_have_opengl = "-DKJB_HAVE_OPENGL"
           set opengl_load_dir = "${opengl_load_dir}:${x_load_dir}"

           # When do we need Xmu or Xi? They are not always there.
           #
           # set lib_opengl = "-lGL -lGLU ${LIB_X11} -lXmu -lXi"
           
           # Definitely hacking here! There is an issue with Ubuntu gnu
           # shared libraries in  /usr/lib/x86_64-linux-gnu. Manhy have so
           # symbols, but the *.a are there. But this means we need the libs. 

           set lib_opengl = "-lGL -lGLU"

           if ($?UBUNTU_RELEASE) then
               if ("${UBUNTU_RELEASE}" == "14.04") then
                   set lib_opengl = "${lib_opengl} -lxcb -lXau -lXdmcp"
               endif
           endif

           set lib_opengl = "${lib_opengl} ${LIB_X11}"

           set needed_inc_dirs = "${needed_inc_dirs} ${opengl_inc_dir}"
           set needed_load_dirs = "${needed_load_dirs} ${opengl_load_dir}"
           set needed_for_libs = "${needed_for_libs} OPENGL"

           set kjb_have = "${kjb_have} ${kjb_have_opengl}"
       endif
   endif
endif

kjb_setenv KJB_HAVE_OPENGL "${kjb_have_opengl}"
kjb_setenv LIB_OPENGL "${lib_opengl}"

if ($?KJB_VERBOSE) then
   echo ""
   if (${NO_LIBS}) then
       echo "Script init_compile skipped LIB_OPENGL due to NO_LIBS"
   else if (${KJB_SUPPRESS_OPENGL}) then
       echo "Script init_compile skipped LIB_OPENGL due to KJB_SUPPRESS_OPENGL"
   else if (! ${need_gl}) then
       echo "Script init_compile skipped LIB_OPENGL beause we are using OSMESA."
   else if ("${LIB_X11}" == "") then
       echo "Script init_compile skipped LIB_OPENGL due to missing dependency LIB_X11."
   else if ("${KJB_HAVE_OPENGL}" != "") then
       echo "Script init_compile found OPENGL"
       echo "    LIB_OPENGL: ${LIB_OPENGL}"
       echo "    include: ${opengl_inc_dir}"
       echo "    load   : ${opengl_load_dir}"
   else
       echo "Script init_compile did NOT find OPENGL"
   endif
endif

# -----------------------------------------------------------------------------
# GLUT  (Depends on OPENGL)
#
# OSMESA and OPENGL affects GLUT decisions so this must be after both MESA and
# OPENGL. 
#
# -----------------------------------------------------------------------------

set kjb_have_glut = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_GLUT"
set lib_glut = ""
kjb_setenv OPTIONS_GLUT ""
kjb_setenv CC_FLAGS_GLUT ""

# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the GLUT library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example.
#
set optional_libs = "${optional_libs} GLUT:GL/glut\.h"
set optional_libs = "${optional_libs} GLUT:GLUT/glut\.h"

set glut_inc_dir = ""
set glut_load_dir = ""

if ((! ${NO_LIBS}) && ("${KJB_HAVE_OPENGL}" != "") && (! ${KJB_SUPPRESS_OPENGL}) && (! ${KJB_SUPPRESS_GLUT}) && (${need_gl})) then
   # Currently hacked as a special case.
   if ("${OS}" == "mac_osx") then
       set lib_glut = "-framework GLUT"
       set kjb_have_glut = "-DKJB_HAVE_GLUT"
   else if ("${LIB_OPENGL}" != "") then
       foreach load_dir (${load_dirs})
           set have_lib = `/bin/ls -1 ${load_dir} | grep ^libglut\\. | ${filter_non_devel}`

           if ("${have_lib}" != "") then
               set glut_load_dir = "${load_dir}"
               break
           endif
       end

       if ("${glut_load_dir}" != "") then
           foreach inc_dir (${inc_dirs})
               if (-e ${inc_dir}/GL/glut.h) then
                   set glut_inc_dir = "${inc_dir}"
                   break
               endif
           end
       endif

       if ("${glut_inc_dir}" != "") then
           set kjb_have_glut = "-DKJB_HAVE_GLUT"
           set glut_load_dir = "${glut_load_dir}:${opengl_load_dir}"

           # Can we use LIB_OPENGL after '-lglut'? This might be a mesa issue,
           # so I am not touching it. 
           #
           set lib_glut = "-lglut -lGL -lGLU"

           # If GLUT depends on YYY then instead of the above,
           # do something like set lib_glut = "-lglut ${LIB_YYY}"
           # so that you link every library that your glut-dependent code requires.

           # Adding this because on v11 the opengl depends might have trouble
           # like we know opengl has.
           #
           if ($?UBUNTU_RELEASE) then
               if ("${UBUNTU_RELEASE}" == "14.04") then
                   set lib_glut = "${lib_glut} -lxcb -lXau -lXdmcp"
               endif
           endif

           set needed_inc_dirs = "${needed_inc_dirs} ${glut_inc_dir}"
           set needed_load_dirs = "${needed_load_dirs} ${glut_load_dir}"
           set needed_for_libs = "${needed_for_libs} GLUT"

           set kjb_have = "${kjb_have} ${kjb_have_glut}"
       endif
   endif
endif

kjb_setenv KJB_HAVE_GLUT "${kjb_have_glut}"
kjb_setenv LIB_GLUT "${lib_glut}"

if ($?KJB_VERBOSE) then
   echo ""
   if (${NO_LIBS}) then
       echo "Script init_compile skipped LIB_GLUT due to NO_LIBS"
   else if (${KJB_SUPPRESS_GLUT}) then
       echo "Script init_compile skipped LIB_GLUT due to KJB_SUPPRESS_GLUT"
   else if (${KJB_SUPPRESS_OPENGL}) then
       echo "Script init_compile skipped LIB_GLUT due to KJB_SUPPRESS_OPENGL"
   else if (! ${need_gl}) then
       echo "Script init_compile skipped LIB_GLUT beause we are using OSMESA."
   else if ("${KJB_HAVE_OPENGL}" == "") then
       echo "Script init_compile skipped LIB_GLUT because opengl not present."
   else if ("${KJB_HAVE_GLUT}" != "") then
       echo "Script init_compile found GLUT"
       echo "    LIB_GLUT: ${LIB_GLUT}"
       echo "    include: ${glut_inc_dir}"
       echo "    load   : ${glut_load_dir}"
   else
       echo "Script init_compile did NOT find GLUT"
   endif
endif

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# GLEW (opengl extension wrangler) 
# -----------------------------------------------------------------------------
#
set kjb_have_glew = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_GLEW"
set lib_glew = ""
kjb_setenv OPTIONS_GLEW ""
kjb_setenv CC_FLAGS_GLEW ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the GLEW library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} GLEW:GL/glew\.h"

set glew_inc_dir = ""
set glew_load_dir = ""

if ((! ${NO_LIBS}) && ("${KJB_HAVE_OPENGL}" != "") && (${need_gl})) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep libGLEW\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set glew_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${glew_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/GL/glew.h) then
                set glew_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${glew_inc_dir}" != "") then
        set kjb_have_glew = "-DKJB_HAVE_GLEW"
        set lib_glew = -lGLEW
        # or, if GLEW depends on YYY then instead of the above,
        # do something like set lib_glew = "-lGLEW ${LIB_YYY}"
        # so that you link every library that your glew-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${glew_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${glew_load_dir}"
        set needed_for_libs = "${needed_for_libs} GLEW"

        set kjb_have = "${kjb_have} ${kjb_have_glew}"
    endif
endif

kjb_setenv KJB_HAVE_GLEW "${kjb_have_glew}"
kjb_setenv LIB_GLEW "${lib_glew}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_GLEW due to NO_LIBS"
   else if (${KJB_SUPPRESS_OPENGL}) then
       echo "Script init_compile skipped LIB_GLEW due to KJB_SUPPRESS_OPENGL"
   else if (! ${need_gl}) then
       echo "Script init_compile skipped LIB_GLEW beause we are using OSMESA."
    else if ("${KJB_HAVE_OPENGL}" == "") then
        echo "Script init_compile skipped LIB_GLEW because opengl not present."
    else if ("${KJB_HAVE_GLEW}" != "") then
        echo "Script init_compile found GLEW"
        echo "    LIB_GLEW: ${LIB_GLEW}"
        echo "    include: ${glew_inc_dir}"
        echo "    load   : ${glew_load_dir}"
    else
        echo "Script init_compile did NOT find GLEW"
    endif
endif

# -----------------------------------------------------------------------------

# -----------------------------  CURSES  --------------------------------------

set curses_flavors = "ncursesw ncurses curses"
set kjb_have_curses = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_CURSES"
set lib_curses = ""
kjb_setenv OPTIONS_CURSES ""
kjb_setenv CC_FLAGS_CURSES ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} CURSES:curses\.h"

set curses_inc_dir = ""
set curses_load_dir = ""

#
# We must use LIB_CURSES, even if NO_LIBS is set because the library code is not
# yet protected from it being missing.
#
# if (! ${NO_LIBS})  then
#
foreach curses (${curses_flavors}) 
    #
    # At some point it seemed that some systems supported linking with a .so.VERSION
    # but not a .so linked to it, but this was either an erroneous conclusion or
    # perhaps some user specific environment variable. We decided that the real
    # problem is that if one does not install the "development" version of a
    # library package on some systems such as Ubuntu, then you do not get the
    # links presumably because you only "use" code, and don't compile it, and
    # the code that was build by others knows which library it wants. So, I am
    # going back to allowing .so, but not .so.VERSION. 
    #
    # foreach dynamic_str ('\.a$' '\.so$' '\.so') 
    #
    # The last one (dylib) is for the mac. Likely we should use this for some
    # other libraries also, so reduce the number of MAC_OSX special cases. 
    #
    foreach dynamic_str ('\.a$' '\.so$' '\.dylib$') 
        foreach load_dir (${load_dirs}) 
            # set curses = `echo ${lib_curses} | sed 's/^-l//'`
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^lib${curses}${dynamic_str}`

            if ("${have_lib}" != "") then
                set curses_load_dir = "${load_dir}"
                break
            endif
        end

        if ("${curses_load_dir}" != "") break
    end 

    if ("${curses_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/curses.h) then
                set curses_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${curses_inc_dir}" != "") then
        set lib_curses = "-l${curses}" 
        set kjb_have_curses = "-DKJB_HAVE_CURSES"
        set kjb_have = "${kjb_have} ${kjb_have_curses}"

        set needed_inc_dirs = "${needed_inc_dirs} ${curses_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${curses_load_dir}"
        set needed_for_libs = "${needed_for_libs} CURSES"

        break
    endif
end 

kjb_setenv KJB_HAVE_CURSES "${kjb_have_curses}"
kjb_setenv LIB_CURSES "${lib_curses}"

if ($?KJB_VERBOSE) then
    # Note that this is not quite the canonical pattern for this verbose
    # reporting block because CURSES is an exception for NO_LIBS. 
    
    echo ""

    if ("${KJB_HAVE_CURSES}" != "") then
        echo "Script init_compile found CURSES"
        echo "    LIB_CURSES: ${LIB_CURSES}"
        echo "    include: ${curses_inc_dir}"
        echo "    load   : ${curses_load_dir}"

        if (${NO_LIBS}) then
            echo ""
            echo "Note that we ignore NO_LIBS for curses."
            echo "This is because the 'l' sub-lib has not been instrumented to deal without curses."
            echo ""
        endif
    else
        echo "Script init_compile did NOT find CURSES"
    endif
endif

# --------------------------- OPENSSL ------------------------------

set kjb_have_openssl = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_OPENSSL"
set lib_openssl = ""
kjb_setenv OPTIONS_OPENSSL ""
kjb_setenv CC_FLAGS_OPENSSL ""
 
set optional_libs = "${optional_libs} OPENSSL:openssl/.*\.h"

set openssl_inc_dir = ""
set openssl_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libssl\\. | ${filter_non_devel}`
        # AMP:  libssl.so used to be enough, but OpenSSL must recently have
        # split off the cryptographic hash code into a sep. lib, libcrypto.so.
        # Requiring it now MIGHT CAUSE A PROB. if older systems lack libcrypto.
        set have_lib_2 = `/bin/ls -1 ${load_dir} | grep ^libcrypto\\. | ${filter_non_devel}`

        if (("${have_lib}" != "") && ("${have_lib_2}" != "")) then
            set openssl_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${openssl_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/openssl/evp.h) then # evp.h is a representative
                set openssl_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${openssl_inc_dir}" != "") then
        set kjb_have_openssl = "-DKJB_HAVE_OPENSSL"
        set lib_openssl = "-lssl -lcrypto"
        # Actually we don't even use the SSL part as of yet, just the crypto.
        # So let's cheat, and omit the -lssl until we start to need it.
        set lib_openssl = "-lcrypto"
        set needed_inc_dirs = "${needed_inc_dirs} ${openssl_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${openssl_load_dir}"
        set needed_for_libs = "${needed_for_libs} OPENSSL"

        set kjb_have = "${kjb_have} ${kjb_have_openssl}"
    endif
endif

kjb_setenv KJB_HAVE_OPENSSL "${kjb_have_openssl}"
kjb_setenv LIB_OPENSSL "${lib_openssl}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_OPENSSL due to NO_LIBS"
    else if ("${KJB_HAVE_OPENSSL}" != "") then
        echo "Script init_compile found OPENSSL"
        echo "    LIB_OPENSSL: ${LIB_OPENSSL}"
        echo "    include: ${openssl_inc_dir}"
        echo "    load   : ${openssl_load_dir}"
    else
        echo "Script init_compile did NOT find OPENSSL"
    endif
endif

# -----------------------------------------------------------------------------

#
# Process the rest of the optional libraries. Ones that are depended on must
# occur before the ones that depend on them, so that the dependency can be added
# to the library string (if it exists), or the library with the dependency can
# be omitted (if the dependency does not exist). 

# -----------------------------------------------------------------------------

set kjb_have_lapack = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_LAPACK"
set lib_lapack = ""
kjb_setenv OPTIONS_LAPACK ""
kjb_setenv CC_FLAGS_LAPACK ""
set optional_libs = "${optional_libs} LAPACK:lapack\.h"
set optional_libs = "${optional_libs} LAPACK:mkl_lapack\.h"
set optional_libs = "${optional_libs} LAPACK:acml\.h"

set lapack_str = ""
set lapack_load_dir = ""
set lapack_inc_dir = ""
set lapack_f77_lib = ""
set lapack_f77_dir = ""
set alt_lapack_inc_dir = ""  # previously acml_inc_dir

if (! ${NO_LIBS}) then
    if (("${MACHINE}" == "linux_x86_64_opteron") && ( ! ${ALT_LIBS})) then
        foreach load_dir (${load_dirs}) 
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libacml\\. | ${filter_non_devel}`
            set have_lib_2 = `/bin/ls -1 ${load_dir} | grep ^libacml_mv\.`

            if (("${have_lib}" != "") && ("${have_lib_2}" != "")) then
                set lapack_load_dir = "${load_dir}"
                set have_lapack = "-DKJB_HAVE_LAPACK -DLAPACK_IS_ACML"
                set lib_lapack = "-lacml -lacml_mv -lblas"
                break
            endif
        end

        #
        # Presumably, if we have the define LAPACK_IS_ACML, then we might
        # include acml.h from lapack.h. Thus both should exist. We check for
        # lapack.h later. 
        #
        if ("${lapack_load_dir}" != "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/acml.h) then 
                    set alt_lapack_inc_dir = "${inc_dir}" 
                    break
                endif
            end
            
            if ("${alt_lapack_inc_dir}" == "") then
                set lapack_load_dir = ""
            endif
        endif
    endif

    #
    # Next, check for MKL version. 
    #
    if (("${lapack_load_dir}" == "") && (("${MACHINE}" == "linux_x86_64_i7") || ("${MACHINE}" == "linux_x86_64_xeon")) && ( ! ${ALT_LIBS} )) then
        foreach load_dir (${load_dirs}) 
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libmkl_lapack95_lp64\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                set lapack_load_dir = "${load_dir}"
                set have_lapack = "-DKJB_HAVE_LAPACK -DLAPACK_IS_MKL"
                # Hack, and probably not quite right. The 
                set lib_lapack = "-lmkl_lapack95_lp64 -lmkl_blas95_lp64 -lmkl_gf_lp64 -lmkl_core -lmkl_gnu_thread -lgomp"

                break
            endif
        end

        if ("${lapack_load_dir}" != "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/mkl.h) then 
                    set alt_lapack_inc_dir = "${inc_dir}" 
                    break
                endif
            end
            
            if ("${alt_lapack_inc_dir}" == "") then
                set lapack_load_dir = ""
            endif
        endif
    endif

    # Next, check for Atlas version. 
    #
    if (("${lapack_load_dir}" == "") && ( ! ${ALT_LIBS} )) then
        foreach load_dir (${load_dirs}) 
            set have_lib =   `/bin/ls -1 ${load_dir} | grep ^liblapack-atlas\\. | ${filter_non_devel}`
            set have_lib_2 = `/bin/ls -1 ${load_dir} | grep ^libatlas\\. | ${filter_non_devel}`
            set have_lib_3 = `/bin/ls -1 ${load_dir} | grep ^libcblas-atlas\\. | ${filter_non_devel}`
            set have_lib_4 = `/bin/ls -1 ${load_dir} | grep ^libf77blas-atlas\\. | ${filter_non_devel}`

            if (("${have_lib}" != "") && ("${have_lib_2}" != "") && ("${have_lib_3}" != "") && ("${have_lib_4}" != "")) then
                set lapack_load_dir = "${load_dir}"
                set lib_lapack = "-llapack-atlas -lcblas-atlas -lf77blas-atlas -latlas"
                set have_lapack = "-DKJB_HAVE_LAPACK -DLAPACK_IS_ATLAS"
                break
            endif
        end
    endif

    # 
    #  Now check the generic version. 
    #
    if ("${lapack_load_dir}" == "") then
        foreach load_dir (${load_dirs})
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^liblapack\\. | ${filter_non_devel}`
            set have_lib_2 = `/bin/ls -1 ${load_dir} | grep ^libblas\\. | ${filter_non_devel}`

            if (("${have_lib}" != "") && ("${have_lib_2}" != "")) then
                set lapack_load_dir = "${load_dir}"
                set lib_lapack = "-llapack -lblas"
                set have_lapack = "-DKJB_HAVE_LAPACK"
                break
            endif
        end

    endif

    # FIXED? Previous code follows (commented out). 
    if ("${lapack_load_dir}" != "") then
        if ("${alt_lapack_inc_dir}" != "") then
            set lapack_inc_dir = "${alt_lapack_inc_dir}:${inc_dir}" 
        else 
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/lapack.h) then 
                    set lapack_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif
    endif

#     # Broken because we do not care about lapack.h in the alternative case.
#     # FIXME
#     if ("${lapack_load_dir}" != "") then
#         foreach inc_dir (${inc_dirs}) 
#             if (-e ${inc_dir}/lapack.h) then 
#                 if ("${alt_lapack_inc_dir}" == "") then
#                     set lapack_inc_dir = "${inc_dir}" 
#                 else
#                     set lapack_inc_dir = "${alt_lapack_inc_dir}:${inc_dir}" 
#                 endif
# 
#                 break
#             endif
#         end
#     endif

    #
    # Now we need the fortran library. We preferentially look for it in the same
    # place as the library that needs it. This is more complicated than simply
    # finding a fortran library independently, but necessary because different
    # libraries may need different version of the fortran library. 
    #
    if (("${lapack_inc_dir}" != "") && ("${lapack_load_dir}" != "")) then
        # We add f77lapack for Mac OS. 
        foreach f77_string (${f77_strings} f77lapack) 
            set have_lib = `/bin/ls -1 ${lapack_load_dir} | grep ^lib${f77_string}\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                set lapack_f77_lib = "-l${f77_string}"
                set lapack_f77_dir = "" 
                break
            endif
        end 

        if (("${lapack_f77_lib}" == "") && ("${LIB_F77}" != "")) then
            set lapack_f77_lib = "${LIB_F77}"
            set lapack_f77_dir = "${LIB_F77_LOAD_DIR}" 
        endif
    endif

    if ("${lapack_f77_lib}" != "") then
        set lib_lapack = "${lib_lapack} ${lapack_f77_lib}"
        set kjb_have_lapack = "${have_lapack}" 

        if ("${lapack_f77_dir}" != "") then
            set lapack_load_dir = "${lapack_load_dir}:${lapack_f77_dir}"
        endif
            
        set needed_inc_dirs = "${needed_inc_dirs} ${lapack_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${lapack_load_dir}"
        set needed_for_libs = "${needed_for_libs} LAPACK"
    endif
    
    if (("${lib_lapack}" == "") && ("${OS}" == "mac_osx")) then
        set kjb_have_lapack = "-DKJB_HAVE_LAPACK -DMAC_OSX_VECLIB_LAPACK"
        set lib_lapack = "-framework vecLib"
        set lapack_inc_dir = "Default for framework"
        #set lapack_inc_dir = "/System/Library/Frameworks/vecLib.framework/Headers/" 
    endif

    if ("${kjb_have_lapack}" != "") then
        set kjb_have = "${kjb_have} ${kjb_have_lapack}"
    endif
endif

kjb_setenv KJB_HAVE_LAPACK "${kjb_have_lapack}"
kjb_setenv LIB_LAPACK "${lib_lapack}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_LAPACK due to NO_LIBS"
    else if ("${KJB_HAVE_LAPACK}" != "") then
        echo "Script init_compile found LAPACK"
        echo "    LIB_LAPACK: ${LIB_LAPACK}"
        echo "    include: ${lapack_inc_dir}"
        echo "    load   : ${lapack_load_dir}"
    else if (("${lapack_inc_dir}" != "") && ("${lapack_f77_lib}" == "")) then
        echo "Script init_compile found LAPACK but NOT needed F77 library"
        echo "LAPACK is thus not used." 
    else
        echo "Script init_compile did NOT find LAPACK"
    endif
endif

# -----------------------------------------------------------------------------

# Kobus. Best if there is no LIB_BLAS unless we use it directly. Otherwise, we
# attach it to the lib needing it, because different libs may prefer different
# blas's. 
#
# In case we need BLAS for something other than LAPACK, we simplify our lives by
# just linking against LAPACK, since 
# we synchronize LAPACK and BLAS. Perhaps later we will make BLAS a standalone
# entity, and make LAPACK depend on it. , and so do not use the BLAS found here (for now). 
#

# kjb_setenv LIB_BLAS "${LIB_LAPACK}" 

# -----------------------------------------------------------------------------

#
# F2C is already used by many libraries, especially when Fortran libraries are
# used in a GNU environment. What follows is for other code that actually tries
# to include f2c.h (or g2c.h) directly, which is not the standard way we do
# things, but sometimes we do this. For example, the ncuts code does this. Thus
# we need to say where to find it.
#
# We handle g2c and f2c as alternatives for F2C. If either is found, then we
# assume that F2C is needed to build the source. Recall that that the
# optional_libs symbol is used for building makefiles that must be valid for
# other platforms, whereas symbols like LIB_F2C give values for the specific
# compile platform. 
#

set kjb_have_f2c = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_F2C"
set lib_f2c =  ""

## Now set automatically at the end, and only if needed.
### kjb_setenv INCLUDE_F2C ""

kjb_setenv OPTIONS_F2C ""
kjb_setenv CC_FLAGS_F2C ""
set optional_libs = "${optional_libs} F2C:f2c\.h"
set optional_libs = "${optional_libs} F2C:g2c\.h"

set f2c_inc_dir = ""
set f2c_load_dir = ""

if (! ${NO_LIBS} ) then
    if ((${kjb_cc_is_gcc}) || (${kjb_cc_is_gxx})) then
        #
        # g2c first, because if both are there, we generally want g2c. 
        #
        set f2c_alts = "g2c f2c"
    else
        set f2c_alts = "f2c g2c"
    endif
        
    foreach f2c (${f2c_alts}) 
        foreach load_dir (${load_dirs})
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^lib${f2c}\\. | ${filter_non_devel}`
            if ("${have_lib}" != "") then
                set f2c_load_dir = "${load_dir}"
                set have_f2c = "-DKJB_HAVE_F2C -DKJB_F2C_IS_${f2c}"
                set lib_f2c  = "-l${f2c}"
                break
            endif
        end

        if ("${f2c_load_dir}" != "") then
            foreach inc_dir (${inc_dirs})
                if (-e ${inc_dir}/${f2c}.h) then
                    set f2c_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif

        if ("${f2c_inc_dir}" != "") break
    end

    if ("${f2c_inc_dir}" != "") then
        set kjb_have_f2c = "${have_f2c}"
        set lib_f2c =  "${lib_f2c}"

        set needed_inc_dirs = "${needed_inc_dirs} ${f2c_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${f2c_load_dir}"
        set needed_for_libs = "${needed_for_libs} F2C"

        set kjb_have = "${kjb_have} ${kjb_have_f2c}"
    endif
endif

kjb_setenv KJB_HAVE_F2C "${kjb_have_f2c}"
kjb_setenv LIB_F2C "${lib_f2c}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_F2C due to NO_LIBS"
    else if ("${KJB_HAVE_F2C}" != "") then
        echo "Script init_compile found F2C"
        echo "    KJB_HAVE_F2C: ${KJB_HAVE_F2C}"
        echo "    LIB_F2C: ${LIB_F2C}"
        echo "    include: ${f2c_inc_dir}"
        echo "    load   : ${f2c_load_dir}"
    else
        echo "Script init_compile did NOT find F2C with headers"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_slatec = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_SLATEC"
set lib_slatec = ""
kjb_setenv OPTIONS_SLATEC ""
kjb_setenv CC_FLAGS_SLATEC ""
set optional_libs = "${optional_libs} SLATEC:slatec\.h"

set slatec_str = ""
set slatec_load_dir = ""
set slatec_inc_dir = ""
set slatec_f77_dir = ""
set slatec_f77_lib = ""

if ( ! ${NO_LIBS} ) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libSLATEC\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set slatec_str = "SLATEC"
        else 
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libslatec\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                set slatec_str = "slatec"
            endif
        endif

        if ("${slatec_str}" != "") then
            set slatec_load_dir = "${load_dir}"
            break
        endif
    end 

    if ("${slatec_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/slatec.h) then 
                set slatec_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    #
    # Now we need the fortran library. We preferentially look for it in the
    # same place as the library that needs it. This is more complicated than
    # simply finding a fortran library independently, but necessary because
    # different libraries may need different version of the fortran library. 
    #
    if ("${slatec_inc_dir}" != "") then
        foreach f77_string (${f77_strings}) 
            set have_lib = `/bin/ls -1 ${slatec_load_dir} | grep ^lib${f77_string}\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                set slatec_f77_lib = "-l${f77_string}"
                set slatec_f77_dir = "" 
                break
            endif
        end 

        if (("${slatec_f77_lib}" == "") && ("${LIB_F77}" != "")) then
            set slatec_f77_lib = "${LIB_F77}"
            set slatec_f77_dir = "${LIB_F77_LOAD_DIR}" 
        endif
    endif

    # If we have a fortran library (i.e., slatec_f77_lib is not null), then we
    # also have everything else. So we are good to go. 
    #
    if ("${slatec_f77_lib}" != "") then
        set lib_slatec =  "-l${slatec_str} ${slatec_f77_lib}"
        set kjb_have_slatec = "-DKJB_HAVE_SLATEC"

        if ("${slatec_f77_dir}" != "") then
            set slatec_load_dir = "${slatec_load_dir}:${slatec_f77_dir}"
        endif
            
        set needed_inc_dirs = "${needed_inc_dirs} ${slatec_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${slatec_load_dir}"
        set needed_for_libs = "${needed_for_libs} SLATEC"

        set kjb_have = "${kjb_have} ${kjb_have_slatec}"
    endif
endif

kjb_setenv KJB_HAVE_SLATEC "${kjb_have_slatec}"
kjb_setenv LIB_SLATEC "${lib_slatec}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_SLATEC due to NO_LIBS"
    else if ("${KJB_HAVE_SLATEC}" != "") then
        echo "Script init_compile found SLATEC"
        echo "    LIB_SLATEC: ${LIB_SLATEC}"
        echo "    include: ${slatec_inc_dir}"
        echo "    load   : ${slatec_load_dir}"
    else if (("${slatec_inc_dir}" != "") && ("${slatec_f77_lib}" == "")) then
        echo "Script init_compile found SLATEC but NOT needed F77 library"
        echo "SLATEC is thus not used." 
    else
        echo "Script init_compile did NOT find SLATEC"
    endif
endif


# -----------------------------------------------------------------------------

# We can't use Numerical Recipe code for programs which are exported to the
# world due to their draconian usage restrictions. 
#
# kjb_setenv KJB_HAVE_NR "-DKJB_HAVE_NUMERICAL_RECIPES"
set kjb_have_nr = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_NR"

if ("${kjb_have_nr}" != "") then
    set kjb_have = "${kjb_have} ${kjb_have_nr}"
endif

kjb_setenv KJB_HAVE_NR "${kjb_have_nr}"

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------

set kjb_have_tiff = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_TIFF"
set lib_tiff = ""
kjb_setenv OPTIONS_TIFF ""
kjb_setenv CC_FLAGS_TIFF ""
set optional_libs = "${optional_libs} TIFF:tiffio\.h"

set tiff_inc_dir = ""
set tiff_load_dir = ""

if (! ${NO_LIBS}) then
    #
    # At some point it seemed that some systems supported linking with a .so.VERSION
    # but not a .so linked to it, but this was either an erroneous conclusion or
    # perhaps some user specific environment variable. We decided that the real
    # problem is that if one does not install the "development" version of a
    # library package on some systems such as Ubuntu, then you do not get the
    # links presumably because you only "use" code, and don't compile it, and
    # the code that was build by others knows which library it wants. So, I am
    # going back to allowing .so, but not .so.VERSION. 
    #
    # foreach dynamic_str ('\.a$' '\.so$' '\.so') 
    foreach dynamic_str ('\.a$' '\.so$' '\.dylib$') 
        foreach load_dir (${load_dirs}) 
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libtiff${dynamic_str}`

            if ("${have_lib}" != "") then
                set tiff_load_dir = "${load_dir}"
                break
            endif
        end

        if ("${tiff_load_dir}" != "") break
    end 

    if ("${tiff_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/tiff.h) then 
                set tiff_inc_dir = "${inc_dir}" 
                break
            endif
        end

        if ("${tiff_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/tiff/tiff.h)  then 
                    set tiff_inc_dir = "${inc_dir}/tiff " 
                    break
                endif
            end
        endif
    endif

    if ("${tiff_inc_dir}" != "") then
        set kjb_have_tiff = "-DKJB_HAVE_TIFF"
        set lib_tiff = -ltiff
        set needed_inc_dirs = "${needed_inc_dirs} ${tiff_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${tiff_load_dir}"
        set needed_for_libs = "${needed_for_libs} TIFF"

        set kjb_have = "${kjb_have} ${kjb_have_tiff}"
    endif
endif

kjb_setenv KJB_HAVE_TIFF "${kjb_have_tiff}"
kjb_setenv LIB_TIFF "${lib_tiff}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_TIFF due to NO_LIBS"
    else if ("${KJB_HAVE_TIFF}" != "") then
        echo "Script init_compile found TIFF"
        echo "    LIB_TIFF: ${LIB_TIFF}"
        echo "    include: ${tiff_inc_dir}"
        echo "    load   : ${tiff_load_dir}"
    else
        echo "Script init_compile did NOT find TIFF"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_jpeg = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_JPEG"
set lib_jpeg = ""
kjb_setenv OPTIONS_JPEG ""
kjb_setenv CC_FLAGS_JPEG ""
set optional_libs = "${optional_libs} JPEG:jpeglib\.h"

set jpeg_inc_dir = ""
set jpeg_load_dir = ""


if (! ${NO_LIBS}) then
    #
    # At some point it seemed that some systems supported linking with a .so.VERSION
    # but not a .so linked to it, but this was either an erroneous conclusion or
    # perhaps some user specific environment variable. We decided that the real
    # problem is that if one does not install the "development" version of a
    # library package on some systems such as Ubuntu, then you do not get the
    # links presumably because you only "use" code, and don't compile it, and
    # the code that was build by others knows which library it wants. So, I am
    # going back to allowing .so, but not .so.VERSION. 
    #
    # foreach dynamic_str ('\.a$' '\.so$' '\.so') 
    foreach dynamic_str ('\.a$' '\.so$' '\.dylib$') 
        foreach load_dir (${load_dirs}) 
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libjpeg${dynamic_str}`

            if ("${have_lib}" != "") then
                set jpeg_load_dir = "${load_dir}"
                break
            endif
        end

        if ("${jpeg_load_dir}" != "") break
    end 

    if ("${jpeg_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/jpeglib.h) then
                set jpeg_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all them. 
        #
        if ("${jpeg_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/jpeg/jpeglib.h)  then 
                    set jpeg_inc_dir = "${inc_dir}/jpeg" 
                    break
                endif
            end
        endif
    endif

    if ("${jpeg_inc_dir}" != "") then
        set kjb_have_jpeg = "-DKJB_HAVE_JPEG"
        set lib_jpeg = "-ljpeg"

        set needed_inc_dirs = "${needed_inc_dirs} ${jpeg_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${jpeg_load_dir}"
        set needed_for_libs = "${needed_for_libs} JPEG"

        set kjb_have = "${kjb_have} ${kjb_have_jpeg}"
    endif
endif

kjb_setenv KJB_HAVE_JPEG "${kjb_have_jpeg}"
kjb_setenv LIB_JPEG "${lib_jpeg}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_JPEG due to NO_LIBS"
    else if ("${KJB_HAVE_JPEG}" != "") then
        echo "Script init_compile found JPEG"
        echo "    LIB_JPEG: ${LIB_JPEG}"
        echo "    include: ${jpeg_inc_dir}"
        echo "    load   : ${jpeg_load_dir}"
    else
        echo "Script init_compile did NOT find JPEG"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_png = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_PNG"
set lib_png = "" 
kjb_setenv OPTIONS_PNG ""
kjb_setenv CC_FLAGS_PNG ""
set optional_libs = "${optional_libs} PNG:png/png\.h"

set png_inc_dir = ""
set png_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libpng\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set png_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${png_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/png.h) then
                set png_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all them. 
        #
        if ("${png_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/png//png.h)  then 
                    set png_inc_dir = "${inc_dir}/png" 
                    break
                endif
            end
        endif
    endif

    if ("${png_inc_dir}" != "") then
        set kjb_have_png = "-DKJB_HAVE_PNG"
        set lib_png = -lpng

        set needed_inc_dirs = "${needed_inc_dirs} ${png_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${png_load_dir}"
        set needed_for_libs = "${needed_for_libs} PNG"

        set kjb_have = "${kjb_have} ${kjb_have_png}"
    endif
endif

kjb_setenv KJB_HAVE_PNG "${kjb_have_png}"
kjb_setenv LIB_PNG "${lib_png}" 

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_PNG due to NO_LIBS"
    else if ("${KJB_HAVE_PNG}" != "") then
        echo "Script init_compile found PNG"
        echo "    LIB_PNG: ${LIB_PNG}"
        echo "    include: ${png_inc_dir}"
        echo "    load   : ${png_load_dir}"
    else
        echo "Script init_compile did NOT find PNG"
    endif
endif


# -----------------------------------------------------------------------------
# LIB_FLTK -- A fast, light tool kit. 
# -----------------------------------------------------------------------------
# 
# Don't forget to update Makefile-defs, Makefile-program, KJB/Makefile-2, and
# KJB_cpp/Makefile-2 (see comment block at the begining of this file). 
#
# -------
#
set kjb_have_fltk = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_FLTK"
set lib_fltk = ""
kjb_setenv OPTIONS_FLTK ""
kjb_setenv CC_FLAGS_FLTK ""
 
# Note the weird use of capitilization in LIBFLTK! 
set optional_libs = "${optional_libs} FLTK:Fl\.H"

set fltk_inc_dir = ""
set fltk_load_dir = ""

# PNG is needed on linux. Not necessarily for mac, but we usually have it
# anyway. 
#
if ((! ${NO_LIBS}) && ("${OS}" == "mac_os") || (("${LIB_PNG}" != "") && ("${LIB_XINERAMA}" != "") && ("${LIB_XFT}" != "") && ("${LIB_FONTCONFIG}" != "") )) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libfltk\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set fltk_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${fltk_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            # Note the weird use of capitilization! 
            if (-e ${inc_dir}/Fl.H) then
                set fltk_inc_dir = "${inc_dir}" 
                break
            endif
        end

        if ("${fltk_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                # Note the weird use of capitilization! 
                if (-e ${inc_dir}/FL/Fl.H) then 
                    set fltk_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif
    endif

    if ("${fltk_inc_dir}" != "") then
        set kjb_have_fltk = "-DKJB_HAVE_FLTK"
        ### set lib_fltk = "-lfltk_images -lfltk ${LIB_PNG} -lz -ljpeg -lXext -lXft -lfontconfig -lXinerama -lpthread -ldl " 
        # Mac

        set lib_fltk = "-lfltk_images -lfltk " 

       if ($?UBUNTU_RELEASE) then
           if ("${UBUNTU_RELEASE}" == "14.04") then
               set lib_fltk = "${lib_fltk} -ldl"
           endif
       endif

        if ("${OS}" != "mac_osx") then 
            set lib_fltk = "${lib_fltk} ${LIB_PNG} -lXinerama -lXft -lXext" 
        else
            set lib_fltk = "${lib_fltk} ${LIB_PNG} -framework Cocoa"
        endif
        set lib_fltk = "${lib_fltk} ${LIB_X11} " 

        set needed_inc_dirs = "${needed_inc_dirs} ${fltk_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${fltk_load_dir}"
        set needed_for_libs = "${needed_for_libs} FLTK"

        set kjb_have = "${kjb_have} ${kjb_have_fltk}"
    endif
endif

kjb_setenv KJB_HAVE_FLTK "${kjb_have_fltk}"
kjb_setenv LIB_FLTK "${lib_fltk}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_FLTK due to NO_LIBS"
    else if ("${LIB_PNG}" == "") then
        echo "Script init_compile skipped LIB_FLTK due to missing (possible) dependency LIB_PNG"
    else if ("${LIB_FONTCONFIG}" == "") then
        echo "Script init_compile skipped LIB_FLTK due to missing (possible) dependency LIB_FONTCONFIG"
    else if ("${LIB_XINERAMA}" == "") then
        echo "Script init_compile skipped LIB_FLTK due to missing (possible) dependency LIB_XINERAMA"
    else if ("${LIB_XFT}" == "") then
        echo "Script init_compile skipped LIB_FLTK due to missing (possible) dependency LIB_XFT"
    else if ("${KJB_HAVE_FLTK}" != "") then
        echo "Script init_compile found FLTK"
        echo "    LIB_FLTK: ${LIB_FLTK}"
        echo "    include: ${fltk_inc_dir}"
        echo "    load   : ${fltk_load_dir}"
    else
        echo "Script init_compile did NOT find FLTK"
    endif
endif

# -----------------------------------------------------------------------------
# LIB_WN. WordNet library
# -----------------------------------------------------------------------------

set kjb_have_wn = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_WN"
set lib_wn = "" 
kjb_setenv OPTIONS_WN ""
kjb_setenv CC_FLAGS_WN ""
set optional_libs = "${optional_libs} WN:wn\.h"

set wn_inc_dir = ""
set wn_load_dir = ""

if (! ${NO_LIBS}) then
    # 
    # So far, WordNet 2.0 is libwn.a, but WordNet 3.0 is libWN.a.  We first look
    # for libWN.a, and then libwn.a. 
    #
    set temp_lib_wn = ""

    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libWN\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set temp_lib_wn = "WN"
            set wn_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${temp_lib_wn}" == "") then
        foreach load_dir (${load_dirs}) 
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libwn\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                set wn_load_dir = "${load_dir}"
                break
            endif
        end
    endif

    if ("${wn_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/wn.h) then
                set wn_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${wn_inc_dir}" != "") then
        set kjb_have_wn = "-DKJB_HAVE_WN"
        set lib_wn = "-l${temp_lib_wn}" 

        set needed_inc_dirs = "${needed_inc_dirs} ${wn_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${wn_load_dir}"
        set needed_for_libs = "${needed_for_libs} ${temp_lib_wn}"

        set kjb_have = "${kjb_have} ${kjb_have_wn}"
    endif
endif

kjb_setenv KJB_HAVE_WN "${kjb_have_wn}"
kjb_setenv LIB_WN "${lib_wn}" 

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_WN due to NO_LIBS"
    else if ("${KJB_HAVE_WN}" != "") then
        echo "Script init_compile found WN"
        echo "    LIB_WN: ${LIB_WN}"
        echo "    include: ${wn_inc_dir}"
        echo "    load   : ${wn_load_dir}"
    else
        echo "Script init_compile did NOT find WN"
    endif
endif

# -----------------------------------------------------------------------------

#
# We don't use this one currently.
#

kjb_setenv KJB_HAVE_MATLAB ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_MATLAB"
kjb_setenv LIB_MATLAB ""

if ("${KJB_HAVE_MATLAB}" != "") then
    set kjb_have = "${kjb_have} ${KJB_HAVE_MATLAB}"
endif

# -----------------------------------------------------------------------------

set kjb_have_fftw = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_FFTW"
set lib_fftw =  ""
kjb_setenv OPTIONS_FFTW ""
kjb_setenv CC_FLAGS_FFTW ""
set optional_libs = "${optional_libs} FFTW:fftw3\.h"

set fftw_inc_dir = ""
set fftw_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libfftw3\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set fftw_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${fftw_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/fftw3.h) then
                set fftw_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${fftw_inc_dir}" != "") then
        set kjb_have_fftw = "-DKJB_HAVE_FFTW"
        set lib_fftw =  "-lfftw3"

        set needed_inc_dirs = "${needed_inc_dirs} ${fftw_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${fftw_load_dir}"
        set needed_for_libs = "${needed_for_libs} FFTW"

        set kjb_have = "${kjb_have} ${kjb_have_fftw}"
    endif
endif

kjb_setenv KJB_HAVE_FFTW "${kjb_have_fftw}"
kjb_setenv LIB_FFTW "${lib_fftw}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_FFTW due to NO_LIBS"
    else if ("${KJB_HAVE_FFTW}" != "") then
        echo "Script init_compile found FFTW"
        echo "    LIB_FFTW: ${LIB_FFTW}"
        echo "    include: ${fftw_inc_dir}"
        echo "    load   : ${fftw_load_dir}"
    else
        echo "Script init_compile did NOT find FFTW"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_gandalf = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_GANDALF"
set lib_gandalf =  ""
kjb_setenv OPTIONS_GANDALF ""
kjb_setenv CC_FLAGS_GANDALF ""

# set optional_libs = "${optional_libs} GANDALF:gandalf/vision.h"
# set optional_libs = "${optional_libs} GANDALF:gandalf/image.h"
# set optional_libs = "${optional_libs} GANDALF:gandalf/linalg.h"
# set optional_libs = "${optional_libs} GANDALF:gandalf/common.h"
set optional_libs = "${optional_libs} GANDALF:gandalf/.*\.h"

# Currently, I cannot find GANDALF test code, so it is not clear whether it
# needs LIB_BLAS and/or LIB_F77. At some point I believe we needed it. Control
# testing the latest theory on this through these variables. 
#  
set gandalf_requires_fortran = 0

set gandalf_str = ""
set gandalf_load_dir = ""
set gandalf_inc_dir = ""
set gandalf_f77_dir = ""
set gandalf_f77_lib = ""

if ((! ${NO_LIBS}) && ("${LIB_PNG}" != "") && ("${LIB_JPEG}" != "") && ("${LIB_TIFF}" != "") ) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libgandalf\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set gandalf_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${gandalf_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if ((-e ${inc_dir}/gandalf/vision.h) && (-e ${inc_dir}/gandalf/image.h) && (-e ${inc_dir}/gandalf/linalg.h) && (-e ${inc_dir}/gandalf/common.h)) then
                set gandalf_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${gandalf_inc_dir}" != "") then 
        if (${gandalf_requires_fortran}) then
            foreach f77_string (${f77_strings}) 
                set have_lib = `/bin/ls -1 ${gandalf_load_dir} | grep ^lib${f77_string}\\. | ${filter_non_devel}`

                if ("${have_lib}" != "") then
                    set gandalf_f77_lib = "-l${f77_string}"
                    set gandalf_f77_dir = "" 
                    break
                endif
            end 

            if (("${gandalf_f77_lib}" == "") && ("${LIB_F77}" != "")) then
                set gandalf_f77_lib = "${LIB_F77}"
                set gandalf_f77_dir = "${LIB_F77_LOAD_DIR}" 
            endif

            if ("${gandalf_f77_lib}" != "") then
                set gandalf_f77_lib = "-lblas ${gandalf_f77_lib}"
            endif
        endif

        if (( ! ${gandalf_requires_fortran}) || ("${gandalf_f77_lib}" != "")) then
            set kjb_have_gandalf = "-DKJB_HAVE_GANDALF"
            set lib_gandalf =  "-lgandalf ${gandalf_f77_lib} ${LIB_TIFF} ${LIB_TIFF} ${LIB_PNG}"

            if ("${gandalf_f77_dir}" != "") then
                set gandalf_load_dir = "${gandalf_load_dir}:${gandalf_f77_dir}"
            endif

            set needed_inc_dirs = "${needed_inc_dirs} ${gandalf_inc_dir}"
            set needed_load_dirs = "${needed_load_dirs} ${gandalf_load_dir}"
            set needed_for_libs = "${needed_for_libs} GANDALF"


            set kjb_have = "${kjb_have} ${kjb_have_gandalf}"
        endif
    endif
endif

kjb_setenv KJB_HAVE_GANDALF "${kjb_have_gandalf}"
kjb_setenv LIB_GANDALF "${lib_gandalf}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_GANDALF due to NO_LIBS"
    else if ("${LIB_PNG}" == "") then
        echo "Script init_compile skipped LIB_GANDALF due to missing dependency LIB_PNG."
    else if ("${LIB_JPEG}" == "") then
        echo "Script init_compile skipped LIB_GANDALF due to missing dependency LIB_JPEG."
    else if ("${LIB_TIFF}" == "") then
        echo "Script init_compile skipped LIB_GANDALF due to missing dependency LIB_JPEG."
    else if ("${KJB_HAVE_GANDALF}" != "") then
        echo "Script init_compile found GANDALF"
        echo "    LIB_GANDALF: ${LIB_GANDALF}"
        echo "    include: ${gandalf_inc_dir}"
        echo "    load   : ${gandalf_load_dir}"
    else if (("${gandalf_inc_dir}" != "") && ("${gandalf_f77_lib}" == "") && (${gandalf_requires_fortran})) then
        echo "Script init_compile found GANDALF but NOT needed F77 library"
        echo "GANDALF is thus not used." 
    else
        echo "Script init_compile did NOT find GANDALF"
    endif
endif

set kjb_have_gsl = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_GSL"
set lib_gsl =  ""
kjb_setenv OPTIONS_GSL ""
kjb_setenv CC_FLAGS_GSL ""
#
# Multiple possibilities for this one
set optional_libs = "${optional_libs} GSL:gsl/gsl_.*\.h"

set gsl_str = ""
set gsl_load_dir = ""
set gsl_inc_dir = ""
set gsl_f77_dir = ""
set gsl_f77_lib = ""

# if (! ${NO_LIBS} && ("${LIB_BLAS}" != "")) then
if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libgsl\\. | ${filter_non_devel}`
        #
        # KOBUS. But we now use libgslcblas as our one and only way to use GSL.
        # So we need to check for it? 
        #
        #
        # We no longer check for libgslcblas because we use $LIB_BLAS instead
        #
        # KOBUS
        set have_lib_2 = `/bin/ls -1 ${load_dir} | grep ^libgslcblas\\. | ${filter_non_devel}`
        #if (("${have_lib}" != "") && ("${have_lib_2}" != "")) then
        if ("${have_lib}" != "") then
            # KOBUS 
            if ("${have_lib_2}" != "") then
                set gsl_load_dir = "${load_dir}"
                break
            else if ($?KJB_VERBOSE) then
                echo "Directory ${load_dir} has libgsl, but no libgslcblas. Skipping it."
            endif
        endif
    end

    if ("${gsl_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            # look for representative GSL header (gsl/gsl_version.h)
            if (-e ${inc_dir}/gsl/gsl_version.h) then
                # Developers should #include "gsl/gsl_WHATEVER.h"
                # in contrast to #include "gsl_WHATEVER.h"
                # that is, the DEVELOPER should indicate the gsl subdirectory.
                # That means we set the following value:
                set gsl_inc_dir = "${inc_dir}" 
                # instead of set gsl_inc_dir = "${inc_dir}/gsl"
                break
            endif
        end
    endif

    #
    # Qs:  We used to add in -lblas and the fortran library, but it seems it is
    # not necessary? Perhaps it depends on how it is compiled? Perhaps when you
    # compile it, you have the choice of using your own blas instead of
    # gslcblas?
    #
    # Answer:  Some GSL functions don't need BLAS; for awhile we only used them
    # which gave the false impression that BLAS was unnecessary.  To fully use
    # GSL you must link BLAS as well as libgsl, no matter how you compile GSL.
    # You can use your own CBLAS or the GSL-supplied CBLAS, and you can choose
    # which you want when you link YOUR program -- not when you compile GSL.
    #
    if ("${gsl_inc_dir}" != "") then
        set kjb_have_gsl = "-DKJB_HAVE_GSL"
        # Some GSL routines need BLAS, others don't; to be safe, we link BLAS.
        #set lib_gsl =  "-lgsl ${LIB_BLAS}"
        # The above line does not work, but it isn't my fault.
        # LIB_BLAS is not what it appears to be.  init_compile is "lazy" and
        # sets it to LIB_LAPACK, under the assumption that BLAS is a subset.
        # That assumption appears to be false on 64 bit machines!
        set lib_gsl =  "-lgsl -lgslcblas"
        set needed_inc_dirs = "${needed_inc_dirs} ${gsl_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${gsl_load_dir}"
        set needed_for_libs = "${needed_for_libs} GSL"

        set kjb_have = "${kjb_have} ${kjb_have_gsl}"

        # UA HPC module for GSL has some extra dependencies:
        # Now (16/10/03) ocelote does not have them (or needs them?) 
        if ($?KJB_UA_HPC) then
            if (-d /usr/uaopt) then
                set lib_gsl = "${lib_gsl} -limf -lintlc -lsvml -lirng"
            endif
        endif
    endif

    ### ALL THE FORTRAN BUSINESS BELOW SEEMS TO BE OBSOLETE ###

#     #
#     # Now we need the fortran library. We preferentially look for it in the
#     # same place as the library that needs it. This is more complicated than
#     # simply finding a fortran library independently, but necessary because
#     # different libraries may need different version of the fortran library. 
#     #
#     #
#     if ("${gsl_inc_dir}" != "") then
#         foreach f77_string (${f77_strings}) 
#             set have_lib = `/bin/ls -1 ${gsl_load_dir} | grep ^lib${f77_string}\\. | ${filter_non_devel}`
# 
#             if ("${have_lib}" != "") then
#                 set gsl_f77_lib = "-l${f77_string}"
#                 set gsl_f77_dir = "" 
#                 break
#             endif
#         end 
# 
#         if (("${gsl_f77_lib}" == "") && ("${LIB_F77}" != "")) then
#             set gsl_f77_lib = "${LIB_F77}"
#             set gsl_f77_dir = "${LIB_F77_LOAD_DIR}" 
#         endif
#     endif

#     if ("${gsl_f77_lib}" != "") then
#         set kjb_have_gsl = "-DKJB_HAVE_GSL"
#         # set lib_gsl =  "-lgsl -lgslcblas -lblas ${gsl_f77_lib}"
#         set lib_gsl =  "-lgsl -lgslcblas"
# 
# #         if ("${gsl_f77_dir}" != "") then
# #             if ($?KJB_VERBOSE) then
# #                 echo "Executing possibly untested code in init_compile (grep
# #                 3697)."
# #             endif
# # 
# #             set gsl_load_dir = "${gsl_load_dir}:${gsl_f77_dir}"
# #         endif
#             
#         set needed_inc_dirs = "${needed_inc_dirs} ${gsl_inc_dir}"
#         set needed_load_dirs = "${needed_load_dirs} ${gsl_load_dir}"
#         set needed_for_libs = "${needed_for_libs} GSL"
# 
#         set kjb_have = "${kjb_have} ${kjb_have_gsl}"
#     endif
endif

kjb_setenv KJB_HAVE_GSL "${kjb_have_gsl}"
kjb_setenv LIB_GSL "${lib_gsl}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_GSL due to NO_LIBS"
#     else if ("${LIB_BLAS}" == "") then
#         echo "Script init_compile skipped LIB_GSL due to missing dependency LIB_BLAS."
    else if ("${KJB_HAVE_GSL}" != "") then
        echo "Script init_compile found GSL"
        echo "    LIB_GSL: ${LIB_GSL}"
        echo "    include: ${gsl_inc_dir}"
        echo "    load   : ${gsl_load_dir}"
    # else if (("${gsl_inc_dir}" != "") && ("${gsl_f77_lib}" == "")) then
    #     echo "Script init_compile found GSL but NOT needed F77 library"
    #     echo "GSL is thus not used." 
    else
        echo "Script init_compile did NOT find GSL"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_libsvm = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_LIBSVM"
set lib_libsvm =  ""
kjb_setenv OPTIONS_LIBSVM ""
kjb_setenv CC_FLAGS_LIBSVM ""
#
# Multiple possibilities for this one
set optional_libs = "${optional_libs} LIBSVM:libsvm\.h"
set optional_libs = "${optional_libs} LIBSVM:svm\.h"

set libsvm_inc_dir = ""
set libsvm_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libSVM\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set libsvm_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${libsvm_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/svm.h) then
                set libsvm_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${libsvm_inc_dir}" != "") then
        set kjb_have_libsvm = "-DKJB_HAVE_LIBSVM"

        if ("${KJB_LD}" == "gcc") then
            set lib_libsvm = "-lSVM -lstdc++"
        else if (("${KJB_LD}" == "cc") && ("${MACHINE}" == "sun5")) then
            set lib_libsvm = "-lSVM -lCrun"
        else
            set lib_libsvm = "-lSVM"
        endif

        set needed_inc_dirs = "${needed_inc_dirs} ${libsvm_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${libsvm_load_dir}"
        set needed_for_libs = "${needed_for_libs} LIBSVM"

        set kjb_have = "${kjb_have} ${kjb_have_libsvm}"
    endif
endif

kjb_setenv KJB_HAVE_LIBSVM "${kjb_have_libsvm}"
kjb_setenv LIB_LIBSVM "${lib_libsvm}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_LIBSVM due to NO_LIBS"
    else if ("${KJB_HAVE_LIBSVM}" != "") then
        echo "Script init_compile found LIBSVM"
        echo "    LIB_LIBSVM: ${LIB_LIBSVM}"
        echo "    include: ${libsvm_inc_dir}"
        echo "    load   : ${libsvm_load_dir}"
    else
        echo "Script init_compile did NOT find LIBSVM"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_dgl = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_DGL"
set lib_dgl =  ""
kjb_setenv OPTIONS_DGL ""
kjb_setenv CC_FLAGS_DGL ""
set optional_libs = "${optional_libs} DGL:dgl\.h"

set dgl_inc_dir = ""
set dgl_load_dir = ""

if ((! ${NO_LIBS}) && ("${LIB_OPENGL}" != "")) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libdgl\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set dgl_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${dgl_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/dgl.h) then
                set dgl_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${dgl_inc_dir}" != "") then
        set kjb_have_dgl = "-DKJB_HAVE_DGL"
        set lib_dgl =  "-ldgl ${LIB_OPENGL}"

        if ("${opengl_load_dir}" != "") then
            ${VERBOSE_ECHO} "Executing possibly untested code in init_compile (grep 3833)."
            set dgl_load_dir = "${dgl_load_dir}:${opengl_load_dir}"
        endif
            
        if ("${opengl_inc_dir}" != "") then
            ${VERBOSE_ECHO} "Executing possibly untested code in init_compile (grep 3841)."
            set dgl_inc_dir = "${dgl_inc_dir}:${opengl_inc_dir}"
        endif
            
        set needed_inc_dirs = "${needed_inc_dirs} ${dgl_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${dgl_load_dir}"
        set needed_for_libs = "${needed_for_libs} DGL"

        set kjb_have = "${kjb_have} ${kjb_have_dgl}"
    endif
endif

kjb_setenv KJB_HAVE_DGL "${kjb_have_dgl}"
kjb_setenv LIB_DGL "${lib_dgl}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_DGL due to NO_LIBS"
    else if ("${LIB_OPENGL}" == "") then
        echo "Script init_compile skipped LIB_DGL due to missing dependency LIB_OPENGL."
    else if ("${KJB_HAVE_DGL}" != "") then
        echo "Script init_compile found DGL"
        echo "    LIB_DGL: ${LIB_DGL}"
        echo "    include: ${dgl_inc_dir}"
        echo "    load   : ${dgl_load_dir}"
    else
        echo "Script init_compile did NOT find DGL"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_vrj = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_VRJ"
set lib_vrj =  ""
kjb_setenv OPTIONS_VRJ ""
kjb_setenv CC_FLAGS_VRJ ""
set optional_libs = "${optional_libs} VRJ:vrj/.*\.h"

set vrj_inc_dir = ""
set vrj_load_dir = ""

if ((! ${NO_LIBS}) && ("${LIB_OPENGL}" != "")) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libvrj_ogl\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set vrj_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${vrj_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            #
            # We assume that if one file is there, they all are.
            #
            if (-e ${inc_dir}/vrj/vrjConfig.h) then
                set vrj_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${vrj_inc_dir}" != "") then
        set kjb_have_vrj = "-DKJB_HAVE_VRJ"
        set lib_vrj =  "-lvrj_ogl ${LIB_OPENGL}"

        if ("${opengl_load_dir}" != "") then
            ${VERBOSE_ECHO} "Executing possibly untested code in init_compile (3911)."
            set dgl_load_dir = "${dgl_load_dir}:${opengl_load_dir}"
        endif
            
        if ("${opengl_inc_dir}" != "") then
            ${VERBOSE_ECHO} "Executing possibly untested code in init_compile (3919)."

            set dgl_inc_dir = "${dgl_inc_dir}:${opengl_inc_dir}"
        endif
            
        set needed_inc_dirs = "${needed_inc_dirs} ${vrj_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${vrj_load_dir}"
        set needed_for_libs = "${needed_for_libs} VRJ"

        set kjb_have = "${kjb_have} ${kjb_have_vrj}"
    endif
endif

kjb_setenv KJB_HAVE_VRJ "${kjb_have_vrj}"
kjb_setenv LIB_VRJ "${lib_vrj}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_VRJ due to NO_LIBS"
    else if ("${LIB_OPENGL}" == "") then
        echo "Script init_compile skipped LIB_VRJ due to missing dependency LIB_OPENGL."
    else if ("${KJB_HAVE_VRJ}" != "") then
        echo "Script init_compile found VRJ"
        echo "    LIB_VRJ: ${LIB_VRJ}"
        echo "    include: ${vrj_inc_dir}"
        echo "    load   : ${vrj_load_dir}"
    else
        echo "Script init_compile did NOT find VRJ"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_levmar = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_LEVMAR"
set lib_levmar = ""
kjb_setenv OPTIONS_LEVMAR ""
#
# Levmar includes have // comments.
#
if (${kjb_cc_is_gcc}) then
    kjb_setenv CC_FLAGS_LEVMAR "-std=gnu99"
else 
    kjb_setenv CC_FLAGS_LEVMAR ""
endif

set optional_libs = "${optional_libs} LEVMAR:lm\.h"

set levmar_inc_dir = ""
set levmar_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^liblevmar\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set levmar_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${levmar_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/lm.h)  then 
                set levmar_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all them. 
        #
        if ("${levmar_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/levmar/lm.h)  then 
                    set levmar_inc_dir = "${inc_dir}/levmar" 
                    break
                endif
            end
        endif
    endif

    if (("${levmar_inc_dir}" != "") && ("${LIB_LAPACK}" != ""))  then
        set kjb_have_levmar = "-DKJB_HAVE_LEVMAR"
        set lib_levmar = "-llevmar ${LIB_LAPACK}"

        set needed_inc_dirs = "${needed_inc_dirs} ${levmar_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${levmar_load_dir}"
        set needed_for_libs = "${needed_for_libs} LEVMAR"

        set kjb_have = "${kjb_have} ${kjb_have_levmar}"
    endif
endif

kjb_setenv KJB_HAVE_LEVMAR "${kjb_have_levmar}"
kjb_setenv LIB_LEVMAR "${lib_levmar}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_LEVMAR due to NO_LIBS"
    else if ("${KJB_HAVE_LEVMAR}" != "") then
        echo "Script init_compile found LEVMAR"
        echo "    LIB_LEVMAR: ${LIB_LEVMAR}"
        echo "    include: ${levmar_inc_dir}"
        echo "    load   : ${levmar_load_dir}"
    else if (("${levmar_inc_dir}" != "") && ("${LIB_LAPACK}" == "")) then
        echo "Script init_compile found LEVMAR but NOT needed LAPACK library"
        echo "LEVMAR is thus not used." 
    else
        echo "Script init_compile did NOT find LEVMAR"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_ann = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_ANN"
set lib_ann = ""
kjb_setenv OPTIONS_ANN ""
kjb_setenv CC_FLAGS_ANN ""
set optional_libs = "${optional_libs} ANN:ANN\.h"

set ann_inc_dir = ""
set ann_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libANN\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set ann_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${ann_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/ANN.h) then
                set ann_inc_dir = "${inc_dir}" 
                break
            endif
        end
        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all them. 
        #
        if ("${ann_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e  ${inc_dir}/ANN/ANN.h) then
                    set ann_inc_dir = "${inc_dir}/ANN" 
                    break
                endif
            end
        endif
    endif

    if ("${ann_inc_dir}" != "") then
        set kjb_have_ann = "-DKJB_HAVE_ANN"

        if ("${KJB_LD}" == "gcc") then
            set lib_ann = "-lANN -lstdc++"
        else if (("${KJB_LD}" == "cc") && ("${MACHINE}" == "sun5")) then
            set lib_ann = "-lANN -lCrun"
        else 
            set lib_ann = "-lANN"
        endif

        set needed_inc_dirs = "${needed_inc_dirs} ${ann_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${ann_load_dir}"
        set needed_for_libs = "${needed_for_libs} ANN"

        set kjb_have = "${kjb_have} ${kjb_have_ann}"
    endif
endif

kjb_setenv KJB_HAVE_ANN "${kjb_have_ann}"
kjb_setenv LIB_ANN "${lib_ann}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_ANN due to NO_LIBS"
    else if ("${KJB_HAVE_ANN}" != "") then
        echo "Script init_compile found ANN"
        echo "    LIB_ANN: ${LIB_ANN}"
        echo "    include: ${ann_inc_dir}"
        echo "    load   : ${ann_load_dir}"
    else
        echo "Script init_compile did NOT find ANN"
    endif
endif

# -----------------------------------------------------------------------------

set kjb_have_xercesc = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_XERCESC"
set lib_xercesc = ""
kjb_setenv OPTIONS_XERCESC ""
kjb_setenv CC_FLAGS_XERCESC ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} XERCESC:XercesDOMParser\.hpp"

set xercesc_inc_dir = ""
set xercesc_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs})
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libxerces | ${filter_non_devel}`
        if ("${have_lib}" != "") then
            set xercesc_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${xercesc_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/XercesDOMParser.hpp) then
                set xercesc_inc_dir = "${inc_dir}" 
                break
            endif
        end

    endif

    if ("${xercesc_inc_dir}" != "") then
        set kjb_have_xercesc = "-DKJB_HAVE_XERCESC"
        set lib_xercesc = -lxerces-c
        set needed_inc_dirs = "${needed_inc_dirs} ${xercesc_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${xercesc_load_dir}"
        set needed_for_libs = "${needed_for_libs} XERCESC"
        set kjb_have = "${kjb_have} ${kjb_have_xercesc}"
    endif
endif

kjb_setenv KJB_HAVE_XERCESC "${kjb_have_xercesc}"
kjb_setenv LIB_XERCESC "${lib_xercesc}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_XERCESC due to NO_LIBS"
    else if ("${KJB_HAVE_XERCESC}" != "") then
        echo "Script init_compile found XERCESC"
        echo "    LIB_XERCESC: ${LIB_XERCESC}"
        echo "    include: ${xercesc_inc_dir}"
        echo "    load   : ${xercesc_load_dir}"
    else
        echo "Script init_compile did NOT find XERCESC"
    endif
endif

# -----------------------------------------------------------------------------
# thread building blocks library (libtbb)
# -----------------------------------------------------------------------------
# 
set kjb_have_tbb = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_TBB"
set lib_tbb = ""
kjb_setenv OPTIONS_TBB ""
kjb_setenv CC_FLAGS_TBB ""
#
# Multiple possibilities for this one
set optional_libs = "${optional_libs} TBB:tbb/.*\.h"

set tbb_inc_dir = ""
set tbb_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libtbb\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set tbb_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${tbb_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/tbb/tbb.h) then
                set tbb_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${tbb_inc_dir}" != "") then
        set kjb_have_tbb = "-DKJB_HAVE_TBB"
        set lib_tbb = "-ltbb -ltbbmalloc ${lib_pthread}"

        set needed_inc_dirs = "${needed_inc_dirs} ${tbb_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${tbb_load_dir}"
        set needed_for_libs = "${needed_for_libs} TBB"

        set kjb_have = "${kjb_have} ${kjb_have_tbb}"
    endif
endif

kjb_setenv KJB_HAVE_TBB "${kjb_have_tbb}"
kjb_setenv LIB_TBB "${lib_tbb}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_TBB due to NO_LIBS"
    else if ("${KJB_HAVE_TBB}" != "") then
        echo "Script init_compile found TBB"
        echo "    LIB_TBB: ${LIB_TBB}"
        echo "    include: ${tbb_inc_dir}"
        echo "    load   : ${tbb_load_dir}"
    else
        echo "Script init_compile did NOT find TBB"
    endif
endif

# -----------------------------------------------------------------------------

# Boost selection. Some selection might have already taken place in the setting
# up of inc_dirs and load_dirs. Whether we should do that is not clear. 

set boost_before_inc_dirs = "" 
set boost_before_load_dirs = "" 

if ("${BOOST_VERSION}" != "") then
    set boost_inc_sub_dirs = "boost_${BOOST_VERSION}"
    set boost_link_sub_dirs = "boost_${BOOST_VERSION}"
# else 
# 
#     if ("${BOOST_VERSION}" != "") then
#         set boost_inc_sub_dirs = "boost_${BOOST_VERSION} boost/${BOOST_VERSION} boost/@${BOOST_VERSION}"
#     else 
#         set boost_inc_sub_dirs = "boost"
#     endif 
endif 

# ----------------------- Boost header-only libraries---------------------

set kjb_have_boost = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_BOOST"
set lib_boost = ""
kjb_setenv OPTIONS_BOOST ""
kjb_setenv CC_FLAGS_BOOST ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} BOOST:boost/.*\.hpp"

set boost_inc_dir = ""

set actual_boost_version = "UNKNOWN"

if (! ${NO_BOOST}) then
    #
    # This is a bit messy because if a boost version is selected, we do not want
    # to fall back on the default if that version is not available.  Further,
    # versions might be implicitly specified via the top level, or the bottom
    # level. So we end up with three cases that are handled separately. 
    #
    # Note also that the include dir must have boost as a subdirectory, because
    # the usage is to have "boost/" as part of the header requested. 
    #
    foreach inc_dir (${boost_inc_dirs}) 
        if (-e ${inc_dir}/boost/version.hpp) then
            set boost_inc_dir = "${inc_dir}" 
            break
        endif
    end

    if ("${boost_inc_dir}" == "") then
        foreach inc_dir (${inc_dirs}) 
            if ("${BOOST_VERSION}" != "") then
                foreach inc_sub_dir (${boost_inc_sub_dirs}) 
                    if (-e ${inc_dir}/${inc_sub_dir}/boost/version.hpp) then
                        set boost_inc_dir = "${inc_dir}/${inc_sub_dir}" 
                        break
                    endif
                end

                if ("${boost_inc_dir}" != "") then 
                   break
                endif 
            else 
                if (-e ${inc_dir}/boost/version.hpp) then
                    set boost_inc_dir = "${inc_dir}" 
                    break
                endif
            endif 
        end
    endif

    if ("${boost_inc_dir}" != "") then
        if ("${BOOST_VERSION}" != "") then
            set boost_before_inc_dirs = "${boost_inc_dir}" 
        endif 

        set kjb_have_boost = "-DKJB_HAVE_BOOST"
        set lib_boost = ""

        set needed_inc_dirs = "${needed_inc_dirs} ${boost_inc_dir}"
        # Kobus. Hacking the hack. 
        # # hack -- don't need a load dir, but must have one anyway
        # set needed_load_dirs = "${needed_load_dirs} ./" 
        set needed_load_dirs = "${needed_load_dirs} DUMMY" 
        set needed_for_libs = "${needed_for_libs} BOOST"

        set kjb_have = "${kjb_have} ${kjb_have_boost}"
     
        set actual_boost_version = `grep < ${boost_inc_dir}/boost/version.hpp '#define BOOST_LIB_VERSION' | sed 's/^.*"\(.*\)".*$/\1/'` 
    endif
endif

kjb_setenv KJB_HAVE_BOOST "${kjb_have_boost}"
kjb_setenv LIB_BOOST "${lib_boost}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_BOOST}) then
        echo "Script init_compile skipped LIB_BOOST due to NO_BOOST"
    else if ("${KJB_HAVE_BOOST}" != "") then
        echo "Script init_compile found BOOST headers"
        echo "    include: ${boost_inc_dir}"
        echo "    version: ${actual_boost_version}"
    else
        echo "Script init_compile did NOT find BOOST headers"
    endif
endif

# -----------------------------------------------------------------------------

if ("${BOOST_VERSION}" != "") then
    if ("${boost_before_inc_dirs}" == "") then
        if (! $?KJB_QUIET ) then
            echo " "
            echo "Unable to find boost includes with BOOST_VERSION=${BOOST_VERSION}."
            echo " "
        endif 
        exit 1
    endif 
endif 

# -----------------------------------------------------------------------------
# ----------------------- Boost serialization library ---------------------

set kjb_have_bst_serial = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_BST_SERIAL"
set lib_bst_serial = ""
kjb_setenv OPTIONS_BST_SERIAL ""
kjb_setenv CC_FLAGS_BST_SERIAL ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} BST_SERIAL:boost/serialization/.*\.hpp"
set optional_libs = "${optional_libs} BST_SERIAL:boost/archive/.*\.hpp"

set bst_serial_inc_dir = ""
set bst_serial_load_dir = ""
set use_bst_serial_mt = ""

if (! ${NO_BOOST}) then
    foreach load_dir (${boost_load_dirs}) 
        if (! -d ${load_dir}) continue

        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_serialization\\. | ${filter_non_devel}`
        set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_serialization-mt\\. | ${filter_non_devel}`

        if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
            set bst_serial_load_dir = "${load_dir}"

            # Prefering mt does not work on macs at least.
            if ("${have_lib}" == "") set use_bst_serial_mt = "-mt"
            break
        endif 
    end

    if ("${bst_serial_load_dir}" == "") then
        foreach load_dir (${load_dirs}) 
            if (! -d ${load_dir}) continue

            if ("${BOOST_VERSION}" != "") then
                foreach boost_link_sub_dir (${boost_link_sub_dirs}) 
                    if (! -d ${load_dir}/${boost_link_sub_dir}) continue

                    set have_lib = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_serialization\\. | ${filter_non_devel}`
                    set have_lib_mt = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_serialization-mt\\. | ${filter_non_devel}`

                    if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                        set bst_serial_load_dir = "${load_dir}/${boost_link_sub_dir}"

                        # Prefering mt does not work on macs at least.
                        if ("${have_lib}" == "") set use_bst_serial_mt = "-mt"
                        break
                    endif 
                 end

                 if ("${bst_serial_load_dir}" != "") break
            else 
                set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_serialization\\. | ${filter_non_devel}`
                set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_serialization-mt\\. | ${filter_non_devel}`

                if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                    set bst_serial_load_dir = "${load_dir}"

                    # Prefering mt does not work on macs at least.
                    if ("${have_lib}" == "") set use_bst_serial_mt = "-mt"
                    break
                endif 
            endif
        end
    endif 

    if ("${bst_serial_load_dir}" != "") then
        if (-e ${boost_inc_dir}/boost/serialization/access.hpp) then
            set bst_serial_inc_dir = "${boost_inc_dir}" 
        endif
    endif

    if ("${bst_serial_inc_dir}" != "") then
        if ("${BOOST_VERSION}" != "") then
            #
            # If we specified a boost version, then where we found it needs to
            # have priority. It is unlikely, but possible that we found boost in
            # several places. It might be a bit over the top, but we check for
            # that here, strip duplicates, and emit a warning.
            #
            set found = 0
            foreach cur_inc_dir (${boost_before_inc_dirs}) 
                if ("${cur_inc_dir}" == "${bst_serial_inc_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_inc_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost include parts in different places."
                endif 

                set boost_before_inc_dirs = "${boost_before_inc_dirs} ${bst_serial_inc_dir}" 
            endif 

            set found = 0
            foreach cur_load_dir (${boost_before_load_dirs}) 
                if ("${cur_load_dir}" == "${bst_serial_load_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_load_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost load parts in different places."
                endif 

                set boost_before_load_dirs = "${boost_before_load_dirs} ${bst_serial_load_dir}" 
            endif 
        endif 

        set kjb_have_bst_serial = "-DKJB_HAVE_BST_SERIAL"

        set lib_bst_serial = -lboost_serialization${use_bst_serial_mt}

        set needed_inc_dirs = "${needed_inc_dirs} ${bst_serial_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${bst_serial_load_dir}"
        set needed_for_libs = "${needed_for_libs} BST_SERIAL"

        set kjb_have = "${kjb_have} ${kjb_have_bst_serial}"

        if($bst_serial_inc_dir != `echo $bst_serial_inc_dir | sed 's/include_after//'`) then
            echo "** WARNING: boost_serialization library was found, but headers were missing."
            echo "** Using the boost headers in include_after, but this may cause version mismatches..."
        endif
    endif
endif

kjb_setenv KJB_HAVE_BST_SERIAL "${kjb_have_bst_serial}"
kjb_setenv LIB_BST_SERIAL "${lib_bst_serial}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_BOOST}) then
        echo "Script init_compile skipped LIB_BST_SERIAL due to NO_BOOST"
    else if ("${KJB_HAVE_BST_SERIAL}" != "") then
        echo "Script init_compile found BST_SERIAL"
        echo "    LIB_BST_SERIAL: ${LIB_BST_SERIAL}"
        echo "    include: ${bst_serial_inc_dir}"
        echo "    load   : ${bst_serial_load_dir}"
    else
        echo "Script init_compile did NOT find BST_SERIAL"
    endif
endif

# -----------------------------------------------------------------------------
# ----------------------- Boost program options library ---------------------

set kjb_have_bst_poptions = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_BST_POPTIONS"
set lib_bst_poptions = ""
kjb_setenv OPTIONS_BST_POPTIONS ""
kjb_setenv CC_FLAGS_BST_POPTIONS ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} BST_POPTIONS:boost/program_options/.*\.hpp"
set optional_libs = "${optional_libs} BST_POPTIONS:boost/program_options\.hpp"

set bst_poptions_inc_dir = ""
set bst_poptions_load_dir = ""
set use_bst_poptions_mt = ""

if (! ${NO_BOOST}) then
    foreach load_dir (${boost_load_dirs}) 
        if (! -d ${load_dir}) continue

        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_program_options\\. | ${filter_non_devel}`
        set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_program_options-mt\\. | ${filter_non_devel}`

        if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
            set bst_poptions_load_dir = "${load_dir}"

            # Prefering mt does not work on macs at least.
            if ("${have_lib}" == "") set use_bst_poptions_mt = "-mt"
            break
        endif
    end

    if ("${bst_poptions_load_dir}" == "") then
        foreach load_dir (${load_dirs}) 
            if (! -d ${load_dir}) continue

            if ("${BOOST_VERSION}" != "") then
                foreach boost_link_sub_dir (${boost_link_sub_dirs}) 
                    if (! -d ${load_dir}/${boost_link_sub_dir}) continue

                    set have_lib = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_program_options\\. | ${filter_non_devel}`
                    set have_lib_mt = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_program_options-mt\\. | ${filter_non_devel}`

                    if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                        set bst_poptions_load_dir = "${load_dir}/${boost_link_sub_dir}"

                        # Prefering mt does not work on macs at least.
                        if ("${have_lib}" == "") set use_bst_poptions_mt = "-mt"
                        break
                    endif
                end 

                 if ("${bst_poptions_load_dir}" != "") break
            else 
                set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_program_options\\. | ${filter_non_devel}`
                set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_program_options-mt\\. | ${filter_non_devel}`

                if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                    set bst_poptions_load_dir = "${load_dir}"

                    # Prefering mt does not work on macs at least.
                    if ("${have_lib}" == "") set use_bst_poptions_mt = "-mt"
                    break
                endif
            endif
        end
    endif

    if ("${bst_poptions_load_dir}" != "") then
        if (-e ${boost_inc_dir}/boost/program_options.hpp) then
            set bst_poptions_inc_dir = "${boost_inc_dir}" 
        endif
    endif

    if ("${bst_poptions_inc_dir}" != "") then
        if ("${BOOST_VERSION}" != "") then
            #
            # If we specified a boost version, then where we found it needs to
            # have priority. It is unlikely, but possible that we found boost in
            # several places. It might be a bit over the top, but we check for
            # that here, strip duplicates, and emit a warning.
            #
            set found = 0
            foreach cur_inc_dir (${boost_before_inc_dirs}) 
                if ("${cur_inc_dir}" == "${bst_poptions_inc_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_inc_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost include parts in different places."
                endif 

                set boost_before_inc_dirs = "${boost_before_inc_dirs} ${bst_poptions_inc_dir}" 
            endif 

            set found = 0
            foreach cur_load_dir (${boost_before_load_dirs}) 
                if ("${cur_load_dir}" == "${bst_poptions_load_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_load_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost load parts in different places."
                endif 

                set boost_before_load_dirs = "${boost_before_load_dirs} ${bst_poptions_load_dir}" 
            endif 
        endif 

        set kjb_have_bst_poptions = "-DKJB_HAVE_BST_POPTIONS"
        set lib_bst_poptions = -lboost_program_options${use_bst_poptions_mt}

        set needed_inc_dirs = "${needed_inc_dirs} ${bst_poptions_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${bst_poptions_load_dir}"
        set needed_for_libs = "${needed_for_libs} BST_POPTIONS"

        set kjb_have = "${kjb_have} ${kjb_have_bst_poptions}"

        if($bst_poptions_inc_dir != `echo $bst_poptions_inc_dir | sed 's/include_after//'`) then
            echo "** WARNING: boost_program_options library was found, but headers were missing."
            echo "** Using the boost headers in include_after, but this may cause version mismatches..."
        endif
    endif

endif

kjb_setenv KJB_HAVE_BST_POPTIONS "${kjb_have_bst_poptions}"
kjb_setenv LIB_BST_POPTIONS "${lib_bst_poptions}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_BOOST}) then
        echo "Script init_compile skipped LIB_BST_POPTIONS due to NO_BOOST"
    else if ("${KJB_HAVE_BST_POPTIONS}" != "") then
        echo "Script init_compile found BST_POPTIONS"
        echo "    LIB_BST_POPTIONS: ${LIB_BST_POPTIONS}"
        echo "    include: ${bst_poptions_inc_dir}"
        echo "    load   : ${bst_poptions_load_dir}"
    else
        echo "Script init_compile did NOT find BST_POPTIONS"
    endif
endif

# -----------------------------------------------------------------------------
# ----------------------- Boost threads library ---------------------

set kjb_have_bst_thread = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_BST_THREAD"
set lib_bst_thread = ""
kjb_setenv OPTIONS_BST_THREAD ""
kjb_setenv CC_FLAGS_BST_THREAD ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} BST_THREAD:boost/thread/.*\.hpp"
set optional_libs = "${optional_libs} BST_THREAD:boost/thread\.hpp"

set bst_thread_inc_dir = ""
set bst_thread_load_dir = ""
set use_bst_thread_mt = ""

if (! ${NO_BOOST}) then
    foreach load_dir (${boost_load_dirs}) 
        if (! -d ${load_dir}) continue

        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_thread\\. | ${filter_non_devel}`
        set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_thread-mt\\. | ${filter_non_devel}`

        if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
            set bst_thread_load_dir = "${load_dir}"

            # Prefering mt does not work on macs at least.
            if ("${have_lib}" == "") set use_bst_thread_mt = "-mt"
            break
        endif
    end

    if ("${bst_thread_load_dir}" == "") then
        foreach load_dir (${load_dirs}) 
            if (! -d ${load_dir}) continue

            if ("${BOOST_VERSION}" != "") then
                foreach boost_link_sub_dir (${boost_link_sub_dirs}) 
                    if (! -d ${load_dir}/${boost_link_sub_dir}) continue

                    set have_lib = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_thread\\. | ${filter_non_devel}`
                    set have_lib_mt = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_thread-mt\\. | ${filter_non_devel}`

                    if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                        set bst_thread_load_dir = "${load_dir}/${boost_link_sub_dir}"

                        # Prefering mt does not work on macs at least.
                        if ("${have_lib}" == "") set use_bst_thread_mt = "-mt"
                        break
                    endif
                 end

                 if ("${bst_thread_load_dir}" != "") break
            else 
                set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_thread\\. | ${filter_non_devel}`
                set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_thread-mt\\. | ${filter_non_devel}`

                if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                    set bst_thread_load_dir = "${load_dir}"

                    # Prefering mt does not work on macs at least.
                    if ("${have_lib}" == "") set use_bst_thread_mt = "-mt"
                    break
                endif
            endif
        end
    endif
    
    if ("${bst_thread_load_dir}" != "") then
        if (-e ${boost_inc_dir}/boost/thread/thread.hpp) then
            set bst_thread_inc_dir = "${boost_inc_dir}" 
        endif
    endif

    if ("${bst_thread_inc_dir}" != "") then
        if ("${BOOST_VERSION}" != "") then
            #
            # If we specified a boost version, then where we found stuff needs
            # to have priority. It is unlikely, but possible that we found
            # things in several places. It might be a bit over the top, but we
            # check for that here, and strip duplicates, and also emit a
            # warning.
            #           
            #           
            set found = 0
            foreach cur_inc_dir (${boost_before_inc_dirs}) 
                if ("${cur_inc_dir}" == "${bst_thread_inc_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_inc_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost include parts in different places."
                endif 

                set boost_before_inc_dirs = "${boost_before_inc_dirs} ${bst_thread_inc_dir}" 
            endif 

            set found = 0
            foreach cur_load_dir (${boost_before_load_dirs}) 
                if ("${cur_load_dir}" == "${bst_thread_load_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_load_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost load parts in different places."
                endif 

                set boost_before_load_dirs = "${boost_before_load_dirs} ${bst_thread_load_dir}" 
            endif 
        endif 

        set kjb_have_bst_thread = "-DKJB_HAVE_BST_THREAD"
        set lib_bst_thread = "-lboost_thread${use_bst_thread_mt} -lboost_system${use_bst_thread_mt}"

        if ($?UBUNTU_RELEASE) then
           if ("${UBUNTU_RELEASE}" == "14.04") then
               set lib_bst_thread = "${lib_bst_thread} -lpthread"
           endif
        endif

        set needed_inc_dirs = "${needed_inc_dirs} ${bst_thread_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${bst_thread_load_dir}"
        set needed_for_libs = "${needed_for_libs} BST_THREAD"

        set kjb_have = "${kjb_have} ${kjb_have_bst_thread}"

        if($bst_thread_inc_dir != `echo $bst_thread_inc_dir | sed 's/include_after//'`) then
            echo "** WARNING: boost_thread library was found, but headers were missing."
            echo "** Using the boost headers in include_after, but this may cause version mismatches..."
        endif
    endif
endif

kjb_setenv KJB_HAVE_BST_THREAD "${kjb_have_bst_thread}"
kjb_setenv LIB_BST_THREAD "${lib_bst_thread}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_BOOST}) then
        echo "Script init_compile skipped LIB_BST_THREAD due to NO_BOOST"
    else if ("${KJB_HAVE_BST_THREAD}" != "") then
        echo "Script init_compile found BST_THREAD"
        echo "    LIB_BST_THREAD: ${LIB_BST_THREAD}"
        echo "    include: ${bst_thread_inc_dir}"
        echo "    load   : ${bst_thread_load_dir}"
    else
        echo "Script init_compile did NOT find BST_THREAD"
    endif
endif

# -----------------------------------------------------------------------------
# ----------------------- Boost system library ---------------------

set kjb_have_bst_system = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_BST_SYSTEM"
set lib_bst_system = ""
kjb_setenv OPTIONS_BST_SYSTEM ""
kjb_setenv CC_FLAGS_BST_SYSTEM ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} BST_SYSTEM:boost/system/.*\.hpp"

set bst_system_inc_dir = ""
set bst_system_load_dir = ""
set use_bst_system_mt = ""

if (! ${NO_BOOST}) then
    foreach load_dir (${boost_load_dirs}) 
        if (! -d ${load_dir}) continue

        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_system\\. | ${filter_non_devel}`
        set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_system-mt\\. | ${filter_non_devel}`

        if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
            set bst_system_load_dir = "${load_dir}"

            # Prefering mt does not work on macs at least.
            if ("${have_lib}" == "") set use_bst_system_mt = "-mt"
            break
        endif
    end

    if ("${bst_system_load_dir}" == "") then
        foreach load_dir (${load_dirs}) 
            if (! -d ${load_dir}) continue

            if ("${BOOST_VERSION}" != "") then
                foreach boost_link_sub_dir (${boost_link_sub_dirs}) 
                    if (! -d ${load_dir}/${boost_link_sub_dir}) continue

                    set have_lib = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_system\\. | ${filter_non_devel}`
                    set have_lib_mt = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_system-mt\\. | ${filter_non_devel}`

                    if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                        set bst_system_load_dir = "${load_dir}/${boost_link_sub_dir}"

                        # Prefering mt does not work on macs at least.
                        if ("${have_lib}" == "") set use_bst_system_mt = "-mt"
                        break
                    endif
                end

                if ("${bst_system_load_dir}" != "") break
            else 
                set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_system\\. | ${filter_non_devel}`
                set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_system-mt\\. | ${filter_non_devel}`

                if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                    set bst_system_load_dir = "${load_dir}"

                    # Prefering mt does not work on macs at least.
                    if ("${have_lib}" == "") set use_bst_system_mt = "-mt"
                    break
                endif
            endif
        end
    endif
    
    if ("${bst_system_load_dir}" != "") then
        if (-e ${boost_inc_dir}/boost/system/system_error.hpp) then
            set bst_system_inc_dir = "${boost_inc_dir}" 
        endif
    endif

    if ("${bst_system_inc_dir}" != "") then
        if ("${BOOST_VERSION}" != "") then
            #
            # If we specified a boost version, then where we found it needs to
            # have priority. It is unlikely, but possible that we found boost in
            # several places. It might be a bit over the top, but we check for
            # that here, strip duplicates, and emit a warning.
            #
            set found = 0
            foreach cur_inc_dir (${boost_before_inc_dirs}) 
                if ("${cur_inc_dir}" == "${bst_system_inc_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_inc_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost include parts in different places."
                endif 

                set boost_before_inc_dirs = "${boost_before_inc_dirs} ${bst_system_inc_dir}" 
            endif 

            set found = 0
            foreach cur_load_dir (${boost_before_load_dirs}) 
                if ("${cur_load_dir}" == "${bst_system_load_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_load_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost load parts in different places."
                endif 

                set boost_before_load_dirs = "${boost_before_load_dirs} ${bst_system_load_dir}" 
            endif 
        endif 

        set kjb_have_bst_system = "-DKJB_HAVE_BST_SYSTEM"
        set lib_bst_system = "-lboost_system${use_bst_system_mt}"

        set needed_inc_dirs = "${needed_inc_dirs} ${bst_system_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${bst_system_load_dir}"
        set needed_for_libs = "${needed_for_libs} BST_SYSTEM"

        set kjb_have = "${kjb_have} ${kjb_have_bst_system}"

        if($bst_system_inc_dir != `echo $bst_system_inc_dir | sed 's/include_after//'`) then
            echo "** WARNING: boost_system library was found, but headers were missing."
            echo "** Using the boost headers in include_after, but this may cause version mismatches..."
        endif
    endif
endif

kjb_setenv KJB_HAVE_BST_SYSTEM "${kjb_have_bst_system}"
kjb_setenv LIB_BST_SYSTEM "${lib_bst_system}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_BOOST}) then
        echo "Script init_compile skipped LIB_BST_SYSTEM due to NO_BOOST"
    else if ("${KJB_HAVE_BST_SYSTEM}" != "") then
        echo "Script init_compile found BST_SYSTEM"
        echo "    LIB_BST_SYSTEM: ${LIB_BST_SYSTEM}"
        echo "    include: ${bst_system_inc_dir}"
        echo "    load   : ${bst_system_load_dir}"
    else
        echo "Script init_compile did NOT find BST_SYSTEM"
    endif
endif

# -----------------------------------------------------------------------------
# ----------------------- Boost filesystem library ---------------------

set kjb_have_bst_filesystem = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_BST_FILESYSTEM"
set lib_bst_filesystem = ""
kjb_setenv OPTIONS_BST_FILESYSTEM ""
kjb_setenv CC_FLAGS_BST_FILESYSTEM ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} BST_FILESYSTEM.BST_SYSTEM:boost/filesystem/.*\.hpp"
set optional_libs = "${optional_libs} BST_FILESYSTEM.BST_SYSTEM:boost/filesystem\.hpp"

set bst_filesystem_inc_dir = ""
set bst_filesystem_load_dir = ""
set use_bst_filesystem_mt = ""

if (! ${NO_BOOST}) then
    foreach load_dir (${boost_load_dirs}) 
        if (! -d ${load_dir}) continue

        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_filesystem\\. | ${filter_non_devel}`
        set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_filesystem-mt\\. | ${filter_non_devel}`

        if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
            set bst_filesystem_load_dir = "${load_dir}"

            # Prefering mt does not work on macs at least.
            if ("${have_lib}" == "") set use_bst_filesystem_mt = "-mt"
            break
        endif
    end

    if ("${bst_filesystem_load_dir}" == "") then
        foreach load_dir (${load_dirs}) 
            if (! -d ${load_dir}) continue

            if ("${BOOST_VERSION}" != "") then
                foreach boost_link_sub_dir (${boost_link_sub_dirs}) 
                    if (! -d ${load_dir}/${boost_link_sub_dir}) continue
                    set have_lib = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_filesystem\\. | ${filter_non_devel}`
                    set have_lib_mt = `/bin/ls -1 ${load_dir}/${boost_link_sub_dir} | grep ^libboost_filesystem-mt\\. | ${filter_non_devel}`

                    if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                        set bst_filesystem_load_dir = "${load_dir}/${boost_link_sub_dir}"

                        # Prefering mt does not work on macs at least.
                        if ("${have_lib}" == "") set use_bst_filesystem_mt = "-mt"
                        break
                    endif
                 end

                 if ("${bst_filesystem_load_dir}" != "") break
            else 
                set have_lib = `/bin/ls -1 ${load_dir} | grep ^libboost_filesystem\\. | ${filter_non_devel}`
                set have_lib_mt = `/bin/ls -1 ${load_dir} | grep ^libboost_filesystem-mt\\. | ${filter_non_devel}`

                if (("${have_lib}" != "") || ("${have_lib_mt}" != "")) then
                    set bst_filesystem_load_dir = "${load_dir}"

                    # Prefering mt does not work on macs at least.
                    if ("${have_lib}" == "") set use_bst_filesystem_mt = "-mt"
                    break
                endif
            endif
        end
    endif
    
    if ("${bst_filesystem_load_dir}" != "") then
        if (-e ${boost_inc_dir}/boost/filesystem/path.hpp) then
            set bst_filesystem_inc_dir = "${boost_inc_dir}" 
        endif
    endif

    if ("${bst_filesystem_inc_dir}" != "") then
        if ("${BOOST_VERSION}" != "") then
            #
            # If we specified a boost version, then where we found it needs to
            # have priority. It is unlikely, but possible that we found boost in
            # several places. It might be a bit over the top, but we check for
            # that here, strip duplicates, and emit a warning.
            #
            set found = 0
            foreach cur_inc_dir (${boost_before_inc_dirs}) 
                if ("${cur_inc_dir}" == "${bst_filesystem_inc_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_inc_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost include parts in different places."
                endif 

                set boost_before_inc_dirs = "${boost_before_inc_dirs} ${bst_filesystem_inc_dir}" 
            endif 

            set found = 0
            foreach cur_load_dir (${boost_before_load_dirs}) 
                if ("${cur_load_dir}" == "${bst_filesystem_load_dir}") then 
                    set found = 1
                    break
                endif
            end

            if (! ${found}) then
                if ("${boost_before_load_dirs}" != "") then
                    ${P_STDERR} "Warning: Found specified boost load parts in different places."
                endif 

                set boost_before_load_dirs = "${boost_before_load_dirs} ${bst_filesystem_load_dir}" 
            endif 
        endif 

        set kjb_have_bst_filesystem = "-DKJB_HAVE_BST_FILESYSTEM"
        set lib_bst_filesystem = "-lboost_filesystem${use_bst_filesystem_mt}"

        set needed_inc_dirs = "${needed_inc_dirs} ${bst_filesystem_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${bst_filesystem_load_dir}"
        set needed_for_libs = "${needed_for_libs} BST_FILESYSTEM"

        set kjb_have = "${kjb_have} ${kjb_have_bst_filesystem}"

        if($bst_filesystem_inc_dir != `echo $bst_filesystem_inc_dir | sed 's/include_after//'`) then
            echo "** WARNING: boost_filesystem library was found, but headers were missing."
            echo "** Using the boost headers in include_after, but this may cause version mismatches..."
        endif
    endif
endif

kjb_setenv KJB_HAVE_BST_FILESYSTEM "${kjb_have_bst_filesystem}"
kjb_setenv LIB_BST_FILESYSTEM "${lib_bst_filesystem}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_BOOST}) then
        echo "Script init_compile skipped LIB_BST_FILESYSTEM due to NO_BOOST"
    else if ("${KJB_HAVE_BST_FILESYSTEM}" != "") then
        echo "Script init_compile found BST_FILESYSTEM"
        echo "    LIB_BST_FILESYSTEM: ${LIB_BST_FILESYSTEM}"
        echo "    include: ${bst_filesystem_inc_dir}"
        echo "    load   : ${bst_filesystem_load_dir}"
    else
        echo "Script init_compile did NOT find BST_FILESYSTEM"
    endif
endif

# -----------------------------------------------------------------------------

if ("${boost_before_inc_dirs}" != "") then
    set before_inc_dirs = "${boost_before_inc_dirs} ${before_inc_dirs}" 

    if ($?KJB_VERBOSE) then
        echo ""
        echo "Due to specific boost version request "
        echo "    before_inc_dirs updated to:  ${before_inc_dirs}"
        echo " "
    endif
endif 

if ("${boost_before_load_dirs}" != "") then
    set before_load_dirs = "${boost_before_load_dirs} ${before_load_dirs}" 

    if ($?KJB_VERBOSE) then
        echo "Due to specific boost version request "
        echo "    before_load_dirs updated to: ${before_load_dirs}"
        echo " "
    endif
endif 

# -----------------------------------------------------------------------------

set kjb_have_opencv = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_OPENCV"
set lib_opencv =  ""
kjb_setenv OPTIONS_OPENCV ""

# OpenCV includes have // comments.
#
#if (${kjb_cc_is_gcc}) then
#    kjb_setenv CC_FLAGS_OPENCV "-std=gnu99"
#else 
#    kjb_setenv CC_FLAGS_OPENCV ""
#endif

# Likely out of date, and not necessarily (ever) used. 
set gpu_enabled_libs = "${gpu_enabled_libs} opencv2/opencv\.hpp opencv2/opencv\.h " 

set opencv_inc_dir = ""
set opencv_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        # For OpenCV the logic below might break unless we found exactly the
        # core lib .a or .so. 
        # 
        ### set have_lib = `/bin/ls -1 ${load_dir} | grep ^libopencv_core\\. | ${filter_non_devel}`

        if ((-e ${load_dir}/libopencv_core.a) || (-e ${load_dir}/libopencv_core.so) || (-e ${load_dir}/libopencv_core.dylib)) then 
            set opencv_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${opencv_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if ((-e ${inc_dir}/opencv2/opencv.hpp) || (-e ${inc_dir}/opencv2/opencv.h) ) then 
                set opencv_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${opencv_inc_dir}" != "") then
        set kjb_have_opencv = "-DKJB_HAVE_OPENCV"
        
        # We list all OpenCV libs we might be interested in, in the appropriate
        # load order, in case we are building static (which does not work very
        # well currently, so there is a good chance we are not doing that).
        # Unfortunately, it is not very clear what all the dependencies are so
        # this may need some tweaking from time to time.
        #
        set opencv_sub_libs = "flann shape stitching superres videostab ml highgui videoio imgcodecs calib3d objdetect features2d video photo imgproc core"

        set lib_opencv = ""

        set acoomadate_sub_libraries = 0
        # Bailing on all this fancy stuff about sub libs. Lets try simply
        # thinking of OpenCV as one library with a long name. If you want
        # OpenCV, you get get it all. 
        #
        if ($acoomadate_sub_libraries) then 
            pushd ${opencv_load_dir} > /dev/null
               foreach opencv_sub_lib (${opencv_sub_libs}) 
                   if ((-e "libopencv_${opencv_sub_lib}.a") || (-e "libopencv_${opencv_sub_lib}.so") || (-e "libopencv_${opencv_sub_lib}.dylib")) then
                        set uc_opencv_sub_lib = `echo ${opencv_sub_lib} | sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`
                        set lib_opencv = "${lib_opencv} -lopencv_${opencv_sub_lib}"

                        set optional_libs = "${optional_libs} CV_${uc_opencv_sub_lib}:opencv2/${opencv_sub_lib}\.hpp CV_${uc_opencv_sub_lib}:opencv2/${opencv_sub_lib}/.*\.h CV_${uc_opencv_sub_lib}:opencv2/${opencv_sub_lib}/.*\.hpp"

                        set needed_inc_dirs = "${needed_inc_dirs} ${opencv_inc_dir}"
                        set needed_load_dirs = "${needed_load_dirs} ${opencv_load_dir}"
                        set needed_for_libs = "${needed_for_libs} CV_${uc_opencv_sub_lib}"

                        setenv LIB_CV_${uc_opencv_sub_lib} " -lopencv_${opencv_sub_lib}"
                   endif
               end
            popd > /dev/null
        else 
           foreach opencv_sub_lib (${opencv_sub_libs}) 
               if ((-d "${opencv_inc_dir}/opencv2/${opencv_sub_lib}.hpp") || (-d "${opencv_inc_dir}/opencv2/${opencv_sub_lib}")) then
                   if ((-e "${opencv_load_dir}/libopencv_${opencv_sub_lib}.a") || (-e "${opencv_load_dir}/libopencv_${opencv_sub_lib}.so") || (-e "${opencv_load_dir}/libopencv_${opencv_sub_lib}.dylib")) then
                        set lib_opencv = "${lib_opencv} -lopencv_${opencv_sub_lib}"
                        set optional_libs = "${optional_libs} OPENCV:opencv2/${opencv_sub_lib}\.hpp OPENCV:opencv2/${opencv_sub_lib}/.*\.h OPENCV:opencv2/${opencv_sub_lib}/.*\.hpp"
                   endif
               endif
            end
        endif

#         if ("${KJB_HAVE_PNG}" != "") then
#             set lib_opencv = "${lib_opencv} -lpng"
#         endif

        set needed_inc_dirs = "${needed_inc_dirs} ${opencv_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${opencv_load_dir}"
        set needed_for_libs = "${needed_for_libs} OPENCV"

        set kjb_have = "${kjb_have} ${kjb_have_opencv}"
    endif
endif

kjb_setenv KJB_HAVE_OPENCV "${kjb_have_opencv}"
kjb_setenv LIB_OPENCV "${lib_opencv}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_OPENCV due to NO_LIBS"
    else if ("${KJB_HAVE_OPENCV}" != "") then
        echo "Script init_compile found OPENCV (version 2 or above)"
        echo "    LIB_OPENCV: ${LIB_OPENCV}"
        echo "    include: ${opencv_inc_dir}"
        echo "    load   : ${opencv_load_dir}"
    else
        echo "Script init_compile did NOT find OPENCV (only looked for version 2 or above)"
    endif
endif

# -----------------------------------------------------------------------------
#                       DLIB 
#
set kjb_have_dlib = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_DLIB"
set lib_dlib =  ""
kjb_setenv OPTIONS_DLIB ""

set dlib_inc_dir = ""
set dlib_load_dir = ""

# This library is only used to support other libraries (e.g., OpenFace). So, we
# actually lie about these (I think it depends on OpenCV). But keep the code
# ready for adding dependencies. 
set dependencies = "" 
set missing_dependencies = ""

foreach dependency ($dependencies) 
    if (`eval echo '$'KJB_HAVE_$dependency` == "") then
        set missing_dependencies = "${dependency} ${missing_dependencies}"
    endif
end 

if ((! ${NO_LIBS}) && ("${missing_dependencies}" == "")) then
    foreach load_dir (${load_dirs}) 
        if ((-e ${load_dir}/libdlib.a) || (-e ${load_dir}/liblib.so) || (-e ${load_dir}/libdlib.dylib)) then 
            set dlib_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${dlib_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-d ${inc_dir}/dlib)  then
                set dlib_inc_dir = "${inc_dir}" 
                break
            endif
        end
    endif

    if ("${dlib_inc_dir}" != "") then
        set kjb_have_dlib = "-DKJB_HAVE_DLIB"
        set lib_dlib = "-ldlib" 

        # This library is only used to support other libraries (e.g., OpenFace). 
        set optional_libs = "${optional_libs} DLIB:dlib/.*\.h"
        
        foreach dependency ($dependencies) 
            set lib_dlib = "${lib_dlib} `eval echo '$'LIB_${dependency}`"
        end 

        set needed_inc_dirs = "${needed_inc_dirs} ${dlib_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${dlib_load_dir}"
        set needed_for_libs = "${needed_for_libs} DLIB"

        set kjb_have = "${kjb_have} ${kjb_have_dlib}"
    endif
endif

kjb_setenv KJB_HAVE_DLIB "${kjb_have_dlib}"
kjb_setenv LIB_DLIB "${lib_dlib}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_DLIB due to NO_LIBS"
    else if ("${missing_dependencies}" != "") then 
        echo "Script init_compile skipped LIB_DLIB due to missing dependencies. Specifically: ${missing_dependencies}"
    else if ("${KJB_HAVE_DLIB}" != "") then
        echo "Script init_compile found DLIB"
        echo "    LIB_DLIB: ${LIB_DLIB}"
        echo "    include: ${dlib_inc_dir}"
        echo "    load   : ${dlib_load_dir}"
    else
        echo "Script init_compile did NOT find DLIB"
    endif
endif

# -----------------------------------------------------------------------------
#                       OpenFace
#
# Currently, OpenFace is not set up as a "library" per se. Instead, it is a pair
# of dot-a files. We could, instead, have a library module for each one of them,
# but this has other issues. So, we just handle them as a pair. 

set kjb_have_openface = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_OPENFACE"
set lib_openface =  ""
kjb_setenv OPTIONS_OPENFACE ""

set openface_inc_dir = ""
set openface_load_dir = ""
set dependencies = "OPENCV DLIB LAPACK TBB"  
set missing_dependencies = ""

set lib_group = 'OPENFACE'

foreach dependency ($dependencies) 
    if (`eval echo '$'KJB_HAVE_$dependency` == "") then
        set missing_dependencies = "${dependency} ${missing_dependencies}"
    else 
        set lib_group = "${lib_group}.${dependency}"
    endif
end 

if ((! ${NO_LIBS}) && ("${missing_dependencies}" == "")) then
    foreach load_dir (${load_dirs}) 
        if ((-e ${load_dir}/libFaceAnalyser.a) || (-e ${load_dir}/libFaceAnalyser.so) || (-e ${load_dir}/libFaceAnalyser.dylib)) then 
            if ((-e ${load_dir}/libLandmarkDetector.a) || (-e ${load_dir}/libLandmarkDetector.so) || (-e ${load_dir}/libLandmarkDetector.dylib)) then 
                set openface_load_dir = "${load_dir}"
                break
            endif
        endif
    end

    if ("${openface_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            # OpenFace is an exception to the preferred rule that includes
            # should be identifiable as within a subdirectory. We cannot fix
            # this easily because their own includes do not do this. Shame! 
            #
            if (-e ${inc_dir}/OpenFace/FaceAnalyser.h)  then
                set openface_inc_dir = "${inc_dir}/OpenFace" 
                break
            endif
        end
    endif

    if ("${openface_inc_dir}" != "") then
        set kjb_have_openface = "-DKJB_HAVE_OPENFACE"
        set lib_openface = "-lFaceAnalyser -lLandmarkDetector" 

        # A perfect optional_libs is messy because we cannot rely on them being
        # includes with "OpenFace/" in front, but they have includes with a
        # variety of names which will likely change. As of Feb 5, 2017:  
        #
        # Includes in OpenFace/
        #    CCNF_patch_expert.h           LandmarkDetectionValidator.h  PAW.h                         SVR_dynamic_lin_regressors.h
        #    FaceAnalyser.h                LandmarkDetectorFunc.h        PDM.h                         SVR_patch_expert.h
        #    Face_utils.h                  LandmarkDetectorModel.h       Patch_experts.h               SVR_static_lin_regressors.h
        #    GazeEstimation.h              LandmarkDetectorParameters.h  SVM_dynamic_lin.h             stdafx.h
        #    LandmarkCoreIncludes.h        LandmarkDetectorUtils.h       SVM_static_lin.h
        #   
        set optional_libs = "${optional_libs} ${lib_group}:FaceAnalyser.\.h"
        set optional_libs = "${optional_libs} ${lib_group}:Face_utils\.h"
        set optional_libs = "${optional_libs} ${lib_group}:GazeEstimation\.h"
        set optional_libs = "${optional_libs} ${lib_group}:LandMark.*\.h"
        set optional_libs = "${optional_libs} ${lib_group}:PAW\.h"
        set optional_libs = "${optional_libs} ${lib_group}:PDM\.h"
        set optional_libs = "${optional_libs} ${lib_group}:Patch_experts\.h"
        set optional_libs = "${optional_libs} ${lib_group}:stdafx\.h"
        
        set needed_inc_dirs = "${needed_inc_dirs} ${openface_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${openface_load_dir}"
        set needed_for_libs = "${needed_for_libs} OPENFACE"

        set kjb_have = "${kjb_have} ${kjb_have_openface}"
    endif
endif

kjb_setenv KJB_HAVE_OPENFACE "${kjb_have_openface}"
kjb_setenv LIB_OPENFACE "${lib_openface}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_OPENFACE due to NO_LIBS"
    else if ("${missing_dependencies}" != "") then 
        echo "Script init_compile skipped LIB_OPENFACE due to missing dependencies. Specifically: ${missing_dependencies}"
    else if ("${KJB_HAVE_OPENFACE}" != "") then
        echo "Script init_compile found OPENFACE"
        echo "    LIB_OPENFACE: ${LIB_OPENFACE}"
        echo "    include: ${openface_inc_dir}"
        echo "    load   : ${openface_load_dir}"
    else
        echo "Script init_compile did NOT find OPENFACE"
    endif
endif

# -----------------------------------------------------------------------------
#                       ODE library
#
set kjb_have_ode = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_ODE"
set lib_ode = ""
kjb_setenv OPTIONS_ODE ""

# kjb_setenv CC_FLAGS_ODE `which ode-config > & /dev/null && ode-config --cflags || echo "-DdDOUBLE"`
kjb_setenv CC_FLAGS_ODE `which ode-config > & /dev/null && ode-config --cflags || echo ""`

# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the ODE library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} ODE:ode\.h"

set ode_inc_dir = ""
set ode_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libode\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set ode_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${ode_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/ode.h) then
                set ode_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all of them (i.e., breadth-first search).
        #
        if ("${ode_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/ode/ode.h) then 
                    # In Cartwheel, ode is included by ode/ode.h.
                    # set ode_inc_dir = "${inc_dir}/ode" 
                    set ode_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif
    endif

    if ("${ode_inc_dir}" != "") then
        set kjb_have_ode = "-DKJB_HAVE_ODE"
        set lib_ode = -lode
        # or, if ODE depends on YYY then instead of the above,
        # do something like set lib_ode = "-lode ${LIB_YYY}"
        # so that you link every library that your ode-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${ode_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${ode_load_dir}"
        set needed_for_libs = "${needed_for_libs} ODE"

        set kjb_have = "${kjb_have} ${kjb_have_ode}"
    endif
endif

kjb_setenv KJB_HAVE_ODE "${kjb_have_ode}"
kjb_setenv LIB_ODE "${lib_ode}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_ODE due to NO_LIBS"
    else if ("${KJB_HAVE_ODE}" != "") then
        echo "Script init_compile found ODE"
        echo "    LIB_ODE: ${LIB_ODE}"
        echo "    include: ${ode_inc_dir}"
        echo "    load   : ${ode_load_dir}"
    else
        echo "Script init_compile did NOT find ODE"
    endif
endif

# ----------------------- VLFeat library ---------------------

set kjb_have_vlfeat = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_VLFEAT" 
set lib_vlfeat = ""
kjb_setenv OPTIONS_VLFEAT ""
kjb_setenv CC_FLAGS_VLFEAT ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} VLFEAT:vl/.*\.h"

set vlfeat_inc_dir = ""
set vlfeat_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libvl\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set vlfeat_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${vlfeat_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/vl/sift.h) then
                set vlfeat_inc_dir = "${inc_dir}" 
                break
            endif
        end

    endif

    if ("${vlfeat_inc_dir}" != "") then
        set kjb_have_vlfeat = "-DKJB_HAVE_VLFEAT"
        set lib_vlfeat = -lvl

        set needed_inc_dirs = "${needed_inc_dirs} ${vlfeat_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${vlfeat_load_dir}"
        set needed_for_libs = "${needed_for_libs} VLFEAT"

        set kjb_have = "${kjb_have} ${kjb_have_vlfeat}"

        if($vlfeat_inc_dir != `echo $vlfeat_inc_dir | sed 's/include_after//'`) then
            echo "** WARNING: vlfeat library was found, but headers were missing."
            echo "** Using the vlfeat headers in include_after, but this may cause version mismatches..."
        endif
    endif
endif

kjb_setenv KJB_HAVE_VLFEAT "${kjb_have_vlfeat}"
kjb_setenv LIB_VLFEAT "${lib_vlfeat}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_VLFEAT due to NO_LIBS"
    else if ("${KJB_HAVE_VLFEAT}" != "") then
        echo "Script init_compile found VLFEAT"
        echo "    LIB_VLFEAT: ${LIB_VLFEAT}"
        echo "    include: ${vlfeat_inc_dir}"
        echo "    load   : ${vlfeat_load_dir}"
    else
        echo "Script init_compile did NOT find VLFEAT"
    endif
endif

# -----------------------------------------------------------------------------
# ----------------------- KDTREE++ header-only libraries---------------------

set kjb_have_kdtreexx = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_KDTREEXX"
set lib_kdtreexx = ""
kjb_setenv OPTIONS_KDTREEXX  ""
kjb_setenv CC_FLAGS_KDTREEXX ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} KDTREEXX:kdtree.hpp"

set kdtreexx_inc_dir = ""

if (! ${NO_LIBS}) then

    foreach inc_dir (${inc_dirs}) 
        if (-e ${inc_dir}/kdtree.hpp) then
            set kdtreexx_inc_dir = "${inc_dir}" 
            break
        endif
    end

    if("${kdtreexx_inc_dir}" == "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/kdtree++/kdtree.hpp) then
                set kdtreexx_inc_dir = "${inc_dir}/kdtree++" 
                break
            endif
        end
    endif


    if ("${kdtreexx_inc_dir}" != "") then
        set kjb_have_kdtreexx = "-DKJB_HAVE_KDTREEXX"
        set lib_kdtreexx = ""

        set needed_inc_dirs = "${needed_inc_dirs} ${kdtreexx_inc_dir}"

        # Kobus. Hacking the hack. 
        # # hack -- don't need a load dir, but must have one anyway
        # set needed_load_dirs = "${needed_load_dirs} ./" 
        set needed_load_dirs = "${needed_load_dirs} DUMMY" 

        set needed_for_libs = "${needed_for_libs} KDTREEXX"

        set kjb_have = "${kjb_have} ${kjb_have_kdtreexx}"
    endif
endif

kjb_setenv KJB_HAVE_KDTREEXX "${kjb_have_kdtreexx}"
kjb_setenv LIB_KDTREEXX "${lib_kdtreexx}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_KDTREEXX due to NO_LIBS"
    else if ("${KJB_HAVE_KDTREEXX}" != "") then
        echo "Script init_compile found KDTREEXX"
        echo "    include: ${kdtreexx_inc_dir}"
    else
        echo "Script init_compile did NOT find KDTREEXX"
    endif
endif

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# VTK  -- The Visualization Toolkit
# -----------------------------------------------------------------------------
set kjb_have_vtk = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_VTK"
set lib_vtk = ""
kjb_setenv OPTIONS_VTK ""
kjb_setenv CC_FLAGS_VTK ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the VTK library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} VTK:vtk.*\.h"

set vtk_inc_dir = ""
set vtk_load_dir = ""

if (${?NO_VTK} == 0) then
    kjb_setenv NO_VTK 0
else
    kjb_setenv NO_VTK $NO_VTK
endif

if ((! ${NO_LIBS}) && (! ${NO_VTK})) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libvtkHybrid\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set vtk_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${vtk_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/vtkVersion.h) then
                set vtk_inc_dir = "${inc_dir}" 
                break
            endif
        end


        # Check subdirectories.  Headers from multiple vtk versions may be
        # available, so check in order, starting with newest version
        if ("${vtk_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                set vtk_subdirs = `/usr/bin/find $inc_dir -maxdepth 1 -name 'vtk*' | sort -r -V`
                if("${vtk_subdirs}" != "") then
                    # echo $vtk_subdirs
                    foreach subdir (${vtk_subdirs})
                        if (-e ${subdir}/vtkVersion.h) then
                            set vtk_inc_dir = "${subdir}" 
                            break
                        endif
                    end

                    if("${vtk_inc_dir}" != "") then
                        break
                    endif
                endif
            end
        endif
    endif

    if ("${vtk_inc_dir}" != "") then
        set kjb_have_vtk = "-DKJB_HAVE_VTK"
        set lib_vtk = -lvtkHybrid
        # or, if VTK depends on YYY then instead of the above,
        # do something like set lib_vtk = "-lvtk ${LIB_YYY}"
        # so that you link every library that your vtk-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${vtk_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${vtk_load_dir}"
        set needed_for_libs = "${needed_for_libs} VTK"

        set kjb_have = "${kjb_have} ${kjb_have_vtk}"
    endif
endif

kjb_setenv KJB_HAVE_VTK "${kjb_have_vtk}"
kjb_setenv LIB_VTK "${lib_vtk}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_VTK due to NO_LIBS"
    else if ("${KJB_HAVE_VTK}" != "") then
        echo "Script init_compile found VTK"
        echo "    LIB_VTK: ${LIB_VTK}"
        echo "    include: ${vtk_inc_dir}"
        echo "    load   : ${vtk_load_dir}"
    else
        echo "Script init_compile did NOT find VTK"
    endif
endif

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# XERCES  -- A low-level xml parsing library
# -----------------------------------------------------------------------------

set kjb_have_xerces = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_XERCES"
set lib_xerces = ""
kjb_setenv OPTIONS_XERCES ""
kjb_setenv CC_FLAGS_XERCES ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the XERCES library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
# The backslash in "\.h" is intentional:  `man grep | grep period` is why.
set optional_libs = "${optional_libs} XERCES:xerces/.*\.h"

set xerces_inc_dir = ""
set xerces_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libxerces-c\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set xerces_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${xerces_load_dir}" != "") then
        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all of them (i.e., breadth-first search).
        #
        if ("${xerces_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/xercesc/dom/DOM.hpp) then 
                    # This can take two forms. We don't yet have a firm
                    # convention. If it is natural for the user to include
                    # xerces/xerces.h, then we use the first form. This seems best for
                    # overall consistency. If the user expects to be able to include
                    # xerces.h without the leading xerces/, the second form is needed.
                    # Note that some of our legacy dirs are using the second
                    # form, but perhaps this is a mistake. 
                    # 
                    set xerces_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif
    endif

    if ("${xerces_inc_dir}" != "") then
        set kjb_have_xerces = "-DKJB_HAVE_XERCES"
        set lib_xerces = -lxerces-c
        # or, if XERCES depends on YYY then instead of the above,
        # do something like set lib_xerces = "-lxerces ${LIB_YYY}"
        # so that you link every library that your xerces-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${xerces_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${xerces_load_dir}"
        set needed_for_libs = "${needed_for_libs} XERCES"

        set kjb_have = "${kjb_have} ${kjb_have_xerces}"
    endif
endif

kjb_setenv KJB_HAVE_XERCES "${kjb_have_xerces}"
kjb_setenv LIB_XERCES "${lib_xerces}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_XERCES due to NO_LIBS"
    else if ("${KJB_HAVE_XERCES}" != "") then
        echo "Script init_compile found XERCES"
        echo "    LIB_XERCES: ${LIB_XERCES}"
        echo "    include: ${xerces_inc_dir}"
        echo "    load   : ${xerces_load_dir}"
    else
        echo "Script init_compile did NOT find XERCES"
    endif
endif

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# XSD  -- XSD CodeSynthesis XML Binding Library
# -----------------------------------------------------------------------------
set kjb_have_xsd = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_XSD"
set lib_xsd = ""
kjb_setenv OPTIONS_XSD ""
kjb_setenv CC_FLAGS_XSD ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the XSD library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
# The backslash in "\.h" is intentional:  `man grep | grep period` is why.
set optional_libs = "${optional_libs} XSD:xsd/.*\.hxx"

set xsd_inc_dir = ""

if ((! ${NO_LIBS}) && ("${LIB_XERCES}" != "") ) then

    foreach inc_dir (${inc_dirs}) 
        if (-e ${inc_dir}/xsd/cxx/version.hxx) then
            set xsd_inc_dir = "${inc_dir}" 
            break
        endif
    end

    if ("${xsd_inc_dir}" != "") then
        set kjb_have_xsd = "-DKJB_HAVE_XSD ${kjb_have_xerces}"
        set lib_xsd = "${LIB_XERCES}"

        set needed_inc_dirs = "${needed_inc_dirs} ${xsd_inc_dir}"
        # Kobus. Hacking the hack. 
        # # hack -- don't need a load dir, but must have one anyway
        # set needed_load_dirs = "${needed_load_dirs} ./" 
        set needed_load_dirs = "${needed_load_dirs} DUMMY"
        set needed_for_libs = "${needed_for_libs} XSD"

        set kjb_have = "${kjb_have} ${kjb_have_xsd}"
    endif
endif

kjb_setenv KJB_HAVE_XSD "${kjb_have_xsd}"
kjb_setenv LIB_XSD "${lib_xsd}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_XSD due to NO_LIBS"
    else if ("${LIB_XERCES}" == "") then
        echo "Script init_compile skipped LIB_XSD due to missing dependency LIB_XERCES."
    else if ("${KJB_HAVE_XSD}" != "") then
        echo "Script init_compile found XSD"
        echo "    include: ${xsd_inc_dir}"
    else
        echo "Script init_compile did NOT find XSD"
    endif
endif


# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# FFMPEG -- A video-decoding/encoding library (part of ffmpeg)
# -----------------------------------------------------------------------------
set kjb_have_ffmpeg = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_FFMPEG"
set lib_ffmpeg = ""
kjb_setenv OPTIONS_FFMPEG ""
kjb_setenv CC_FLAGS_FFMPEG ""
 
set optional_libs = "${optional_libs} FFMPEG:libavcodec/.*\.h"
set optional_libs = "${optional_libs} FFMPEG:libavformat/.*\.h"
set optional_libs = "${optional_libs} FFMPEG:libswscale/.*\.h"
#set optional_libs = "${optional_libs} FFMPEG:libavfilter/.*\.h"
#set optional_libs = "${optional_libs} FFMPEG:libavdevice/.*\.h"
set optional_libs = "${optional_libs} FFMPEG:libavutil/.*\.h"
#set optional_libs = "${optional_libs} FFMPEG:libavpostprocess/.*\.h"

set ffmpeg_inc_dir = ""
set ffmpeg_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libavcodec\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set ffmpeg_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${ffmpeg_load_dir}" != "") then
        if ("${ffmpeg_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/libavcodec/avcodec.h) then 
                    set ffmpeg_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif
    endif

    if ("${ffmpeg_inc_dir}" != "") then
        set kjb_have_ffmpeg = "-DKJB_HAVE_FFMPEG"
        set lib_ffmpeg = "-lavutil -lavcodec -lswscale -lavformat "

        set needed_inc_dirs = "${needed_inc_dirs} ${ffmpeg_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${ffmpeg_load_dir}"
        set needed_for_libs = "${needed_for_libs} FFMPEG"

        set kjb_have = "${kjb_have} ${kjb_have_ffmpeg}"
    endif
endif

kjb_setenv KJB_HAVE_FFMPEG "${kjb_have_ffmpeg}"
kjb_setenv LIB_FFMPEG "${lib_ffmpeg}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_FFMPEG due to NO_LIBS"
    else if ("${KJB_HAVE_FFMPEG}" != "") then
        echo "Script init_compile found FFMPEG"
        echo "    LIB_FFMPEG: ${LIB_FFMPEG}"
        echo "    include: ${ffmpeg_inc_dir}"
        echo "    load   : ${ffmpeg_load_dir}"
    else
        echo "Script init_compile did NOT find FFMPEG"
    endif
endif

# -----------------------------------------------------------------------------
# CasADi-- Automatic differentiation library
# -----------------------------------------------------------------------------

set kjb_have_casadi = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_CASADI"
set lib_casadi = ""
kjb_setenv OPTIONS_CASADI ""
kjb_setenv CC_FLAGS_CASADI ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the CASADI library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
# The backslash in "\.h" is intentional:  `man grep | grep period` is why.
set optional_libs = "${optional_libs} CASADI:casadi/.*\.hpp"

set casadi_inc_dir = ""
set casadi_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libcasadi\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set casadi_load_dir = "${load_dir}"
            break
        endif
    end

    # If the library has multiple header files, replace casadix.h with the
    # filename of one typical, representative header file.  We will assume that
    # if we find this representative header, then all its usual friends will be
    # there too.
    if ("${casadi_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/casadi/casadi.hpp) then
                set casadi_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all of them (i.e., breadth-first search).
        #
        if ("${casadi_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/casadi/casadi/casadi.hpp) then 
                    # This can take two forms. We don't yet have a firm
                    # convention. If it is natural for the user to include
                    # casadi/casadi.h, then we use the first form. This seems best for
                    # overall consistency. If the user expects to be able to include
                    # casadi.h without the leading casadi/, the second form is needed.
                    # Note that some of our legacy dirs are using the second
                    # form, but perhaps this is a mistake. 
                    # 
                    set casadi_inc_dir = "${inc_dir}/casadi" 
                    break
                endif
            end
        endif
    endif

    if ("${casadi_inc_dir}" != "") then
        set kjb_have_casadi = "-DKJB_HAVE_CASADI"
        set lib_casadi = -lcasadi
        # or, if CASADI depends on YYY then instead of the above,
        # do something like set lib_casadi = "-lcasadi ${LIB_YYY}"
        # so that you link every library that your casadi-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${casadi_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${casadi_load_dir}"
        set needed_for_libs = "${needed_for_libs} CASADI"

        set kjb_have = "${kjb_have} ${kjb_have_casadi}"
    endif
endif

kjb_setenv KJB_HAVE_CASADI "${kjb_have_casadi}"
kjb_setenv LIB_CASADI "${lib_casadi}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_CASADI due to NO_LIBS"
    else if ("${KJB_HAVE_CASADI}" != "") then
        echo "Script init_compile found CASADI"
        echo "    LIB_CASADI: ${LIB_CASADI}"
        echo "    include: ${casadi_inc_dir}"
        echo "    load   : ${casadi_load_dir}"
    else
        echo "Script init_compile did NOT find CASADI"
    endif
endif

# ---------------------------------  OPENCL -----------------------------------

set kjb_have_opencl = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_OPENCL"
set lib_opencl = ""
kjb_setenv OPTIONS_OPENCL ""
kjb_setenv CC_FLAGS_OPENCL ""
#
# Having additional library signatures is OK.
#
set optional_libs = "${optional_libs} OPENCL:OpenCL/opencl\.h"
set optional_libs = "${optional_libs} OPENCL:CL/cl\.h"

set opencl_inc_dir = ""
set opencl_load_dir = ""

if (! ${NO_LIBS} && ! ${KJB_SUPPRESS_OPENCL}) then
   # Currently hacked as a special case.
   if ("${OS}" == "mac_osx") then
       foreach framework_dir (${framework_dirs})
           set have_fwk = `/bin/ls -1 ${framework_dir} | grep ^OpenCL.framework`
           if("${have_fwk}" != "") then
               set lib_opencl = "-framework OpenCL"
               set kjb_have_opencl = "-DKJB_HAVE_OPENCL"
           endif
       end
   else 
       #
       # At some point it seemed that some systems supported linking with a .so.VERSION
       # but not a .so linked to it, but this was either an erroneous conclusion or
       # perhaps some user specific environment variable. We decided that the real
       # problem is that if one does not install the "development" version of a
       # library package on some systems such as Ubuntu, then you do not get the
       # links presumably because you only "use" code, and don't compile it, and
       # the code that was build by others knows which library it wants. So, I am
       # going back to allowing .so, but not .so.VERSION.
       #
       # foreach dynamic_str ('\.a$' '\.so$' '\.so')
       foreach dynamic_str ('\.a$' '\.so$' '\.dylib$') 
           foreach load_dir (${load_dirs})
               set have_lib = `/bin/ls -1 ${load_dir} | grep ^libOpenCL${dynamic_str}`

               if (("${have_lib}" != "") ) then
                   set opencl_load_dir = "${load_dir}"
                   break
               endif
            end

            if ("${opencl_load_dir}" != "") break
       end

       if ("${opencl_load_dir}" != "") then
           foreach inc_dir (${inc_dirs})
               if ((-e ${inc_dir}/CL/cl.h)) then
                   set opencl_inc_dir = "${inc_dir}"
                   break
               endif
           end
       endif

       if ("${opencl_inc_dir}" != "") then
           set kjb_have_opencl = "-DKJB_HAVE_OPENCL"
           set opencl_load_dir = "${opencl_load_dir}"

           set lib_opencl = "-lOpenCL"

           set needed_inc_dirs = "${needed_inc_dirs} ${opencl_inc_dir}"
           set needed_load_dirs = "${needed_load_dirs} ${opencl_load_dir}"
           set needed_for_libs = "${needed_for_libs} OPENCL"

           set kjb_have = "${kjb_have} ${kjb_have_opencl}"
       endif
   endif
endif

kjb_setenv KJB_HAVE_OPENCL "${kjb_have_opencl}"
kjb_setenv LIB_OPENCL "${lib_opencl}"

if ($?KJB_VERBOSE) then
   echo ""
   if (${NO_LIBS}) then
       echo "Script init_compile skipped LIB_OPENCL due to NO_LIBS"
   else if (${KJB_SUPPRESS_OPENCL}) then
       echo "Script init_compile skipped LIB_OPENCL due to KJB_SUPPRESS_OPENCL"
   else if ("${KJB_HAVE_OPENCL}" != "") then
       echo "Script init_compile found OPENCL"
       echo "    LIB_OPENCL: ${LIB_OPENCL}"
       echo "    include: ${opencl_inc_dir}"
       echo "    load   : ${opencl_load_dir}"
   else
       echo "Script init_compile did NOT find OPENCL"
   endif
endif

# ----------------------- ergo sampling library ---------------------

set kjb_have_ergo = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_ERGO"
set lib_ergo = ""
kjb_setenv OPTIONS_ERGO ""
kjb_setenv CC_FLAGS_ERGO ""
# 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd as an indication that the library is used.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} ERGO:ergo/.*\.h"

set ergo_inc_dir = ""

if (! ${NO_LIBS}) then

    foreach inc_dir (${inc_dirs}) 
        if (-e ${inc_dir}/ergo/mh.h) then
            set ergo_inc_dir = "${inc_dir}" 
            break
        endif
    end


    if ("${ergo_inc_dir}" != "") then
        set kjb_have_ergo = "-DKJB_HAVE_ERGO"
        set lib_ergo = ""

        set needed_inc_dirs = "${needed_inc_dirs} ${ergo_inc_dir}"
        # Kobus. Hacking the hack. 
        # # hack -- don't need a load dir, but must have one anyway
        # set needed_load_dirs = "${needed_load_dirs} ./" 
        set needed_load_dirs = "${needed_load_dirs} DUMMY" 
        set needed_for_libs = "${needed_for_libs} ERGO"

        set kjb_have = "${kjb_have} ${kjb_have_ergo}"
    endif
endif

kjb_setenv KJB_HAVE_ERGO "${kjb_have_ergo}"
kjb_setenv LIB_ERGO "${lib_ergo}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_ERGO due to NO_LIBS"
    else if ("${KJB_HAVE_ERGO}" != "") then
        echo "Script init_compile found ERGO"
        echo "    include: ${ergo_inc_dir}"
    else
        echo "Script init_compile did NOT find ERGO"
    endif
endif

# -----------------------------------------------------------------------------
# SUNDIALS_CVODE -- Sundials ODE solver library
# -----------------------------------------------------------------------------

set kjb_have_sundials_cvode = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_SUNDIALS_CVODE"
set lib_sundials_cvode = ""
kjb_setenv OPTIONS_SUNDIALS_CVODE ""
kjb_setenv CC_FLAGS_SUNDIALS_CVODE ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the SUNDIALS_CVODE library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
# The backslash in "\.h" is intentional:  `man grep | grep period` is why.
set optional_libs = "${optional_libs} SUNDIALS_CVODE:cvode/cvode\.h"
set optional_libs = "${optional_libs} SUNDIALS_CVODE:cvode\.h"

set sundials_cvode_inc_dir = ""
set sundials_cvode_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libsundials_cvode\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set sundials_cvode_load_dir = "${load_dir}"
            break
        endif
    end

    # If the library has multiple header files, replace cvode.h with the
    # filename of one typical, representative header file.  We will assume that
    # if we find this representative header, then all its usual friends will be
    # there too.
    if ("${sundials_cvode_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/cvode.h) then
                set sundials_cvode_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all of them (i.e., breadth-first search).
        #
        if ("${sundials_cvode_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/cvode/cvode.h) then 
                    # This can take two forms. We don't yet have a firm
                    # convention. If it is natural for the user to include
                    # cvode/cvode.h, then we use the first form. This seems best for
                    # overall consistency. If the user expects to be able to include
                    # cvode.h without the leading cvode/, the second form is needed.
                    # Note that some of our legacy dirs are using the second
                    # form, but perhaps this is a mistake. 
                    # 
                    set sundials_cvode_inc_dir = "${inc_dir}" 
                    # set sundials_cvode_inc_dir = "${inc_dir}/cvode" 
                    break
                endif
            end
        endif
    endif

    if ("${sundials_cvode_inc_dir}" != "") then
        set kjb_have_sundials_cvode = "-DKJB_HAVE_SUNDIALS_CVODE"
        set lib_sundials_cvode = -lsundials_cvode
        # or, if SUNDIALS_CVODE depends on YYY then instead of the above,
        # do something like set lib_sundials_cvode = "-lsundials_cvode ${LIB_YYY}"
        # so that you link every library that your cvode-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${sundials_cvode_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${sundials_cvode_load_dir}"
        set needed_for_libs = "${needed_for_libs} SUNDIALS_CVODE"

        set kjb_have = "${kjb_have} ${kjb_have_sundials_cvode}"
    endif
endif

kjb_setenv KJB_HAVE_SUNDIALS_CVODE "${kjb_have_sundials_cvode}"
kjb_setenv LIB_SUNDIALS_CVODE "${lib_sundials_cvode}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_SUNDIALS_CVODE due to NO_LIBS"
    else if ("${KJB_HAVE_SUNDIALS_CVODE}" != "") then
        echo "Script init_compile found SUNDIALS_CVODE"
        echo "    LIB_SUNDIALS_CVODE: ${LIB_SUNDIALS_CVODE}"
        echo "    include: ${sundials_cvode_inc_dir}"
        echo "    load   : ${sundials_cvode_load_dir}"
    else
        echo "Script init_compile did NOT find SUNDIALS_CVODE"
    endif
endif

# -----------------------------------------------------------------------------
# SUNDIALS_PVEC-- Sundials Parallel Vector sub-library
# -----------------------------------------------------------------------------

set kjb_have_sundials_pvec = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_SUNDIALS_PVEC"
set lib_sundials_pvec = ""
kjb_setenv OPTIONS_SUNDIALS_PVEC ""
kjb_setenv CC_FLAGS_SUNDIALS_PVEC ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the SUNDIALS_PVEC library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
# The backslash in "\.h" is intentional:  `man grep | grep period` is why.
set optional_libs = "${optional_libs} SUNDIALS_PVEC:nvector/nvector_parallel\.h"
set optional_libs = "${optional_libs} SUNDIALS_PVEC:nvector_parallel\.h"

set sundials_pvec_inc_dir = ""
set sundials_pvec_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libsundials_nvecparallel\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set sundials_pvec_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${sundials_pvec_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/nvector_parallel.h) then
                set sundials_pvec_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all of them (i.e., breadth-first search).
        #
        if ("${sundials_pvec_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/nvector/nvector_parallel.h) then 
                    # This can take two forms. We don't yet have a firm
                    # convention. If it is natural for the user to include
                    # sundials_pvec/sundials_pvec.h, then we use the first form. This seems best for
                    # overall consistency. If the user expects to be able to include
                    # sundials_pvec.h without the leading sundials_pvec/, the second form is needed.
                    # Note that some of our legacy dirs are using the second
                    # form, but perhaps this is a mistake. 
                    # 
                    set sundials_pvec_inc_dir = "${inc_dir}" 
                    # set sundials_pvec_inc_dir = "${inc_dir}/sundials_pvec" 
                    break
                endif
            end
        endif
    endif

    if ("${sundials_pvec_inc_dir}" != "") then
        set kjb_have_sundials_pvec = "-DKJB_HAVE_SUNDIALS_PVEC"
        set lib_sundials_pvec = -lsundials_nvecparallel
        # or, if SUNDIALS_PVEC depends on YYY then instead of the above,
        # do something like set lib_sundials_pvec = "-lsundials_pvec ${LIB_YYY}"
        # so that you link every library that your sundials_pvec-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${sundials_pvec_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${sundials_pvec_load_dir}"
        set needed_for_libs = "${needed_for_libs} SUNDIALS_PVEC"

        set kjb_have = "${kjb_have} ${kjb_have_sundials_pvec}"
    endif
endif

kjb_setenv KJB_HAVE_SUNDIALS_PVEC "${kjb_have_sundials_pvec}"
kjb_setenv LIB_SUNDIALS_PVEC "${lib_sundials_pvec}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_SUNDIALS_PVEC due to NO_LIBS"
    else if ("${KJB_HAVE_SUNDIALS_PVEC}" != "") then
        echo "Script init_compile found SUNDIALS_PVEC"
        echo "    LIB_SUNDIALS_PVEC: ${LIB_SUNDIALS_PVEC}"
        echo "    include: ${sundials_pvec_inc_dir}"
        echo "    load   : ${sundials_pvec_load_dir}"
    else
        echo "Script init_compile did NOT find SUNDIALS_PVEC"
    endif
endif

# -----------------------------------------------------------------------------
# SUNDIALS_SVEC-- Sundials Serial Vector sub-library
# -----------------------------------------------------------------------------

set kjb_have_sundials_svec = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_SUNDIALS_SVEC"
set lib_sundials_svec = ""
kjb_setenv OPTIONS_SUNDIALS_SVEC ""
kjb_setenv CC_FLAGS_SUNDIALS_SVEC ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the SUNDIALS_SVEC library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
# The backslash in "\.h" is intentional:  `man grep | grep period` is why.
set optional_libs = "${optional_libs} SUNDIALS_SVEC:nvector/nvector_serial\.h"
set optional_libs = "${optional_libs} SUNDIALS_SVEC:nvector_serial\.h"

set sundials_svec_inc_dir = ""
set sundials_svec_load_dir = ""

if (! ${NO_LIBS}) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libsundials_nvecserial\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set sundials_svec_load_dir = "${load_dir}"
            break
        endif
    end

    if ("${sundials_svec_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/nvector_serial.h) then
                set sundials_svec_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all of them (i.e., breadth-first search).
        #
        if ("${sundials_svec_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/nvector/nvector_serial.h) then 
                    # This can take two forms. We don't yet have a firm
                    # convention. If it is natural for the user to include
                    # sundials_svec/sundials_svec.h, then we use the first form. This seems best for
                    # overall consistency. If the user expects to be able to include
                    # sundials_svec.h without the leading sundials_svec/, the second form is needed.
                    # Note that some of our legacy dirs are using the second
                    # form, but perhaps this is a mistake. 
                    # 
                    set sundials_svec_inc_dir = "${inc_dir}" 
                    # set sundials_svec_inc_dir = "${inc_dir}/sundials_svec" 
                    break
                endif
            end
        endif
    endif

    if ("${sundials_svec_inc_dir}" != "") then
        set kjb_have_sundials_svec = "-DKJB_HAVE_SUNDIALS_SVEC"
        set lib_sundials_svec = -lsundials_nvecserial
        # or, if SUNDIALS_SVEC depends on YYY then instead of the above,
        # do something like set lib_sundials_svec = "-lsundials_svec ${LIB_YYY}"
        # so that you link every library that your sundials_svec-dependent code requires.

        set needed_inc_dirs = "${needed_inc_dirs} ${sundials_svec_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${sundials_svec_load_dir}"
        set needed_for_libs = "${needed_for_libs} SUNDIALS_SVEC"

        set kjb_have = "${kjb_have} ${kjb_have_sundials_svec}"
    endif
endif

kjb_setenv KJB_HAVE_SUNDIALS_SVEC "${kjb_have_sundials_svec}"
kjb_setenv LIB_SUNDIALS_SVEC "${lib_sundials_svec}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_SUNDIALS_SVEC due to NO_LIBS"
    else if ("${KJB_HAVE_SUNDIALS_SVEC}" != "") then
        echo "Script init_compile found SUNDIALS_SVEC"
        echo "    LIB_SUNDIALS_SVEC: ${LIB_SUNDIALS_SVEC}"
        echo "    include: ${sundials_svec_inc_dir}"
        echo "    load   : ${sundials_svec_load_dir}"
    else
        echo "Script init_compile did NOT find SUNDIALS_SVEC"
    endif
endif

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
#                       Python libraries
#
set kjb_have_python = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_PYTHON"
set lib_python = ""
kjb_setenv OPTIONS_PYTHON ""
kjb_setenv CC_FLAGS_PYTHON ""
 
# Set up a signature for the library and corresponding include string (after
# the colon) that can be grep'd in source code.  If grep says the pattern is
# present in the source code, that means the program uses the PYTHON library.
#
# Multiple signatures should be used if more that one include indicates that
# this library may be needed, or the name of the include file changes with
# various systems. See OPENGL for an example. 
#
set optional_libs = "${optional_libs} PYTHON:Python\.h"

set python_inc_dir = ""
set python_load_dir = ""

set python_versions = "2.7 2.6 2.5"

if (! ${NO_LIBS}) then
    foreach version (${python_versions}) 
        foreach load_dir (${load_dirs}) 
            set have_lib = `/bin/ls -1 ${load_dir} | grep ^libpython${version}\\. | ${filter_non_devel}`

            if ("${have_lib}" != "") then
                set python_load_dir = "${load_dir}"
                break
            endif
        end

        if ("${python_load_dir}" != "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/Python.h) then
                    set python_inc_dir = "${inc_dir}" 
                    break
                endif
            end

            if ("${python_inc_dir}" == "") then
                foreach inc_dir (${inc_dirs}) 
                    if (-e ${inc_dir}/python${version}/Python.h) then 
                        set python_inc_dir = "${inc_dir}/python${version}" 
                        break
                    endif
                end
            endif
        endif

        if ("${python_inc_dir}" != "") then
            set kjb_have_python = "-DKJB_HAVE_PYTHON"
            set lib_python = -lpython${version}
            # or, if PYTHON depends on YYY then instead of the above,
            # do something like set lib_python = "-lpython ${LIB_YYY}"
            # so that you link every library that your python-dependent code requires.

            set needed_inc_dirs = "${needed_inc_dirs} ${python_inc_dir}"
            set needed_load_dirs = "${needed_load_dirs} ${python_load_dir}"
            set needed_for_libs = "${needed_for_libs} PYTHON"

            set kjb_have = "${kjb_have} ${kjb_have_python}"

            break
        endif
    end
endif

kjb_setenv KJB_HAVE_PYTHON "${kjb_have_python}"
kjb_setenv LIB_PYTHON "${lib_python}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_PYTHON due to NO_LIBS"
    else if ("${KJB_HAVE_PYTHON}" != "") then
        echo "Script init_compile found PYTHON"
        echo "    LIB_PYTHON: ${LIB_PYTHON}"
        echo "    include: ${python_inc_dir}"
        echo "    load   : ${python_load_dir}"
    else
        echo "Script init_compile did NOT find PYTHON"
    endif
endif

# -----------------------------------------------------------------------------
# -----   UA Cartwheel    (OBSOLETE) 
#
### set kjb_have_ua_cartwheel = ""
### set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_UA_CARTWHEEL"
### set lib_ua_cartwheel = ""
### kjb_setenv OPTIONS_UA_CARTWHEEL ""
### kjb_setenv CC_FLAGS_UA_CARTWHEEL "${CC_FLAGS_ODE}"
###  
### # Set up a signature for the library and corresponding include string (after
### # the colon) that can be grep'd in source code.  If grep says the pattern is
### # present in the source code, that means the program uses the UA_CARTWHEEL library.
### #
### # Multiple signatures should be used if more that one include indicates that
### # this library may be needed, or the name of the include file changes with
### # various systems. See OPENGL for an example. 
### #
### set optional_libs = "${optional_libs} UA_CARTWHEEL:Core/.*\.h"
### set optional_libs = "${optional_libs} UA_CARTWHEEL:Control/.*\.h"
### set optional_libs = "${optional_libs} UA_CARTWHEEL:MathLib/.*\.h"
### 
### set ua_cartwheel_inc_dir = ""
### set ua_cartwheel_load_dir = ""
### 
### if ((! ${NO_LIBS}) && ("${LIB_OPENGL}" != "") && ("${LIB_GSL}" != "") && ("${LIB_GLUT}" != "") && ("${LIB_GLEW}" != "")  && ("${LIB_ODE}" != "")) then
###     foreach load_dir (${load_dirs}) 
###         set have_lib = `/bin/ls -1 ${load_dir} | grep ^libcartwheel\\. | ${filter_non_devel}`
### 
###         if ("${have_lib}" != "") then
###             set ua_cartwheel_load_dir = "${load_dir}"
###             break
###         endif
###     end
### 
###     if ("${ua_cartwheel_load_dir}" != "") then
###         foreach inc_dir (${inc_dirs}) 
###             if (-e ${inc_dir}/Core/Cartwheel3D.h) then
###                 set ua_cartwheel_inc_dir = "${inc_dir}" 
###                 break
###             endif
###         end
### 
###         #
###         # If we want to check sub-directories of dirs in inc_dirs, we do them
###         # after we have tried all of them (i.e., breadth-first search).
###         #
###         if ("${ua_cartwheel_inc_dir}" == "") then
###             foreach inc_dir (${inc_dirs}) 
###                 if (-e ${inc_dir}/cartwheel/Core/CartWheel3D.h) then 
###                     # This can take two forms. We don't yet have a firm
###                     # convention. If it is natural for the user to include
###                     # cartwheel/ua_cartwheel.h, then we use the first form. This seems best for
###                     # overall consistency. If the user expects to be able to include
###                     # ua_cartwheel.h without the leading ua_cartwheel/, the second form is needed.
###                     # Note that some of our legacy dirs are using the second
###                     # form, but perhaps this is a mistake. 
###                     # 
###                     # set ua_cartwheel_inc_dir = "${inc_dir}" 
###                     set ua_cartwheel_inc_dir = "${inc_dir}/cartwheel" 
###                     break
###                 endif
###             end
###         endif
###     endif
### 
###     if ("${ua_cartwheel_inc_dir}" != "") then
###         set kjb_have_ua_cartwheel = "-DKJB_HAVE_UA_CARTWHEEL"
###         set lib_ua_cartwheel = "-lcartwheel ${LIB_OPENGL} ${LIB_GSL} ${LIB_GLUT} ${LIB_GLEW} ${LIB_ODE}"
###         # or, if UA_CARTWHEEL depends on YYY then instead of the above,
###         # do something like set lib_ua_cartwheel = "-lcartwheel ${LIB_YYY}"
###         # so that you link every library that your cartwheel-dependent code requires.
### 
###         set needed_inc_dirs = "${needed_inc_dirs} ${ua_cartwheel_inc_dir}"
###         set needed_load_dirs = "${needed_load_dirs} ${ua_cartwheel_load_dir}"
###         set needed_for_libs = "${needed_for_libs} UA_CARTWHEEL"
### 
###         set kjb_have = "${kjb_have} ${kjb_have_ua_cartwheel}"
###     endif
### endif
### 
### kjb_setenv KJB_HAVE_UA_CARTWHEEL "${kjb_have_ua_cartwheel}"
### kjb_setenv LIB_UA_CARTWHEEL "${lib_ua_cartwheel}"
### 
### if ($?KJB_VERBOSE) then
###     echo ""
###     if (${NO_LIBS}) then
###         echo "Script init_compile skipped LIB_UA_CARTWHEEL due to NO_LIBS"
###     else if ("${LIB_OPENGL}" == "") then
###         echo "Script init_compile skipped LIB_UA_CARTWHEEL due to missing dependency LIB_OPENGL."
###     else if ("${LIB_GLUT}" == "") then
###         echo "Script init_compile skipped LIB_UA_CARTWHEEL due to missing dependency LIB_GLUT."
###     else if ("${LIB_GSL}" == "") then
###         echo "Script init_compile skipped LIB_UA_CARTWHEEL due to missing dependency LIB_GSL."
###     else if ("${LIB_GLEW}" == "") then
###         echo "Script init_compile skipped LIB_UA_CARTWHEEL due to missing dependency LIB_GLEW."
###     else if ("${LIB_ODE}" == "") then
###         echo "Script init_compile skipped LIB_UA_CARTWHEEL due to missing dependency LIB_ODE."
###     else if ("${KJB_HAVE_UA_CARTWHEEL}" != "") then
###         echo "Script init_compile found UA_CARTWHEEL"
###         echo "    LIB_UA_CARTWHEEL: ${LIB_UA_CARTWHEEL}"
###         echo "    include: ${ua_cartwheel_inc_dir}"
###         echo "    load   : ${ua_cartwheel_load_dir}"
###     else
###         echo "Script init_compile did NOT find UA_CARTWHEEL"
###     endif
### endif
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# XXX  -- A template for adding entries to this file. 
# -----------------------------------------------------------------------------
# 
# This is a template for adding new external libraries.  We skip execution by
# using "if (0) then" below. 
#
# New libraries should be added after any possible dependencies. Thus lower
# level libraries such as X11 occur sooner, and libraries that are not used by
# other libraries occur later. 
#
# Don't forget to update Makefile-defs, Makefile-program, KJB/Makefile-2, and
# KJB_cpp/Makefile-2 (see comment block at the begining of this file). 
#
# -------
#
# Disable execution except for testing. This code is just for copy and paste. 
if (0) then

set kjb_have_xxx = ""
set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_XXX"
set lib_xxx = ""
kjb_setenv OPTIONS_XXX ""
kjb_setenv CC_FLAGS_XXX ""
 
set xxx_inc_dir = ""
set xxx_load_dir = ""

# Handling libraries needed if we want to use this one.  Often dependencies will
# be "" which has no effect. Most modules do not even do this because we just
# started doing it this way. If you are confident this library does not, and
# will not, ever have dependencies, then you could skip this. However, perhaps
# this library depends on OPENCV and LAPACK. Then:
#
set dependencies = "OPENCV LAPACK"  
set missing_dependencies = ""

# Initializes to the name of this module. "group" because it might get a string
# of dependencies after it. 
#
set lib_group = 'XXX'

foreach dependency ($dependencies) 
    if (`eval echo '$'KJB_HAVE_$dependency` == "") then
        set missing_dependencies = "${dependency} ${missing_dependencies}"
    else 
        set lib_group = "${lib_group}.${dependency}"
    endif
end 

if ((! ${NO_LIBS}) && ("${missing_dependencies}" == "")) then
    foreach load_dir (${load_dirs}) 
        set have_lib = `/bin/ls -1 ${load_dir} | grep ^libxxx\\. | ${filter_non_devel}`

        if ("${have_lib}" != "") then
            set xxx_load_dir = "${load_dir}"
            break
        endif
    end

    # If the library has multiple header files, replace xxx.h with the
    # filename of one typical, representative header file.  We will assume that
    # if we find this representative header, then all its usual friends will be
    # there too.
    if ("${xxx_load_dir}" != "") then
        foreach inc_dir (${inc_dirs}) 
            if (-e ${inc_dir}/xxx.h) then
                set xxx_inc_dir = "${inc_dir}" 
                break
            endif
        end

        #
        # If we want to check sub-directories of dirs in inc_dirs, we do them
        # after we have tried all of them (i.e., breadth-first search).
        #
        if ("${xxx_inc_dir}" == "") then
            foreach inc_dir (${inc_dirs}) 
                if (-e ${inc_dir}/xxx/xxx.h) then 
                    # This can take two forms. We don't yet have a firm
                    # convention. If it is natural for the user to include
                    # xxx/xxx.h, then we use the first form. This seems best for
                    # overall consistency. If the user expects to be able to include
                    # xxx.h without the leading xxx/, the second form is needed.
                    # Note that some of our legacy dirs are using the second
                    # form, but perhaps this is a mistake. 
                    # 
                    set xxx_inc_dir = "${inc_dir}" 
                    break
                endif
            end
        endif
    endif

    if ("${xxx_inc_dir}" != "") then
        set kjb_have_xxx = "-DKJB_HAVE_XXX"
        set lib_xxx = -lxxx

        # Set up a signature for the library and corresponding include string (after
        # the colon) that can be grep'd in source code.  If grep says the pattern is
        # present in the source code, that means the program uses the XXX library.
        #
        # Multiple signatures should be used if more that one include indicates that
        # this library may be needed, or the name of the include file changes with
        # various systems. See OPENGL for an example. 
        #
        # The backslash in "\.h" is intentional:  `man grep | grep period` is why.
        set optional_libs = "${optional_libs} ${lib_group}:xxx\.h"
        #
        # lib_group could simply be XXX, or something like XXX.YYY.ZZZ, if we
        # have dependencies. 

        set needed_inc_dirs = "${needed_inc_dirs} ${xxx_inc_dir}"
        set needed_load_dirs = "${needed_load_dirs} ${xxx_load_dir}"
        set needed_for_libs = "${needed_for_libs} XXX"

        set kjb_have = "${kjb_have} ${kjb_have_xxx}"
    endif
endif

kjb_setenv KJB_HAVE_XXX "${kjb_have_xxx}"
kjb_setenv LIB_XXX "${lib_xxx}"

if ($?KJB_VERBOSE) then
    echo ""
    if (${NO_LIBS}) then
        echo "Script init_compile skipped LIB_XXX due to NO_LIBS"
    else if ("${missing_dependencies}" != "") then 
        echo "Script init_compile skipped LIB_XXX due to missing dependencies. Specifically: ${missing_dependencies}"
    else if ("${KJB_HAVE_XXX}" != "") then
        echo "Script init_compile found XXX"
        echo "    LIB_XXX: ${LIB_XXX}"
        echo "    include: ${xxx_inc_dir}"
        echo "    load   : ${xxx_load_dir}"
    else
        echo "Script init_compile did NOT find XXX"
    endif
endif

# --------
# 
# Closing "endif" for the "if (0) then" 
#
endif

# # ----------------------------  KJB (load and go)  -----------------------------
# #
# # (Experimental, 2010), not currently executed. A quick try at making the load
# # and go version of the library coexist during building with the normal way of
# # doing so revealed subtleties that need to be resolved. So currently, we
# # maintain example code for class use separately. 
# if (0) then
# 
# # This is for the KJB library itself when premade versions are linked against.
# # This is indicated by including kjb.h (perhaps KJB.h makes more sense, at least
# # as an alternative?). 
# 
# set kjb_have_kjb = ""
# set all_kjb_have = "${all_kjb_have} -DKJB_HAVE_KJB"
# set lib_kjb = ""
# kjb_setenv OPTIONS_KJB ""
# kjb_setenv CC_FLAGS_KJB ""
# # 
# # Set up a signature for the library and corresponding include string (after
# # the colon) that can be grep'd as an indication that the library is used.
# #
# # Multiple signatures should be used if more that one include indicates that
# # this library may be needed, or the name of the include file changes with
# # various systems. See OPENGL for an example. 
# #
# set optional_libs = "${optional_libs} KJB:kjb\.h"
# 
# set kjb_inc_dir = ""
# set kjb_load_dir = ""
# 
# if (! ${NO_LIBS}) then
#     foreach load_dir (${load_dirs}) 
#         set have_lib = `/bin/ls -1 ${load_dir} | grep ^libKJB\\. | ${filter_non_devel}`
# 
#         if ("${have_lib}" != "") then
#             set kjb_load_dir = "${load_dir}"
#             break
#         endif
#     end
# 
#     if ("${kjb_load_dir}" != "") then
#         foreach inc_dir (${inc_dirs}) 
#             if (-e ${inc_dir}/kjb.h) then
#                 set kjb_inc_dir = "${inc_dir}" 
#                 break
#             endif
#         end
# 
#         #
#         # If we want to check sub-directories of dirs in inc_dirs, we do them
#         # after we have tried all them. 
#         #
#         if ("${kjb_inc_dir}" == "") then
#             foreach inc_dir (${inc_dirs}) 
#                 if (-e ${inc_dir}/kjb/kjb.h) then 
#                     set kjb_inc_dir = "${inc_dir}/kjb" 
#                     break
#                 endif
#             end
#         endif
#     endif
# 
#     if ("${kjb_inc_dir}" != "") then
#         set kjb_have_kjb = "-DKJB_HAVE_KJB"
#         set lib_kjb = -lKJB
# 
#         set needed_inc_dirs = "${needed_inc_dirs} ${kjb_inc_dir}"
#         set needed_load_dirs = "${needed_load_dirs} ${kjb_load_dir}"
#         set needed_for_libs = "${needed_for_libs} KJB"
# 
#         set kjb_have = "${kjb_have} ${kjb_have_kjb}"
#     endif
# endif
# 
# kjb_setenv KJB_HAVE_KJB "${kjb_have_kjb}"
# kjb_setenv LIB_KJB "${lib_kjb}"
# 
# if ($?KJB_VERBOSE) then
#     echo ""
#     if (${NO_LIBS}) then
#         echo "Script init_compile skipped LIB_KJB due to NO_LIBS"
#     else if ("${KJB_HAVE_KJB}" != "") then
#         echo "Script init_compile found KJB"
#         echo "    LIB_KJB: ${LIB_KJB}"
#         echo "    include: ${kjb_inc_dir}"
#         echo "    load   : ${kjb_load_dir}"
#     else
#         echo "Script init_compile did NOT find KJB"
#     endif
# endif
# 
# # Closing "endif" for the "if (0) then". We are currently disabling this code.
# endif

# -----------------------------------------------------------------------------

#
# End of optional external library processing. 
#

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------


if ($?KJB_VERBOSE) then
    echo " "
    echo "Distilling include and load dirs ..."
    echo " "
endif

set load_dirs = "${before_load_dirs} ${user_load_dirs} ${ivilab_load_dirs} ${system_load_dirs} ${gfortran_load_dir} ${after_load_dirs}" 

set pruned_opt_inc_dirs = ""
set pruned_aft_inc_dirs = ""

set pruned_load_dirs = ""

set needed_load_dirs = (${needed_load_dirs})
set needed_inc_dirs = (${needed_inc_dirs})
set needed_for_libs = (${needed_for_libs})
set num_needed = ${#needed_for_libs}

set need_after = 0
set aft_sep = ""

# Initialize the INCLUDE_ variables to a single blank. Generally we hope that
# most of them stay that way, but regardless we need to do this because it is
# possible that some libraries need multiple entries in INCLUDE_ that we need to
# grow by extending the variable. 
#
set count = 1

# while ($count <= ${num_needed})
#     set needed_for_lib = $needed_for_libs[$count]
#     kjb_setenv INCLUDE_${needed_for_lib} " "
#     @ count ++
# end 
# 
# set count = 1
#
# Process each found optional library. All include and load dirs for that
# library are checked against the default includes that are present for all
# compiles. If a dir is not among the default ones, then they are added to
# various environment variables. 
#

while ($count <= ${num_needed})
    set needed_for_lib = $needed_for_libs[$count]
    set needed_load_dir = $needed_load_dirs[$count]
    set needed_inc_dir = $needed_inc_dirs[$count]

    set parsed_inc_dirs = `echo ${needed_inc_dir} | sed 's/:/ /g'`

    set non_std_inc_dirs = ""

    # Look for parsed_inc_dir in various sets of included directories. It should
    # only in one of them, so the order here does not matter. 
    #
    foreach parsed_inc_dir (${parsed_inc_dirs}) 
        #
        # Check if the needed include it is in either a before include location
        # (currently always included) or a standard include location. If so,
        # then it does not need to be accounted for. 
        #
        set found = 0

        foreach std_inc_dir (${before_inc_dirs} ${default_opt_inc_dirs} ${std_inc_dirs})
            if ("${std_inc_dir}" == "${parsed_inc_dir}") then
                set found = 1
                break
            endif
        end 

        # Collect non-standard include locations for this library component. 
        #
        if (! ${found}) then
            set non_std_inc_dirs = "${non_std_inc_dirs} ${parsed_inc_dir}" 
        endif

        # Check if the parsed_inc_dir is the list of optional include dirs that
        # we have already seen. If it is there, then it is accounted for. 
        #
        if (! ${found}) then
            foreach pruned_opt_inc_dir (${pruned_opt_inc_dirs})
                if ("${pruned_opt_inc_dir}" == "${parsed_inc_dir}") then
                    set found = 1
                    break
                endif
            end 
        endif

        # If still not accounted for, then see if it is an optional include dir
        # that we have not seen yet.
        #
        if (! ${found}) then
            foreach opt_inc_dir (${extra_opt_inc_dirs})
                if ("${opt_inc_dir}" == "${parsed_inc_dir}") then
                    set found = 1
                    set pruned_opt_inc_dirs = "${pruned_opt_inc_dirs} ${opt_inc_dir}"
                    set needed_opt_inc_dirs = "${needed_opt_includes} ${INCLUDE_FLAG}${parsed_inc_dir}"

                    if ($?KJB_VERBOSE) then
                        echo "    Adding ${opt_inc_dir} to EXTRA_OPT_INCLUDES due to ${needed_for_lib}."
                        echo "    (This is only the first library considered that needs ${opt_inc_dir}.)"
                        echo " "
                    endif

                    break
                endif
            end 
        endif

        # If still not accounted for, then see if it in the after include
        # directory list.  First check if it is already accounted for. 
        #
        if (! ${found}) then
            foreach pruned_aft_inc_dir (${pruned_aft_inc_dirs})
                if ("${pruned_aft_inc_dir}" == "${parsed_inc_dir}") then
                    set found = 1
                    break
                endif
            end 
        endif

        # If it is not seen already, then look for it in the after include
        # directories. If it is found, this means that we may need the after
        # include directory, which is then always in the include list when we
        # compile. 
        #
        if (! ${found}) then
            foreach after_inc_dir (${after_inc_dirs})
                if ("${after_inc_dir}" == "${parsed_inc_dir}") then
                    set found = 1
                    set pruned_aft_inc_dirs = "${pruned_aft_inc_dirs}${aft_sep}${after_inc_dir}"
                    set used_inc_dirs = "${used_inc_dirs} ${parsed_inc_dir}"
                    set after_includes = "${after_includes}${aft_sep}${INCLUDE_AFTER_FLAG}${parsed_inc_dir}"
                    set generic_aft_includes = "${generic_aft_includes}${aft_sep}${GENERIC_INC_AFT_FLAG}${parsed_inc_dir}"
                    set aft_sep = " "
                    set need_after = 1

                    if ($?KJB_VERBOSE) then
                        echo "    Adding ${after_inc_dir} to AFTER_INCLUDES due to ${needed_for_lib}."
                        echo "    (This is only the first library considered that needs ${after_inc_dir}.)"
                        echo " "
                    endif

                    break
                endif
            end 
        endif
    end 

    ##########################################################################################

    # For all the non-standard include locations for this library component,
    # they are added to the component specific include environment variable.
    #
    if ("${non_std_inc_dirs}" != "") then
        set inc_str = ""

        foreach non_std_inc_dir (${non_std_inc_dirs}) 
            set inc_str = "${inc_str} ${INCLUDE_FLAG}${non_std_inc_dir}"
        end

        kjb_setenv INCLUDE_${needed_for_lib} "${inc_str}"

        if ($?KJB_VERBOSE) then
            echo "    Setting INCLUDE_${needed_for_lib} to ${inc_str}."
            echo "    because of non standard locations."
            echo " "
        endif
    else 
        kjb_setenv INCLUDE_${needed_for_lib} " "
    endif

    ##########################################################################################

    #
    # ###  Load dirs.  ###
    #
    set parsed_load_dirs = `echo ${needed_load_dir} | sed 's/:/ /g'`

    foreach parsed_load_dir (${parsed_load_dirs}) 
        # echo parsed_load_dir: $parsed_load_dir

        set found = 0

        # Hack part two. 
        if ("${parsed_load_dir}" == "DUMMY") then
            continue
        endif

        foreach load_dir ($pruned_load_dirs)
            if ("${load_dir}" == "${parsed_load_dir}") then
                set found = 1
                break
            endif
        end 

        # Check if the needed load directory is among the standard list of load
        # dirs. If it is not, then it is probably a hacked special case above.
        # Regardless, we treat it as specific to the library.
        #
        # Note that this is currently rarely used because we simply give the
        # linker a comprehensive set of places to lock for libraries, and this
        # is only for the cases where the library is not in one of them. 
        #
        if (! ${found}) then
            
            #
            # Perhaps load_dirs should be a subset that is common?
            #
            foreach load_dir ($load_dirs)
                if ("${load_dir}" == "${parsed_load_dir}") then
                    set found = 1
                    break
                endif
            end 

            if (! ${found}) then
                #
                # This inserts the load dir in front of the library strings already
                # in the environment variable LIB_XXX. If there are multiple
                # load dirs, they get added in prefix order. 
                #
                eval setenv LIB_${needed_for_lib} '"'-L${parsed_load_dir} '$'LIB_${needed_for_lib}'"'

                if ($do_cache ) then
                    echo LIB_${needed_for_lib} >>! $varname_fname
                endif
                ### the double eval statements above simulate a single call to kjb_setenv

                if ($?KJB_VERBOSE) then
                    echo "    Adding -L${parsed_load_dir} to LIB_${needed_for_lib}."
                    echo " "
                endif
            else
                set pruned_load_dirs = "${pruned_load_dirs} ${parsed_load_dir}" 
            endif
        endif
    end

    @ count ++
end

#################################################################################

# For all includes that did not get special treatment we want to set them to
# empty because if things change we want to make sure that they get reset.
# Linguring values in the cache state creates confusion! 

# This is a bit of a hack. We need a list of all libraries we consider which we
# extract from all_kjb_have. I am not sure if we use the exported version
# ALL_KJB_HAVE anymore. Perhaps we should be collecting the library names
# themselves, and the constructijng ALL_KJB_HAVE from that if needed. 

set all_lib_names = `echo ${all_kjb_have} | sed 's/-DKJB_HAVE_//g'`
# echo all_lib_names: $all_lib_names

foreach lib_name ($all_lib_names)
   set found = 0
   foreach needed_for_lib ($needed_for_libs)
       if ("${lib_name}" == "${needed_for_lib}") then
           set found = 1
           break
       endif
   end

   if (! $found) then
        kjb_setenv INCLUDE_${lib_name} ' '
   endif
end 

#################################################################################

set before_includes = ""

foreach before_inc_dir (${before_inc_dirs})
    set before_includes = "${before_includes} ${INCLUDE_FLAG}${before_inc_dir}"
end


# FIXME
#
# Handline osmesa could use cleanup for consistenct with other components (e.g.,
# boost).
#
# We really need to put the osmesa include directory first,
# to avoid compiling against conflicting versions of opengl
# (for example in /usr/lib). 
if (${use_osmesa}) then
    kjb_setenv BEFORE_INCLUDES "${before_includes} -I${osmesa_inc_dir}"
    echo BEFORE_INCLUDES: ${BEFORE_INCLUDES}
else 
    kjb_setenv BEFORE_INCLUDES "${before_includes}"
endif

# Collect standard includes with INCLUDE_FLAG (not INCLUDE_AFTER_FLAG) into
# std_after_includes. 
# Kobus: 16/10/10 --- it would be nice if what is going on here could be
# explained better. FIXME?
set std_after_includes = ""
foreach std_inc_dir (${std_inc_dirs})
    set std_after_includes = "${std_after_includes} ${INCLUDE_FLAG}${std_inc_dir}"
end 

#
# If the compiler does not support forcing searching includes after all others,
# then we arrange for it to be done. This means that all the standard includes
# need to be put into the symbol AFTER_INCLUDES before the stuff which needs
# to be included last. This is a bit dicey though, because figuring out all the
# standard includes is compiler specific. Currently we do not have any examples
# where this is necessary as the three systems we use (gnu, clang (gnu'ish), and
# icc) support idirafter. 
#
if ((${need_after}) && (! ${have_dir_after})) then
    ${ECHO} "Warning: We need an include after directory on a system without an option for this."
    ${ECHO} "         Emulating this requires knowning all the standard includes for the compiler."
    ${ECHO} "         Best to double check if the option is available for this compiler,"
    ${ECHO} "         and/or accurately find the stanard includes for this compiler,"
    ${ECHO} "         and/or fix the includes so we do not need this."
    ${ECHO} " "
    set after_includes = "${std_after_includes} ${after_includes}"
endif

set generic_aft_includes = "${std_after_includes} ${generic_aft_includes}"

###############################################################################

set default_opt_includes = ""
foreach opt_inc_dir (${default_opt_inc_dirs})
    set default_opt_includes = "${default_opt_includes} ${INCLUDE_FLAG}${opt_inc_dir}"
end 

kjb_setenv DEFAULT_OPT_INCLUDES "${default_opt_includes} "

kjb_setenv EXTRA_OPT_INCLUDES "${needed_opt_includes} "
kjb_setenv AFTER_INCLUDES "${after_includes}"
kjb_setenv GENERIC_AFT_INCLUDES "${generic_aft_includes}"

###############################################################################

# Construct a desired ordering of load dirs "LOAD_DIRS"
#
# We have a list of needed load dirs in pruned_load_dirs. However, we want these
# to be in order established in load_dirs tested, not in the order that they
# were added as a result of being needed. 
#
# So, for each load dir we know about, in the order that we want to search them,
# we check if we need that directory. 
#  
# OBSOLETE
# Further, to construct more useful pieces for LD_LIBRARY_PATH, we do those
# without "after" first, then "after"
#
kjb_setenv LOAD_DIRS ""
set temp_load_dirs = ""

# The variable MAN_PAGE_LOAD_DIRS is just used to echo how to link routines. The
# system needs a lot of improvement! (FIXME) 
# 
kjb_setenv MAN_PAGE_LOAD_DIRS ""
set man_page_load_dirs = ""

set found_dirs = ""
set ld_path_colon = ""
set after_ld_colon = ""
set kjb_ld_path = ""
set kjb_after_ld_path = ""

set ld_config_dirs = ""

# Add in the dummy directory "AFTER" so that we know when we are doing the
# after_load_dirs. But this means that this definition needs to be synchronized
# with above. 
#
### set load_dirs = "${ld_path_load_dirs} ${before_load_dirs} ${user_load_dirs} ${ivilab_load_dirs} ${system_load_dirs} AFTER ${after_load_dirs}" 
set load_dirs = "${before_load_dirs} ${user_load_dirs} ${ivilab_load_dirs} ${system_load_dirs} AFTER ${after_load_dirs}" 

set after = 0

foreach load_dir (${load_dirs})
    if ("${load_dir}" == "AFTER") then
        set after = 1
        continue
    endif

    set found = 0

    # Deal with the fact that load_dirs might have duplicates. 
    #
    foreach found_load_dir (${found_dirs})
        if ("${found_load_dir}" == "${load_dir}") then
            set found = 1
            break
        endif
    end

    if (${found}) then
        # We already have it!
        continue
    endif

    # Did we ever use the load_dir under consideration? 
    #
    foreach needed_load_dir (${pruned_load_dirs})
        if ("${needed_load_dir}" == "${load_dir}") then
            set found = 1
            set found_dirs = "${found_dirs} ${load_dir}"
            break
        endif
    end

    if (${found}) then
        set temp_load_dirs = "${temp_load_dirs} -L${needed_load_dir}"

        ${VERBOSE_ECHO} "    Adding -L${needed_load_dir} to LOAD_DIRS."

        set ld_config_dirs = "${ld_config_dirs} ${needed_load_dir}"

        set man_page_load_dirs = "${man_page_load_dirs} -L${needed_load_dir}"

        # We need to limit LD_LIBRARY_PATH to desparate cases and force checking
        # on non-desperate ones. The need for LD_LIBRARY_PATH has gone down a
        # lot in 30 years! 
        #
#         if (${after}) then
#             set kjb_after_ld_path = "${kjb_after_ld_path}${after_ld_colon}${needed_load_dir}"
#             set after_ld_colon = ":"
#         else 
#             set kjb_ld_path = "${kjb_ld_path}${ld_path_colon}${needed_load_dir}"
#             set ld_path_colon = ":"
#         endif
    endif
end

# Kobus:
#     FIXME --- addional comment on the next paragraph added later: This should
#     be consistent with boost when version is speciefied. 
#     
#     We should figure out a more principled solution for this. Slipping osmesa
#     in at the front as a special case is bound to lead to complexity and
#     problems in the long run.  Perhaps this can be handled with the existing
#     framework, or perhaps we need to add some additonal logic.  For example,
#     it seems that osmesa library path will always be listed twice which is
#     bound to confuse.  For now, I have paralleled the building of KJB_LD_PATH.
#
# Previous comment: 
#     We really need to put the osmesa load directory first, to avoid linking
#     against conflicting versions of opengl (for example in /usr/lib). 
#
if (${use_osmesa}) then
    set temp_load_dirs = "-L${osmesa_load_dir} ${temp_load_dirs}"

    if ($?first_ld_dir) then
        set first_ld_dir = 0
    else
        set kjb_ld_path = "${kjb_ld_path}:"
    endif

    set kjb_ld_path = "${osmesa_load_dir}${ld_path_colon}${kjb_ld_path}"
endif

kjb_setenv LOAD_DIRS "${temp_load_dirs}"

kjb_setenv MAN_PAGE_LOAD_DIRS "${man_page_load_dirs}"

kjb_setenv KJB_LD_PATH "${kjb_ld_path}${after_ld_colon}${kjb_after_ld_path}"
# How it was. This seems problematic! 
# kjb_setenv KJB_AFTER_LD_PATH "${kjb_after_ld_path}"

# Also new. Note that we do not use kjb_setenv.
setenv LD_LIBRARY_PATH "${KJB_LD_PATH}"

if ($?KJB_VERBOSE) then
    echo "Distilling include and load dirs complete."
    echo " "
    echo "LOAD_DIRS:   ${LOAD_DIRS}"
    echo "KJB_LD_PATH (being phased out): ${KJB_LD_PATH}"
endif

# -----------------------------------------------------------------------------
#

# echo ld_config_dirs: $ld_config_dirs

which ldconfig >& /dev/null
if (! ${status}) then
    ${ECHO} " "

    set real_ld_config_dirs = ""

    foreach ld_config_dir ($ld_config_dirs)
        set so_count = `ls ${ld_config_dir} | grep -c '\.so$'`

        if (${so_count}) then
            if ("${real_ld_config_dirs}" == "") then
                set real_ld_config_dirs = "${ld_config_dir}"
            else
                set real_ld_config_dirs = "${real_ld_config_dirs} ${ld_config_dir}"
            endif 
       endif
    end 

    if ("${real_ld_config_dirs}" != "") then
        if ("${USER}" == "root") then
            ${ECHO} "Executing : ldconfig ${real_ld_config_dirs}"
            ldconfig ${ld_config_dirs}
        else 
            foreach ld_config_dir ($real_ld_config_dirs)
               set ld_config_count = `ldconfig -p | grep -c ${ld_config_dir}`

               if (! $ld_config_count) then 
                   ${ECHO} "Init_compile found at least one library that could be referred to that ldconfig does not"
                   ${ECHO} "know about. The library in question is in directory ${ld_config_dir}."
                   ${ECHO} "Being able to report which libraries are specifically responsible for this message entails"
                   ${ECHO} "a lot of work, and has not been implemented yet."
                   ${ECHO} "If your program needs this unknown libray, and it is dynmamically linked, then"
                   ${ECHO} "you may need to add ${ld_config_dir} to LD_LIBRARY_PATH"
                   ${ECHO} " "
                   ${ECHO} "Run init_compile as root to fix this properly."
                   ${ECHO} "Root may need: setenv SRC /root/sbin   (which is where 'Make' lives)."
                   ${ECHO} "Root may need to setenv BOOST_VERSION if this program uses a specfic boost version."
                endif 
            end 
        endif 
    endif 
endif 

# -----------------------------------------------------------------------------
#
# 
kjb_setenv OPTIONAL_LIBS "${optional_libs}"
kjb_setenv GPU_ENABLED_LIBS "${gpu_enabled_libs}"
kjb_setenv ALL_KJB_HAVE  "${all_kjb_have}" 
kjb_setenv KJB_HAVE      "${kjb_have}" 


kjb_setenv PROG_BASE_INCLUDES "${INCLUDE_FLAG}. ${INCLUDE_FLAG}lib ${INCLUDE_FLAG}${KJB_SRC_PATH}lib"
#
# The two paths in LIB_BASE_INCLUDES are potentially the same, but not if
# you are in <prog>/lib/xxx. Is this the best solution?
kjb_setenv LIB_BASE_INCLUDES "${INCLUDE_FLAG}../../lib ${INCLUDE_FLAG}${KJB_SRC_PATH}lib"

kjb_setenv ALL_BASE_INCLUDES " ${INCLUDE_FLAG}lib ${INCLUDE_FLAG}../../lib ${INCLUDE_FLAG}${KJB_SRC_PATH}lib ${BEFORE_INCLUDES}"
kjb_setenv ALL_LOCAL_INCLUDES "${INCLUDE_FLAG}. ${INCLUDE_FLAG}lib ${INCLUDE_FLAG}../../lib ${INCLUDE_FLAG}${KJB_SRC_PATH}lib ${BEFORE_INCLUDES}"

# STRIP_COMMENTS_FLAGS: 
#     Obsolete. Test without. 
#
### kjb_setenv STRIP_COMMENTS_FLAGS "${MD_DEFINES} ${ALL_KJB_HAVE} ${ALL_LOCAL_INCLUDES} ${OPTIONAL_INCLUDES} ${GENERIC_AFT_INCLUDES}"


# TEST_MAIN_FLAGS: Flags used by the script stream_file_names. 
#    We have moved this logic into stream_file_names. Test without.
#
### kjb_setenv TEST_MAIN_FLAGS  "${MD_DEFINES} ${KJB_HAVE} ${ALL_LOCAL_INCLUDES} ${OPTIONAL_INCLUDES} ${GENERIC_AFT_INCLUDES}"

# 
# Keep the current version of KJB_SRC_PATH in INIT_SRC_PATH so that we can determine
# that the value of KJB_SRC_PATH, perhaps nominated by a calling script, is different
# from the one that we have now. 
#
kjb_setenv INIT_SRC_PATH "${KJB_SRC_PATH}"

kjb_setenv VIM_PATH_EXTRA `echo ${CC_COMPILER_INCLUDES} ${used_inc_dirs} | sed 's/^ *//' | sed 's/ *$//' | sed 's/  */,/g'`

# -----------------------------------------------------------------------------

if ($do_cache ) then
    ${VERBOSE_ECHO} "Building Environment Variable Cache into ${cache_fname}."

    echo "# KJB Environment Variable Cache." >! "$cache_fname"

    foreach line (`cat $varname_fname`)
    ### foreach line (`cat $varname_fname | sort | uniq`)
        # Sed explanation
        # 1: escape exclamation point ("!")
        # 2: escape nested single quotes
        # 3: convert "key=value" to "setenv key 'value' "
        setenv | grep "^$line=" | sed -e "s/\!/\\\!/g" -e "s/'/'\\\''/g" -e "s/^\([^=]*\)=\(.*\)/setenv \1 '\2'/g" >>! "$cache_fname"
    end

    /bin/rm -f $varname_fname

    sed < ${cache_fname} 's/setenv  *\([^ ]*\)  */export \1=/' >!  "$tmp/kjb_env.sh"

    if ($?DO_CACHE_LOCK) then
        if (-e "${cache_lock_file}") then
            ${VERBOSE_ECHO} "Removing the cache lock" 

            /bin/rm -f "${cache_lock_file}"
        endif
    endif
endif

unalias kjb_setenv


