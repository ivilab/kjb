# 
# This is the main makefile for library modules.  This is copied from
# $(MAKE_PATH)/Makefile-library to each library directory, and the string "LIB
# underscore COMPONENT" is replaced by a string for the particular library. 
#
# Why copy?
#     While it might seem better to simply define the lib component symbols
#     external to a single copy of this file and include it (like we do for
#     programs), this does not work as well because a program that uses multiple
#     library components will include this file multiple times, and the effect
#     of setting the variable and then including the file means that protocol
#     for variable expansion needs to be specified, and that is complicated and
#     also depends on the flavor of make. 


# The following make flavor dependent defines, already set by the time we are in
# this file, are expanded versions of the pattern oriented symbols defined below. 
#
#     LIB_COMPONENT_SOURCE_FILES
#     LIB_COMPONENT_HEADER_FILES
#     LIB_COMPONENT_FILES
#
LIB_COMPONENT_SOURCE_FILE_PAT = $(LIB_COMPONENT_REAL_SRC_DIR)*.[cC] $(LIB_COMPONENT_REAL_SRC_DIR)*.cpp $(LIB_COMPONENT_REAL_SRC_DIR)*.cxx $(LIB_COMPONENT_REAL_SRC_DIR)*.cc

LIB_COMPONENT_HEADER_FILE_PAT = $(LIB_COMPONENT_REAL_SRC_DIR)*.h $(LIB_COMPONENT_REAL_SRC_DIR)*.[hit]pp   $(LIB_COMPONENT_REAL_SRC_DIR)*.[hit]xx
LIB_COMPONENT_FILE_PAT = $(LIB_COMPONENT_SOURCE_FILE_PAT) $(LIB_COMPONENT_HEADER_FILE_PAT)

# The "Compile status is" string is a unique string that must be kept in sync
# with the regular expressions in scripts/boost_warning_filter.pl and in
# init_compile.  It's part of a workaround for a variant form of tcsh.
COMPILE_STATUS_IS = echo "Compile status is: $$status"

# A note about file pattern expansion. 
#     File pattern expansion is make flavor dependent, and also can lead to
#     annoying failures when the pattern does not match, but what you want is
#     simply a null result. We only need to rely on make pattern expansion for
#     rules. Pattern use could probably be purged from commands using scripts
#     instead. 

################################################################################
#         Synching Makefile and build with src/Make 
#
# The files "Makefile and "build" are strict copies of the ones in src/Make.  If
# they are updated, we want to get a copy. The syncronization may not be in time
# for this invocation of make, hence we provide an message about that. Note that
# GNU make tries to update make files that it reads and rebuild the dependency
# graphs as a result. When this works (I am not convinced it is robust), we get
# updated sooner. However, since it does not always work, and since we try to
# support other versions of make, we also specify "Makefile" and "build" as
# targets below. 
# 
# Why are Makefile and build copies? 
#     We cannot point to the ones in $(MAKE_PATH) because they implement figuring
#     out the value of MAKE_PATH. 

$(LIB_COMPONENT_SRC_DIR)Makefile : $(MAKE_PATH)Makefile
	@$(KJB_ECHO) " "
	@$(KJB_ECHO) "Updating Makefile from $(MAKE_PATH) in $(LIB_COMPONENT_REAL_SRC_DIR)."
	@$(KJB_ECHO) "This will affect future compiles, but not this one."
	$(KJB_CP) $(MAKE_PATH)Makefile $@ 
	@$(KJB_ECHO) " "

# The LHS and RHS could be the same target if we are in
# $(LIB_COMPONENT_SRC_DIR). But it seems to work out anyway.
#
Makefile : $(LIB_COMPONENT_SRC_DIR)Makefile

$(LIB_COMPONENT_SRC_DIR)build : $(MAKE_PATH)build
	@$(KJB_ECHO) " "
	@$(KJB_ECHO) "Updating $@ from $(MAKE_PATH) in `pwd`."
	@$(KJB_ECHO) "This will affect future compiles, but not this one."
	$(KJB_CP) $(MAKE_PATH)build $@ 
	@$(KJB_ECHO) " "

# The LHS and RHS could be the same target if we are in
# $(LIB_COMPONENT_SRC_DIR). But it seems to work out anyway.
#
build : $(LIB_COMPONENT_SRC_DIR)build 

################################################################################
#      Include_lines/file_list (target with hidden dependencies) 
#
# Include_lines/file_list tracks creating, deleting, and renaming of source code
# files. 
#
# This target is built in two ways depending on whether it needs to be crated or
# wheter it is being upated. If it does not exist, it can be created by its own
# rule. Whether this actually happens depends on the make flavor.  Note that we
# do not provide dependencies in that target so that it won't be updated by this
# rule unless it does not exist. If it exists, it is updated as a side effect of
# building the target Include_lines/file_list.new. This process will also able
# to create the file if needed. 
#
# We explicitly hide the link between the dependencies of
# Include_lines/file_list.new and Include_lines/file_list so that we control
# whether the theoretical dependence matters. For example, the directory
# timestamp matters if it changes due to a source file being moved. Responding
# to timestamps that do not matter would be hopelessly impractical. 

# ---------------------------------------------
# Include_lines/file_list 
#
# Handle the case the dependency Include_lines/file_list does not exist and we
# are working on something that depends on it (e.g., Makefile-depend).  Since
# this file is further maintained only as a side effect, we do not have it
# depend on anything other than tools.  However, since we want it to depend on
# tools, and the script is not guaranteed to update the time stamp, we have an
# explicit $(KJB_TOUCH). 

# ==============================================================================

# Hidden dependencies of tools on tools. 

$(MAKE_SCRIPT_PATH)build_file_list : \
    $(MAKE_SCRIPT_PATH)kjb_lock

$(MAKE_SCRIPT_PATH)build_include_lines : \
    $(MAKE_SCRIPT_PATH)kjb_lock

$(MAKE_SCRIPT_PATH)build_include_lines_2 : \
    $(MAKE_SCRIPT_PATH)kjb_lock

# Dependency on tools that build the target. 
$(LIB_COMPONENT_SRC_DIR)Include_lines/file_list : \
    $(MAKE_SCRIPT_PATH)build_file_list

$(LIB_COMPONENT_SRC_DIR)Include_lines/file_list :
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(MAKE_SCRIPT_PATH)build_file_list $(LIB_COMPONENT_SRC_DIR)
	$(KJB_TOUCH) $@

# ---------------------------------------------
# Include_lines/file_list.new

# Dependency on tools that build the target. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/file_list.new: \
    $(MAKE_SCRIPT_PATH)build_file_list

# Rule to build Include_lines/file_list.new. Note that there is no need to
# depend on Include_lines because if that does not exist, the target does not
# either, and the script build_file_list will create Include_lines. 
# 
$(LIB_COMPONENT_SRC_DIR)Include_lines/file_list.new : $(LIB_COMPONENT_REAL_SRC_DIR) $(FORCE_WITH_SUN5)
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	$(MAKE_SCRIPT_PATH)build_file_list $(LIB_COMPONENT_SRC_DIR)

# Convenience dummy target used by the script build-2. Using the target directly
# would require extra logic for the leading directory, especially in the case
# where we always use full paths for library components, even if we are building
# in that directory. The dummy target file_list.new should not be used as a
# dependency.
#
file_list.new : \
    $(LIB_COMPONENT_SRC_DIR)build \
    $(LIB_COMPONENT_SRC_DIR)Makefile \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR) \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list.new

################################################################################
#      Include_lines/include_lines (target with hidden dependencies) 
#
# Include_lines/include_lines tracks the state of include lines in source files
# which determine whether Makefile-depend is up to date. We represents the state
# of the shadow files, two per source code file, in Include_lines. Using files
# for each source file is necessary for complete accuracy, as Makefile-depend
# depends on which file has which includes. If any source file has changed in
# way that matters, then Include_lines/include_lines is updated as a side effect
# of building the exposed target Include_lines/include_lines.new. 
#
# This target is built in two ways depending on whether it needs to be created or
# whether it is being updated. If it does not exist, it can be created by its own
# rule. Whether this actually happens depends on the make flavor.  Note that we
# do not provide dependencies in that target so that it won't be updated by this
# rule unless it does not exist. If it exists, it is updated as a side effect of
# building the target Include_lines/file_list.new. This process will also able
# to create the file if needed. 
#
# We explicitly hide the link between the dependencies of
# Include_lines/include_lines.new and Include_lines/include_lines so that we
# control whether the theoretical dependence matters. For example, the source
# file timestamp matter if they are due to changes in include lines within the
# file. Responding to timestamps that do not matter would be hopelessly
# impractical. 


# ---------------------------------------------
# Include_lines/include_lines 
#
# Handle the case the dependency Include_lines/include_lines does not exist and
# we are working on something that depends on it (e.g., Makefile-depend).  Since
# this file is further maintained only as a side effect, we do not have it
# depend on anything other than tools. However, since we want it to depend on
# tools, and the script is not guaranteed to update the time stamp, we have an
# explicit $(KJB_TOUCH). 
#
# Dependency on tools that build the target. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines : \
    $(MAKE_SCRIPT_PATH)build_file_list \
    $(MAKE_SCRIPT_PATH)build_include_lines \
    $(MAKE_SCRIPT_PATH)build_include_lines_2 \
    $(MAKE_SCRIPT_PATH)build_makefile_dirs \
    $(MAKE_SCRIPT_PATH)get_local_include_dirs \
    $(MAKE_SCRIPT_PATH)build_sub_libs_needed 
 
# The script build_include_lines updates Include_lines/include_lines only if
# needed. Because the target is not guaranteed to be updated, but has the
# dependencies on tools, we need to touch $@. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines : 
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(MAKE_SCRIPT_PATH)build_file_list $(LIB_COMPONENT_SRC_DIR)
	@$(MAKE_SCRIPT_PATH)build_include_lines $(LIB_COMPONENT_SRC_DIR)
	@$(KJB_TOUCH) $@

# ---------------------------------------------
# Include_lines/include_lines.new 

$(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/new/% : $(LIB_COMPONENT_REAL_SRC_DIR)% $(MAKE_SCRIPT_PATH)update_include_line_file
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(MAKE_SCRIPT_PATH)update_include_line_file '$(LIB_COMPONENT_REAL_SRC_DIR)' $*

$(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/Makefile-include-lines : $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/file_list 
	$(KJB_MKDIR) $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines
	$(MAKE_SCRIPT_PATH)stream_file_names -s -h -skip_incl -no_path $(LIB_COMPONENT_SRC_DIR) | sed 's/\(.*\)/$$(LIB_COMPONENT_SRC_DIR)Include_lines\/include_lines.new : $$(LIB_COMPONENT_SRC_DIR)Include_lines\/new\/\1/' > $@

include $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/Makefile-include-lines
	

# Dependency on tools that build the target. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new : \
    $(MAKE_SCRIPT_PATH)build_include_lines \
    $(MAKE_SCRIPT_PATH)build_include_lines_2 \
    $(MAKE_SCRIPT_PATH)build_makefile_dirs \
    $(MAKE_SCRIPT_PATH)get_local_include_dirs \
    $(MAKE_SCRIPT_PATH)build_sub_libs_needed 

# $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new : $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list $(LIB_COMPONENT_NEW_INCLUDE_LINE_FILES)
# $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new : $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/Makefile-include-lines $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list 
$(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new : $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/Makefile-include-lines 
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(MAKE_SCRIPT_PATH)build_include_lines $(LIB_COMPONENT_SRC_DIR)

# Convenience dummy target used by the script build-2. Using the target directly
# would require extra logic for the leading directory, especially in the case
# where we always use full paths for library components, even if we are building
# in that directory. The dummy target include_lines.new should not be used as a
# dependency.
#
include_lines.new : \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new \
    $(LIB_COMPONENT_SRC_DIR)build \
    $(LIB_COMPONENT_SRC_DIR)Makefile \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR)

################################################################################
#      Include_lines/sub_libs_needed (target with hidden dependencies) 
#
# Build Include_lines/sub_libs_needed which builds Makefile-dirs as a side
# effect.  We cannot expose the dependency of Makefile-dirs on
# Include_lines/sub_libs_needed because then (for some versions of "make") the
# include Makefile-dirs would force building of Include_lines/sub_libs_needed
# which we are not necessarily ready to do as it depends on Makefile-dirs
# itself. 
#
# For library directories, the file Makefile-dirs is included from Makefile-2,
# which has a rule to build it in case it does not exist. This "bootstrapping"
# build does not need Include_lines/sub_libs_needed to succeed. However, the
# result will need to be updated when Include_lines/sub_libs_needed becomes
# available as this is used to build the real meat of Makefile-dirs.  


# Handle the case the dependency Include_lines/sub_libs_needed does not exist
# and we are working on something that depends on it (e.g., Makefile-depend).
# Since this file is further maintained only as a side effect, we do not have it
# depend on anything other than the tools needed to build it. The script
# build_include_lines calls build_makefile_dirs and build_sub_libs_needed,
# hence the extra lines. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/sub_libs_needed : \
   $(MAKE_SCRIPT_PATH)build_file_list \
   $(MAKE_SCRIPT_PATH)build_include_lines \
   $(MAKE_SCRIPT_PATH)build_include_lines_2 \
   $(MAKE_SCRIPT_PATH)build_makefile_dirs \
   $(MAKE_SCRIPT_PATH)get_local_include_dirs \
   $(MAKE_SCRIPT_PATH)build_sub_libs_needed

# The script build_include_lines updates Include_lines/sub_libs_needed only
# if needed.  Because the target is not guaranteed to be updated, but has the
# dependencies on tools, we need to touch $@. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/sub_libs_needed : 
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	$(MAKE_SCRIPT_PATH)build_file_list $(LIB_COMPONENT_SRC_DIR)
	$(MAKE_SCRIPT_PATH)build_include_lines -f $(LIB_COMPONENT_SRC_DIR)
	$(KJB_TOUCH) $@

# Convenient dummy target that provides a synonym for
# Include_lines/sub_libs_needed.
#
sub_libs_needed : $(LIB_COMPONENT_SRC_DIR)Include_lines/sub_libs_needed

################################################################################
#            Build and include Makefile-depend


# Makefile-depend depends on the file that builds it (this file), which leads to
# bootstrapping difficulties (although I cannot remember exactly what they are).
# Instead we depend on a file which tracks the state of this file, and which can
# be made trivially.  
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-library.state : 
	$(KJB_MKDIR) $(LIB_COMPONENT_SRC_DIR)Include_lines
	$(KJB_TOUCH_1990) $@

################################################################################

$(LIB_COMPONENT_SRC_DIR)Include_lines/header_file_list : 
	$(KJB_MKDIR) $(LIB_COMPONENT_SRC_DIR)Include_lines
	$(KJB_RM) $@.new
	$(KJB_TOUCH) $@

$(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h : $(MAKE_SCRIPT_PATH)build_incl_dot_h $(LIB_COMPONENT_SRC_DIR)Include_lines/header_file_list 
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	$(MAKE_SCRIPT_PATH)build_incl_dot_h $(LIB_COMPONENT_SRC_DIR)

# Kobus: 19/01/02. Fine, but do we really need # Include_lines/Makefile-depend-incl-dot-h?
#
# The file is Include_lines/Makefile-depend-incl-dot-h is built by
# build_incl_dot_h only if *_incl.h does not exist. So we need to remove it
# before calling build_incl_dot_h.
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-depend-incl-dot-h : $(LIB_COMPONENT_SRC_DIR)Include_lines/header_file_list 
	$(KJB_RM) $(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h
	$(MAKE_SCRIPT_PATH)build_incl_dot_h $(LIB_COMPONENT_SRC_DIR)

include $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-depend-incl-dot-h

################################################################################

# Dependency on all the tools for Makefile-depend. 

# The symbol VIM_SUFFIX used below is either "ex" or "ex7". 
#
$(MAKE_EDIT_PATH)%.ex: $(MAKE_EDIT_PATH)strip_ex_files

$(MAKE_EDIT_PATH)%.ex: $(MAKE_EDIT_PATH)%.vim
	$(MAKE_EDIT_PATH)strip_ex_files $< $@

$(MAKE_EDIT_PATH)%.ex7: $(MAKE_EDIT_PATH)strip_ex7_files 

$(MAKE_EDIT_PATH)%.ex7: $(MAKE_EDIT_PATH)%.vim
	$(MAKE_EDIT_PATH)strip_ex7_files $< $@

$(LIB_COMPONENT_SRC_DIR)Makefile-depend : \
    $(MAKE_EDIT_PATH)Depend.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Dirs.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Header.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Help.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Misc.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Obs_depend.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Obs.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Programs_depend.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Programs.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)User.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Version_obs.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Work.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Writeup.$(VIM_SUFFIX)

$(LIB_COMPONENT_SRC_DIR)Makefile-depend : \
    $(MAKE_PATH)Makefile-library \
    $(MAKE_SCRIPT_PATH)stream_file_names \
    $(MAKE_SCRIPT_PATH)kjb_makedepend \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR) 

# -------------------------------------------------
# Rule for Makefile-depend
#
# This needs to become a script to get locking behaviour correct. 

# Quite a bit of cleanup is possible here by extending kjb_makedepend to handle
# the header files, etc., or a similar strategy. This will be rewritten
# completely at some point. To debug what follows, first note that setting
# KJB_DEBUG will tell kjb_makedepend to write some intermediate files with
# "SAVE" in the name. Second, the lines below containing "SAVE" can be
# uncommented to create addtional intermediate files. 
#
$(LIB_COMPONENT_SRC_DIR)Makefile-depend : $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-depend-incl-dot-h $(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-library.state $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines
	@$(KJB_ECHO)  " "
	@$(KJB_ECHO)  "================================================================================"
# Commented out to prevent 'word too long' errors on some systems
# -- Kyle  Jan 15, 2011
# 	@$(KJB_ECHO)  "Building $(LIB_COMPONENT_SRC_DIR)Makefile-depend because of $?" 
	@$(KJB_ECHO)  "Building $(LIB_COMPONENT_SRC_DIR)Makefile-depend" 
	@$(KJB_ECHO)  " "
	$(MAKE_SCRIPT_PATH)stream_file_names '$(LIB_COMPONENT_REAL_SRC_DIR)' -s > $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets
	@$(KJB_RM) $(LIB_COMPONENT_SRC_DIR).Makefile-obj-targets.swp
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets-SAVE
	$(VIM_FOR_MAKE) $(VIM_SCRIPT_OPERATOR) $(MAKE_EDIT_PATH)Dirs.$(VIM_SUFFIX) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets \
	        $(VIM_IO_REDIRECTION)
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets-SAVE-2
	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets-depend
#
	@$(KJB_RM) $(LIB_COMPONENT_SRC_DIR).Makefile-obj-targets.swp
	$(VIM_FOR_MAKE) $(VIM_SCRIPT_OPERATOR) $(MAKE_EDIT_PATH)Obs.$(VIM_SUFFIX) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets \
	        $(VIM_IO_REDIRECTION)
	sed < $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets 's/OBS/LIB_COMPONENT_OBS/' > $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)Makefile-depend-SAVE
#
	sed < $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets 's/OBS/LIB_COMPONENT_LOCAL_OBS/' | sed 's/^\( *\)\$$(\([^)]*\)_DIR)\$$(\(.*OBJ_DIR\))/\1$$(\3)$$(\2_LIB_PREFIX)\//'  >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)Makefile-depend-SAVE-2
#
#   Not currently used, but might be useful if we choose to build archives by
#   changing to LD_OBJ_DIR to shorten the archive command. 
#
# 	sed < $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets 's/OBS/LIB_COMPONENT_L2_OBS/' | sed 's/^\( *\)\$$(\([^)]*\)_DIR)\$$(.*OBJ_DIR)/\1$$(\2_LIB_PREFIX)\//'  >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
# 	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
# 	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
#
	sed < $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets 's/OBS/LIB_COMPONENT_SHARED_OBS/' | sed 's/(OBJ_DIR)/&$$(SHARED_DIR)/'  | sed 's/(CXX_OBJ_DIR)/&$$(SHARED_DIR)/' >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)Makefile-depend-SAVE-3
#
	sed < $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets '/OBS = /d' | sed 's/^ *//' | sed 's/[ \\]*$$//' | sed 's/\(.*\)(\([CX_]*\)OBJ_DIR)\(.*\)$$/\1(\2OBJ_DIR)$$(SHARED_DIR)\3 : &/' >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	$(KJB_RM) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)Makefile-depend-SAVE-4
#
	$(VIM_FOR_MAKE) $(VIM_SCRIPT_OPERATOR) $(MAKE_EDIT_PATH)Obs_depend.$(VIM_SUFFIX) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets-depend \
	        $(VIM_IO_REDIRECTION)
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets-depend $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets-depend-SAVE-2
	$(KJB_CAT) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets-depend >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	$(KJB_RM) $(LIB_COMPONENT_SRC_DIR)Makefile-obj-targets-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)Makefile-depend-SAVE-5
#
	$(MAKE_SCRIPT_PATH)kjb_makedepend '$(LIB_COMPONENT_REAL_SRC_DIR)' -c  -Y -w20000 \ $(MD_DEFINES) -DMAKE_DEPEND $(LIB_BASE_INCLUDES) >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	$(MAKE_SCRIPT_PATH)kjb_makedepend '$(LIB_COMPONENT_REAL_SRC_DIR)' -x  -Y -w20000 \ $(MD_DEFINES) -DMAKE_DEPEND $(LIB_BASE_INCLUDES) >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)Makefile-depend-SAVE-6
#
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(MAKE_SCRIPT_PATH)stream_file_names '$(LIB_COMPONENT_REAL_SRC_DIR)' -c2man > $(LIB_COMPONENT_SRC_DIR)Makefile-depend-c2man-obs
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend-c2man-obs $(LIB_COMPONENT_SRC_DIR)Makefile-depend-c2man-obs-SAVE
	@$(KJB_RM) $(LIB_COMPONENT_SRC_DIR).Makefile-depend-c2man-obs.swp
	@$(VIM_FOR_MAKE) $(VIM_SCRIPT_OPERATOR) $(MAKE_EDIT_PATH)Dirs.$(VIM_SUFFIX) $(LIB_COMPONENT_SRC_DIR)Makefile-depend-c2man-obs \
	        $(VIM_IO_REDIRECTION)
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend-c2man-obs $(LIB_COMPONENT_SRC_DIR)Makefile-depend-c2man-obs-SAVE-2
	@$(KJB_ECHO) 'LIB_COMPONENT_DOC_FILES = \' >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@sed 's/^ *\(.*)\)\([^ ]*\).*$$/    \1$$(MAKE_DOC_DIR)\2.made \\/' $(LIB_COMPONENT_SRC_DIR)Makefile-depend-c2man-obs >>  $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@@$(KJB_RM) $(LIB_COMPONENT_SRC_DIR)Makefile-depend-c2man-obs
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)Makefile-depend-SAVE-7
#
	$(MAKE_SCRIPT_PATH)stream_file_names '$(LIB_COMPONENT_REAL_SRC_DIR)' -doxygen -t | sed 's/1/LIB_COMPONENT_DOXYGEN_TARGET = doxygen_$$(LIB_COMPONENT_PREFIX)/' >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) " " >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)Makefile-depend-SAVE-8
#
	@$(KJB_ECHO) 'LIB_COMPONENT_DOXYGEN_FILES = \' >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	$(MAKE_SCRIPT_PATH)stream_file_names '$(LIB_COMPONENT_REAL_SRC_DIR)' -doxygen > $(LIB_COMPONENT_SRC_DIR)Makefile-depend-doxygen-obs
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend-doxygen-obs $(LIB_COMPONENT_SRC_DIR)Makefile-depend-doxygen-obs-SAVE
	@$(KJB_RM) $(LIB_COMPONENT_SRC_DIR).Makefile-depend-doxygen-obs.swp
	@$(VIM_FOR_MAKE) $(VIM_SCRIPT_OPERATOR) $(MAKE_EDIT_PATH)Dirs.$(VIM_SUFFIX) $(LIB_COMPONENT_SRC_DIR)Makefile-depend-doxygen-obs \
	        $(VIM_IO_REDIRECTION)
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend-doxygen-obs $(LIB_COMPONENT_SRC_DIR)Makefile-depend-doxygen-obs-SAVE-2
	@sed 's/^ *\(.*)\)\([^ ]*\).*$$/    \1\2 \\/' $(LIB_COMPONENT_SRC_DIR)Makefile-depend-doxygen-obs >>  $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_RM) $(LIB_COMPONENT_SRC_DIR)Makefile-depend-doxygen-obs
	@$(KJB_ECHO) ' ' >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
	@$(KJB_ECHO) ' ' >> $(LIB_COMPONENT_SRC_DIR)Makefile-depend
#	$(KJB_CP) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)Makefile-depend-SAVE-9
#
	$(MAKE_SCRIPT_PATH)copy_if_different  $(LIB_COMPONENT_SRC_DIR)Makefile-library $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-library.state
#
	@$(KJB_ECHO)  " "
	@$(KJB_ECHO)  "        $(LIB_COMPONENT_SRC_DIR)Makefile-depend is built" 
	@$(KJB_ECHO)  "================================================================================"
	@$(KJB_ECHO)  " "
   
include $(LIB_COMPONENT_SRC_DIR)Makefile-depend

################################################################################

#
# Build and include Makefile-libs-needed.
#

# This is needed for Makefile-depend. By making things depend on this file which
# is updated only when Makefile-libs-needed is changed, we reduce compiling. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed.state : 
	$(KJB_MKDIR) $(LIB_COMPONENT_SRC_DIR)Include_lines
	$(KJB_TOUCH_1990) $@

# Dependencies on the tools needed to build it. 
#
$(LIB_COMPONENT_SRC_DIR)Makefile-libs-needed : \
      $(MAKE_PATH)init_compile \
      $(MAKE_SCRIPT_PATH)build_makefile_libs_needed

$(LIB_COMPONENT_SRC_DIR)Makefile-libs-needed : $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	$(MAKE_SCRIPT_PATH)build_makefile_libs_needed '$(LIB_COMPONENT_SRC_DIR)'
	$(MAKE_SCRIPT_PATH)copy_if_different $@ $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed.state

include $(LIB_COMPONENT_SRC_DIR)Makefile-libs-needed
	
################################################################################
#                         Depend  
#
# We include the dependency on Makefile-library (this file) because not all
# makes will rebuild Makefile-library simply because it included. 
#
# Kobus: 19/01/02. But we do not have the depency on Makefile-library! 
#
depend_$(LIB_COMPONENT_PREFIX) : \
    $(DEPEND_TARGETS) \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-library.state \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR) \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list.new \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-depend-incl-dot-h \
    $(LIB_COMPONENT_SRC_DIR)Makefile-depend

################################################################################
#                       Object directory 

# Important only to setup parallel make. 
dir_made_$(LIB_COMPONENT_PREFIX) : $(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)c_dir_made 

# Important only to setup parallel make. 
dir_made_$(LIB_COMPONENT_PREFIX) : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)cxx_dir_made 


# We use "c_dir_made" in the following because $(OBJ_DIR) may be a symbolic link.
$(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)c_dir_made :
	$(MAKE_SCRIPT_PATH)make_src_shadow_dir "$(REAL_OBJ_DIR)" "$(OBJ_DIR)" . "$(LIB_COMPONENT_SRC_DIR)"
	$(KJB_TOUCH) $@

# We use "cxx_dir_made" in the following because $(CXX_OBJ_DIR) may be a symbolic link.
$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)cxx_dir_made :
	$(MAKE_SCRIPT_PATH)make_src_shadow_dir "$(REAL_OBJ_DIR)" "$(CXX_OBJ_DIR)" . "$(LIB_COMPONENT_SRC_DIR)"
	$(KJB_TOUCH) $@

# ################################################################################
# #                      Library archive from the objects 
# 
# #
# # Currently we do not use sub-archives. But they are convenient as time stamped
# # intermediate targets. 
# #
# # Normally we do a "make depend" before "make" via the script build-2.  However,
# # for completeness, we include the relevant dependencies from depend_XXX to
# # ensures that even if this target is explicitly made by some other process, then
# # it will be rebuilt if  they are out of date, and everything would be built
# # with multiple "makes" regardless of the version of make.
# # 
# # Note that we cannot simply use the target depend_XXX, as it is not a real
# # target, without relying on the particular version of make. Hence we have to
# # copy the dependencies. 
# # 
# $(LIB_COMPONENT_ARCHIVE) : $(LIB_COMPONENT_SRC_DIR)Makefile-library $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR) $(LIB_COMPONENT_SRC_DIR)Makefile-libs-needed $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)$(LD_OBJ_DIR)ld_dir_made $(LIB_COMPONENT_OBS) 
# 	$(KJB_RM) $@
# 	$(KJB_AR) $@ $(LIB_COMPONENT_OBS)
# 	$(KJB_RANLIB) $@ \
# 	    $(NULL_TO_MAKE_BLANK_LINE)
# 

################################################################################
#                            GNU precompiled headers

$(LIB_COMPONENT_PARENT_DIR)$(PCH_DIR)$(LIB_COMPONENT_PREFIX)$(KJB_DIR_STR)%.h.gch : $(LIB_COMPONENT_SRC_DIR)%.h 
	$(KJB_MKDIR) $(LIB_COMPONENT_PARENT_DIR)$(PCH_DIR)$(LIB_COMPONENT_PREFIX)
	( $(KJB_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_CXX_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); $(COMPILE_STATUS_IS) ) \
        |& $(KJB_CPP_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

################################################################################
#                       Make the object files 
#
# Default build (may be overridden in program specific makefiles). 

# The dependency Makefile-libs-needed is build from source files, so, if the
# source file changes, then the object file is also out of date, and so it
# appears that the dependency is not really needed. However, since it is
# included, the previous version could be active, and then we would forget that
# the targets are out of date. This is mitigated by the sequence enforced in
# the script build-2, but we make explicit the need there also, in case this
# makefile gets used without the script. 

# Note:
#    We used to handle dependencies on the object dirs and other items here, but
#    this is not robust, especially for mixed C/C++. Now we handle this in
#    Makefile-depend. 

$(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.c 
	@$(KJB_ECHO)
	@$(KJB_CC)  --version |& head -1 
	$(KJB_CC) $< -c -o $@ \
        $(LIB_COMPONENT_CC_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_CC_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CC_FLAGS) \
        $(LIB_COMPONENT_CC_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cpp 
	@$(KJB_ECHO)
	@$(KJB_CXX)  --version |& head -1 
	( $(KJB_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_CXX_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); $(COMPILE_STATUS_IS) ) \
        |& $(KJB_CPP_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cxx
	@$(KJB_ECHO)
	@$(KJB_CXX)  --version |& head -1 
	( $(KJB_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); $(COMPILE_STATUS_IS) ) \
        |& $(KJB_CPP_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.C
	@$(KJB_ECHO)
	@$(KJB_CXX)  --version |& head -1 
	( $(KJB_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); $(COMPILE_STATUS_IS) ) \
        |& $(KJB_CPP_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cc
	@$(KJB_ECHO)
	@$(KJB_CXX)  --version |& head -1 
	( $(KJB_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); $(COMPILE_STATUS_IS) ) \
        |& $(KJB_CPP_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

################################################################################
#              Make local versions of library object files for programs
#
# We control the input to "ar" when making program specfic versions of libraries
# by copying the object modules. This handles the problem that input to "ar" can
# be too long as a function of how deep in the directory tree the code is which
# is brittle. This also begins to set up infrastructure for more clever use of
# "ar", which we are holding off on until the next rewrite which will include
# multiple libraries. 
#

$(OBJ_DIR)$(LIB_COMPONENT_PREFIX)/%.o : $(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)%.o
	@$(KJB_MKDIR) $(OBJ_DIR)$(LIB_COMPONENT_PREFIX)
	$(KJB_CP) $< $@ 

$(CXX_OBJ_DIR)$(LIB_COMPONENT_PREFIX)/%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o
	@$(KJB_MKDIR) $(CXX_OBJ_DIR)$(LIB_COMPONENT_PREFIX)
	$(KJB_CP) $< $@ 

################################################################################
#                       Make sharable object files 
#
# To avoid repeating dependencies in Makefile-depend for shared, we make the
# shared versions depend on the non-shared (standard, static) objects. Hence
# building shared will also build the standard objects. This is OK as we usually
# build shared after standard anyway. 
#
$(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)%.o

$(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.c 
	@$(KJB_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)$(SHARED_DIR)
	$(KJB_CC) $< -c -o $@ \
        $(CC_SHARED_FLAGS) $(LIB_COMPONENT_CC_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_CC_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CC_FLAGS) \
        $(LIB_COMPONENT_CC_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o 

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cpp 
	@$(KJB_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)
	$(KJB_CXX) $< -c -o $@ \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_CXX_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE)\
        |& $(KJB_CPP_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

# Kobus. Seems redundant. Comment out and see what breaks. 
# $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o 

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cxx
	@$(KJB_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)
	$(KJB_CXX) $< -c -o $@ \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        |& $(KJB_CPP_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)


# Kobus. Seems redundant. Comment out and see what breaks. 
# $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.C
	@$(KJB_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)
	$(KJB_CXX) $< -c -o $@ \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        |& $(KJB_CPP_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

# Kobus. Seems redundant. Comment out and see what breaks. 
# $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cc
	@$(KJB_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)
	$(KJB_CXX) $< -c -o $@ \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        |& $(KJB_CPP_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

################################################################################
#                    All
#
# We include the dependency on Makefile-library (this file) because not all
# makes will rebuild Makefile-library simply because it included. 
#
all_$(LIB_COMPONENT_PREFIX) : \
    depend_$(LIB_COMPONENT_PREFIX) \
    $(LIB_COMPONENT_SRC_DIR)Makefile-libs-needed \
    $(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h \
    $(LIB_COMPONENT_OBS) 

################################################################################
#                    Shared
#
# We include the dependency on Makefile-library (this file) because not all
# makes will rebuild Makefile-library simply because it included. 
#

# Note yet used. Currently we only build shared via src/KJB and src/KJB_cpp. 
shared_$(LIB_COMPONENT_PREFIX) : \
    depend_$(LIB_COMPONENT_PREFIX) \
    $(LIB_COMPONENT_SRC_DIR)Makefile-libs-needed \
    $(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h \
    $(LIB_COMPONENT_SHARED_OBS) 

################################################################################
#                       Tags
# 
# tags_$(LIB_COMPONENT_PREFIX) : $(LIB_COMPONENT_FILES)
# 
$(LIB_COMPONENT_SRC_DIR)tags : $(LIB_COMPONENT_FILES)
	$(MAKE_SCRIPT_PATH)do_ctags '$(LIB_COMPONENT_REAL_SRC_DIR)'

# Convenience dummy target used by the script build-2. Using the target directly
# would require extra logic for the leading directory, especially in the case
# where we always use full paths for library components, even if we are building
# in that directory. The dummy target tags should not be used as a dependency.
#
# This will BREAK things if we want to do it the old way again for any reason. 
#
tags : $(LIB_COMPONENT_SRC_DIR)tags

ctags: tags 

# ################################################################################
#                           Man pages
#
# 
# Note that it is impractical to make the dependencies on what we are building
# (man pages), as they are created from the source file routines. Hence we use
# the proxies $(MAKE_DOC_DIR)*.made. 
#

# A target for making sure that directories exist. This is only used for
# parallel makes, but most machines now have more than one core, so this is
# becoming the common case. The target doc_dir_made_xxx is never made, so it is
# always out of date. 
#
doc_dir_made_$(LIB_COMPONENT_PREFIX) : $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made 

#
# We use the target up_to_date because the documentation files are typically
# sets of unknown man page files that arise from each source file. Hence we
# cannot check time stamps against what we are actually building. However, I am
# not sure that this is in fact the best way to handle this. 
#
doc_$(LIB_COMPONENT_PREFIX) : depend_$(LIB_COMPONENT_PREFIX) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)up_to_date 

#
# We use "doc_dir_made" because the MAKE_OBJ_DIR itself may be a symbolic link.
#
$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made :
	$(MAKE_SCRIPT_PATH)make_src_shadow_dir "$(REAL_MAKE_DOC_DIR)" "$(MAKE_DOC)" "." "$(LIB_COMPONENT_SRC_DIR)"
	$(KJB_TOUCH) $@

$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)up_to_date: $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made $(LIB_COMPONENT_DOC_FILES)
	$(KJB_TOUCH) $@
 

# Comment on the following comment---I am not sure this guarantees anything. We
# either should build this serially, or arrange the parallel build in build-2. 
#
#     Ensure the object directory gets made first, even with parallel makes.
#
$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)*.c.made : $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made 

################################################################################
#                             c2Man 

COMPILE_INFO = \
  -C"$(MD_DEFINES) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS)" \
  -C" -I/home/kobus/include" \
  -C"$(MAN_PAGE_LOAD_DIRS)" \
  -C"-lKJB $(LIBS)" 


# The utils in MAKE_BIN_DIR are magically up to date because build-2 buids them
# whenever documation is being built. Making them dependencies might be
# misleading. Hence this comment. 
#
$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)*.c.made : $(MAKE_BIN_DIR)c2man $(MAKE_BIN_DIR)include_def  $(MAKE_BIN_DIR)c2man_in

$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)%.c.made : $(LIB_COMPONENT_SRC_DIR)%.c
	$(MAKE_SCRIPT_PATH)assert_non_null_arg $(MAKE_DOC_DIR) 
	$(MAKE_BIN_DIR)include_def __C2MAN__ < $(LIB_COMPONENT_SRC_DIR)$*.c | $(MAKE_BIN_DIR)c2man_in -i $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.index > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.c2man_cmd_in
	$(C2MAN_CPP_CMD) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.c2man_cmd_in \
        -D$(UC_MACHINE) -D$(UC_OS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES) > \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c
	$(KJB_MKDIR) $(MAN_DIR)
	$(MAKE_BIN_DIR)c2man \
         $(C2MAN_FLAGS) \
         $(COMPILE_INFO) \
         $(LIB_COMPONENT_NEED_HAVE) \
         -i\"$(LIB_COMPONENT_PREFIX)/$*.h\" \
         -o$(MAN_DIR) \
         $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c
	$(KJB_MV) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.c2man_in
	$(MAKE_BIN_DIR)include_def __C2MAN__ < $(LIB_COMPONENT_SRC_DIR)$*.c | $(MAKE_BIN_DIR)c2man_in -h -i $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.index  > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.c2man_cmd_in_html
	$(C2MAN_CPP_CMD) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.c2man_cmd_in_html \
         -D$(UC_MACHINE) -D$(UC_OS) \
         $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES) > \
    $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c
	$(KJB_MKDIR) $(HTML_MAN_DIR)
	$(MAKE_BIN_DIR)c2man -Th \
         -Th $(C2MAN_FLAGS) \
         $(COMPILE_INFO) \
         $(LIB_COMPONENT_NEED_HAVE) \
         -i\"$(LIB_COMPONENT_PREFIX)/$*.h\" \
         -o$(HTML_MAN_DIR) \
         $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c
	$(KJB_MV) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.c2man_in_html
	$(KJB_TOUCH) $@

# The utils in MAKE_BIN_DIR are magically up to date because build-2 buids them
# whenever documation is being built. Making them dependencies might be
# misleading. Hence this comment. 
#
$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)*.h.made : $(MAKE_BIN_DIR)c2man $(MAKE_BIN_DIR)include_def  $(MAKE_BIN_DIR)c2man_in	$(MAKE_SCRIPT_PATH)fix_header_man_pages $(MAKE_SCRIPT_PATH)fix_header_html_pages

$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)%.h.made : $(LIB_COMPONENT_SRC_DIR)%.h  
	$(MAKE_SCRIPT_PATH)assert_non_null_arg $(MAKE_DOC_DIR) 
	$(KJB_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h
	$(MAKE_BIN_DIR)include_def __C2MAN__ < $(LIB_COMPONENT_SRC_DIR)$*.h | $(MAKE_BIN_DIR)c2man_in -i $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.index > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.c2man_cmd_in
	$(C2MAN_CPP_CMD) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.c2man_cmd_in \
        -D$(UC_MACHINE) -D$(UC_OS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES) > \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*-HEADER.c
	$(MAKE_BIN_DIR)c2man \
        $(C2MAN_FLAGS) \
        $(COMPILE_INFO) \
        $(LIB_COMPONENT_NEED_HAVE) \
        -i\"$(LIB_COMPONENT_PREFIX)/$*.h\" \
        -o$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*-HEADER.c
	$(MAKE_SCRIPT_PATH)fix_header_man_pages $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h
	$(KJB_MV) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*-HEADER.c $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.c2man_in
	$(MAKE_BIN_DIR)include_def __C2MAN__ < $(LIB_COMPONENT_SRC_DIR)$*.h | $(MAKE_BIN_DIR)c2man_in -h -i $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.index > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.c2man_cmd_in_html
	$(C2MAN_CPP_CMD) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.c2man_cmd_in_html \
        -D$(UC_MACHINE) -D$(UC_OS) \
         $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES) > \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*-HEADER.c
	$(MAKE_BIN_DIR)c2man -Th \
        $(C2MAN_FLAGS) \
        $(COMPILE_INFO) \
        $(LIB_COMPONENT_NEED_HAVE) \
        -i\"$(LIB_COMPONENT_PREFIX)/$*.h\" \
        -o$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*-HEADER.c
	$(MAKE_SCRIPT_PATH)fix_header_html_pages $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h
	$(KJB_MV) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*-HEADER.c $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.c2man_in_html
	$(KJB_TOUCH) $@

################################################################################
#                             doxygen 

# Doxygen really wants to make everything together. So we do the make in
# KJB_cpp. The library makefile establishes which files suggest that doxygen is
# out of date. 

$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doxygen_up_to_date : $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made $(LIB_COMPONENT_DOXYGEN_FILES)
	$(KJB_TOUCH) $@
 
# Note the master target is in KJB_cpp. Here we inform it about dependencies in
# this directory.
# 
$(KJB_SRC_PATH)KJB_cpp/$(MAKE_DOC_DIR)doxygen_up_to_date : $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doxygen_up_to_date

# If the user does a make doc in a c++ library directory, then that get
# translated into "make doxygen" by the build scripts, which leads us to this
# target.
#
doxygen_$(LIB_COMPONENT_PREFIX) : 
	@echo "Building doxygen in $(KJB_SRC_PATH)KJB_cpp."
	cd $(KJB_SRC_PATH)KJB_cpp; make doxygen

misc_doc_$(LIB_COMPONENT_PREFIX) : doc_$(LIB_COMPONENT_PREFIX) doxygen_$(LIB_COMPONENT_PREFIX) 
	rsync -rl -u $(DOC_DIR)doxygen/ $(MISC_DOC_DIR)doxygen 
	rsync -rl -u $(DOC_DIR)man/ $(MISC_DOC_DIR)man 

################################################################################
#                               Clean
#
clean_$(LIB_COMPONENT_PREFIX) : $(CLEAN_TARGETS) 
	$(MAKE_SCRIPT_PATH)clean_build '$(LIB_COMPONENT_SRC_DIR)' $(OBJ_DIR) $(CXX_OBJ_DIR) $(LD_OBJ_DIR) '$(LIB_COMPONENT_PARENT_DIR)_PCH$(KJB_DIR_STR)$(CXX_OBJ_DIR)$(KJB_DIR_STR)$(LIB_COMPONENT_UP_PREFIX)' $(MAKE_DOC_DIR) 
	
################################################################################
#                   Protoize
#
# We have not used this in quite some time. It is probably broken. 
#
proto_$(LIB_COMPONENT_PREFIX) : 
	protoize -c "-DPROTOIZE $(CC_FLAGS) $(HACK_CC_FLAGS) $(KJB_HAVE) $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES)" *.c
	$(MAKE_SCRIPT_PATH)fix_protoize *.c

################################################################################
#        Extra lines automatically generated for each sub lib
#
 
