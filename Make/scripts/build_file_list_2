#!/bin/csh -f

###############################################################################
#
# Identification:
#     A script to maintain the file Include_lines/file_list
#
# Description:
#     Script called by make to maintain the Include_lines/file_list. This tracks
#     changes in the source collection. If source files are added, deleted, or
#     renamed, then the file Include_lines/file_list gets updated which leads to
#     a rebuild of the makefiles on the next call to make.
#
#     The reason why we need an additional call to make is that this script gets
#     called whenever the directory gets updated which happens relatively
#     freqently due to a number of reasons. However, this only indicates that
#     the source file collection might have changed, and, in fact, source file
#     collection changes are relatively rare. Thus there are many false alarms
#     which we can prune relatively quickly. But having the trigger (directory
#     timesamp) be a dependency in make will mean that we rebuild the makefiles
#     every time which is relatively expensive. Hence we use the "hidden"
#     dependency Include_lines/file_list. The script build-2, which is called by
#     Makefile, manages this by calling make several times. If build-2 is not
#     used (e.g., "make -f Makfeile-2) then it may take multiple makes before
#     everything is up to date. Build-2 uses multiple calls to avoid this
#     confusion. 
#
# Author:
#     Kobus Barnard
#
###############################################################################

set num_args = $#argv

set exit_status = 0

if ($?KJB_VERBOSE_INDENT) then
    setenv KJB_VERBOSE_INDENT "    ${KJB_VERBOSE_INDENT}"
else 
    setenv KJB_VERBOSE_INDENT ""
endif 

# We need a consistent sort across machines.
setenv LC_ALL "en_US.UTF-8"
setenv LC_CTYPE "en_US.UTF-8"
   
set dir_arg = "$1"

if ("${dir_arg}" != "") then
    pushd ${dir_arg} > /dev/null
endif 

if (($?KJB_LOCK_TIME_STAMP) && (-e Include_lines/file_list.new)) then
    set can_skip = `${MAKE_SCRIPT_PATH}test_older_than ${KJB_LOCK_TIME_STAMP} Include_lines/file_list.new`

    if (${can_skip}) then
        if ($?KJB_VERBOSE) then
            echo "${KJB_VERBOSE_INDENT}Skipping build_file_list_2 in `pwd` as file_list.new is new."
            set x = $$ ; @ x %= 100 ; sleep 0.$x >& /dev/null
            echo $BEEP
        endif 

        exit 0
    endif 
endif 

${VERBOSE_ECHO} "${KJB_VERBOSE_INDENT}Entering script build_file_list_2 in directory $cwd. "

set must_update = 0

if (-e Include_lines) then
    if (! -d Include_lines) then
        ${KJB_RM} Include_lines
        ${KJB_MKDIR} Include_lines
        set must_update = 1
    endif 
else 
    ${KJB_MKDIR} Include_lines
    set must_update = 1
endif 

if (-e Include_lines/new) then
    if (! -d Include_lines/new) then
        ${KJB_RM} Include_lines/new
        ${KJB_MKDIR} Include_lines/new
        set must_update = 1
    endif 
else 
    ${KJB_MKDIR} Include_lines/new
    set must_update = 1
endif 

if (! -e Include_lines/file_list.new) then 
    set must_update = 1
else if (! -e Include_lines/file_list) then 
    set must_update = 1
else if (! -e Include_lines/header_file_list.new) then 
    set must_update = 1
else if (! -e Include_lines/header_file_list) then 
    set must_update = 1
else if (! -e Include_lines/full_file_list) then 
    set must_update = 1
else 
    # Look for an early exit. If the files that are here now are the same as the
    # last time we updated Include_lines/file_list, then we do not need to update.
    # If the files are differnt, then we do some further work to safely determine if
    # any of them are source files which is more expensive. We do not even bother
    # sorting because switching machines is not very frequent. If we go beyond the
    # quick test, then Include_lines/full_file_list.new will update
    # Include_lines/full_file_list at the end of this file. 
    #
    /bin/ls -1 > Include_lines/full_file_list.new

    if (-e Include_lines/full_file_list) then
        ${KJB_DIFF_TEST} Include_lines/full_file_list Include_lines/full_file_list.new > /dev/null

        if (! ${status}) then 
            if ($?KJB_VERBOSE) then
                echo "${KJB_VERBOSE_INDENT}Script build_file_list_2 is done in $cwd (file list has not changed)" 
                echo " "
            endif

            ${KJB_TOUCH} Include_lines/file_list.new
            ${KJB_TOUCH} Include_lines/header_file_list.new

            goto cleanup
        endif 
    endif 
endif 

if ($?KJB_VERBOSE) then
    echo "${KJB_VERBOSE_INDENT}Script build_file_list_2 is updating Include_lines/file_list.new in $cwd because the file list has changed." 
endif

${MAKE_SCRIPT_PATH}stream_file_names -h -s -skip_incl | sort -u > Include_lines/file_list.new 
if (${status}) then
    set exit_status = 1
    goto cleanup
endif 

# It does not really matter if the blocks are sorted together. We sort just to
# dodge different orders of delivery of files on different environments.
# 
${MAKE_SCRIPT_PATH}stream_script_names | sed '/^build$/d' | sort -u >>  Include_lines/file_list.new
if (${status}) then
    set exit_status = 1
    goto cleanup
endif 

# HERE
if (-e 'input') then
    echo 'input' >> Include_lines/file_list.new
endif 

if (-e Include_lines/file_list) then
    ${KJB_DIFF_TEST} Include_lines/file_list Include_lines/file_list.new > /dev/null
    if (${status}) then 
        if ($?KJB_VERBOSE) then
            echo "${KJB_VERBOSE_INDENT}Updating Include_lines/file_list in $cwd (found difference with file_list.new)." 
        endif

        ${KJB_CP} Include_lines/file_list.new Include_lines/file_list

        if (${status}) then
            echo "Copy (overwrite) Include_lines/file_list.new Include_lines/file_list returned with error status in `pwd`."
            echo "If it reporting that it cannot succed due to the file already existing,"
            echo "it is likely due to corner cases of parallel make and can be ignored for now."
        endif 

        set must_update = 1
    endif 
else
    if ($?KJB_VERBOSE) then
        echo "${KJB_VERBOSE_INDENT}Updating Include_lines/file_list (does not exist) in directory $cwd." 
    endif
    ${KJB_CP} Include_lines/file_list.new Include_lines/file_list

    if (${status}) then
        echo "Copy (fresh) Include_lines/file_list.new Include_lines/file_list returned with error status in `pwd`."
        echo "If it reporting that it cannot succed due to the file already existing,"
        echo "it is likely due to corner cases of parallel make and can be ignored for now."
    endif 

    set must_update = 1
endif 

if ($?KJB_VERBOSE) then
    echo "${KJB_VERBOSE_INDENT}Working on Include_lines/header_list.new in $cwd." 
endif

${MAKE_SCRIPT_PATH}stream_file_names -h  -skip_incl |  sort -u > Include_lines/header_file_list.new 
if (${status}) then
    set exit_status = 1
    goto cleanup
endif 

if (-e Include_lines/header_file_list) then
    ${KJB_DIFF_TEST} Include_lines/header_file_list Include_lines/header_file_list.new > /dev/null
    if (${status}) then 
        if ($?KJB_VERBOSE) then
            echo "${KJB_VERBOSE_INDENT}Updating Include_lines/header_file_list in $cwd (found difference with header_file_list.new)." 
        endif
        ${KJB_CP} Include_lines/header_file_list.new Include_lines/header_file_list

        if (${status}) then
            echo "Copy (overwrite) Include_lines/header_file_list.new Include_lines/header_file_list returned with error status in `pwd`."
            echo "If it reporting that it cannot succed due to the file already existing,"
            echo "it is likely due to corner cases of parallel make and can be ignored for now."
        endif 

        set must_update = 1
    else if ($?KJB_VERBOSE) then
        echo "${KJB_VERBOSE_INDENT}Include_lines/header_file_list does not need updating." 
    endif 
else
    if ($?KJB_VERBOSE) then
        echo "${KJB_VERBOSE_INDENT}Updating Include_lines/header_file_list in $cwd (as it does not exist)." 
    endif
    ${KJB_CP} Include_lines/header_file_list.new Include_lines/header_file_list

    if (${status}) then
        echo "Copy (fresh) Include_lines/header_file_list.new Include_lines/header_file_list returned with error status in `pwd`."
        echo "If it reporting that it cannot succed due to the file already existing,"
        echo "it is likely due to corner cases of parallel make and can be ignored for now."
    endif 

    set must_update = 1
endif 

/bin/ls -1 > Include_lines/full_file_list

if (${must_update}) then
    if ($?KJB_VERBOSE) then
        echo "${KJB_VERBOSE_INDENT}Script build_file_list_2 found that source files in ${cwd} have been either created, destroyed, or renamed." 
        echo "${KJB_VERBOSE_INDENT}Script build_file_list_2 is updating source shadow include line filea in ${cwd}/Include_lines. "
    endif

    set actually_updated = 0 

    # set include_line_files = `${KJB_LS} -1 -d Include_lines/*.[hcC] Include_lines/*.[chit]pp Include_lines/*.cxx |& grep -v 'No match'`
    set include_line_files = `${MAKE_SCRIPT_PATH}stream_file_names Include_lines -s -h -skip_incl`

    # Check for deletes and moves (part 1).
    #
    foreach inc_file (${include_line_files}) 
        set source_file = `echo ${inc_file} | sed 's#Include_lines/##'`

        if (! -e "${source_file}") then
            if ($?KJB_VERBOSE) then
                echo "${KJB_VERBOSE_INDENT}Script build_file_list_2 is deleting Include_lines/${source_file} and Include_lines/new/${source_file}."
            endif

            ${KJB_RM} Include_lines/${source_file}
            ${KJB_RM} Include_lines/new/${source_file}

            set actually_updated = 1
        endif
    end

    set source_files = `${MAKE_SCRIPT_PATH}stream_file_names -s -h` 

    # Check for adds and moves (part 2).
    #
    foreach source_file (${source_files}) 
        set inc_file = Include_lines/${source_file}
        set new_inc_file = Include_lines/new/${source_file}

        if (! -e "${inc_file}") then
            if ($?KJB_VERBOSE_2) then
                echo "${KJB_VERBOSE_INDENT}Script build_file_list_2 is adding ${inc_file} in ${cwd}." 
            endif

            # Changes here should be checked against similar lines in
            # build_include_lines
            #
            sed -n '/^[ 	]*#[ 	]*include[ 	][ 	]*["<].*\.[hH][px]*[">][ 	]*\/*/p' ${source_file} | sed 's@.*\([<"][A-Za-z0-9/_-]*\.[hH][px]*[>"]\).*$@\1@' > ${new_inc_file}.tmp.$$
            if (${status}) then
                ${P_STDERR} "Making a list of include lines into ${new_inc_file}.tmp.$$ failed."
                set exit_status = 1
                goto cleanup
            endif 

            # This previous version assumes an overly restricted version of how
            # we do #define's.  However there is no problem risking a spurious
            # KJB_HAVE. So we loosen the search criterion.
            #
            #      sed -n '/^#[ 	]*ifdef[ 	][ 	]*KJB_HAVE_[A-Z0-9_][A-Z0-9_]*/p' ${source_file} | sed 's/.*\(KJB_HAVE_[A-Z0-9_][A-Z0-9_]*\)/\1/' >> ${new_inc_file}.tmp.$$
            #
            # Looser search criterion.
            #
            sed -n '/^[ 	]*#[ 	]*[ie].*KJB_HAVE_[A-Z0-9_][A-Z0-9_]*/p' ${source_file} | sed 's/||/\n/' | sed 's/&&/\n/' | sed -n '/KJB_HAVE_/p' | sed 's/.*\(KJB_HAVE_[A-Z0-9][A-Z0-9_]*\).*/\1/' >> ${new_inc_file}.tmp.$$
            if (${status}) then
                ${P_STDERR} "Adding KJB_HAVE lines into  ${new_inc_file}.tmp.$$ failed."
                set exit_status = 1
                goto cleanup
            endif 

            sort -u ${new_inc_file}.tmp.$$ > ${new_inc_file}
            if (${status}) then
                set exit_status = 1
                goto cleanup
            endif 

            ${KJB_RM} ${new_inc_file}.tmp.$$
            if (${status}) then
                set exit_status = 1
                goto cleanup
            endif 

            ${KJB_CP} ${new_inc_file} ${inc_file}
            if (${status}) then
                set exit_status = 1
                goto cleanup
            endif 

            set actually_updated = 1
        endif
    end

    if ((${actually_updated}) || (! -e Include_lines/include_lines.new))  then
        if ($?KJB_VERBOSE) then
                echo "${KJB_VERBOSE_INDENT}Script build_file_list_2 is updating Include_lines/include_lines in directory ${cwd}."
                echo " "
            endif

        ${KJB_TOUCH} Include_lines/include_lines 
        ${KJB_TOUCH} Include_lines/include_lines.new 
    endif 
endif 

cleanup:

${VERBOSE_ECHO} "${KJB_VERBOSE_INDENT}Leaving script build_file_list_2 in directory $cwd with status ${exit_status}."

exit ${exit_status} 

