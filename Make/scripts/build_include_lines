#!/bin/csh -f

###############################################################################
#
# Identification:
#     A script to maintain the file Include_lines/include_lines.
#
# Description:
#     This script is called by make to maintain the file
#     Include_lines/include_lines. This file has two roles for efficiency. 1)
#     Its existence/timestamp indicates whether the dependencies (i.e.,
#     Makefile-depend) are up to date. 2) Its contents tracks the sub libs
#     mentioned in include lines, and when this changes, it triggers the
#     build of Makefile-dirs. 
#
#     The logic for (1) is implemented in the Makefiles, the script
#     build_include_line_files, and the script update_include_line_file.  By the
#     time this script is called, if Include_lines/include_lines was out of
#     date, it will have been removed, and it is up to this script to rebuild
#     it. Regardless, this script then checks if the contents indicate that the
#     sub-directories need to be updated, and calls other scripts to do that if
#     needed. It is important that we do this only when needed, because sorting
#     out the sub-libs is potentially expensive because it recurses on all
#     sub-libs to look for their sub-libs. 
#
#     This script is really just a front end to build_include_lines_2 which does
#     all the heavy lifting.
#
# Parameters:
#     This script takes either zero or one or two args. If the first arg is
#     "-f", then we force the building of sub_libs_needed. If there is another
#     argument, it is taken as the directory to run it in. 
#
# Author:
#     Kobus Barnard
#
###############################################################################

@ num_args = ${#argv}

if ("${num_args}" > 2) then
    ${P_STDERR} "Script build_include_lines takes at most 2 parameters."
    exit 1
endif 

# This is meant to be at the top recursive level.
setenv KJB_VERBOSE_INDENT ""

if ($?KJB_VERBOSE) then
    echo "Entering script build_include_lines in directory $cwd with args '$*'."
endif

set force_build_sub_libs_arg = ""
set dir_arg = ""

foreach arg ($*)
   if ("${arg}" == "-f") then
       set force_build_sub_libs_arg = "-f"
   else if ("${dir_arg}" == "") then
       set dir_arg = "$arg"
   else 
        ${P_STDERR} "Script build_include_lines called with more than one argument that is not '-f'."
        exit 1
   endif 
end 
 
# 2019/06/15
# Previously we had logic to reduce the number of processes, but we are not
# currently forking in build_sub_libs_needed, and the code to do (available in
# build_include_line_files.BROKEN_PRECOMPUTE) was unclear and brittle. So we
# have removed it. 
#
# Retrospective: This is an awkward process to make parallel as the number of
# processes created can be large. If we want it to run faster we should consider
# speeding up the bottleneck which is build_makefile_libs_needed, and which
# might not even need to be part of this process. See
# SHADDOW_BUILD_MAKEFILE_LIBS in build_include_lines_2. The main issue here
# might be overly relying on gmake which makes things that are included (which
# is the case with Makefile-libs-needed). See build-2 for additional code that
# tries to protect against this. 

set exit_status = 0

if ("${dir_arg}" != "") then
    cd ${dir_arg} > /dev/null
endif 

${MAKE_SCRIPT_PATH}kjb_lock ${MAKE_SCRIPT_PATH}build_include_lines_2 ${force_build_sub_libs_arg}
set exit_status = ${status}

if ($?KJB_VERBOSE) then
    echo "${KJB_VERBOSE_INDENT}Leaving script build_include_lines in directory $cwd with status ${exit_status}."
endif

exit ${exit_status} 



