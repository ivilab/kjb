# $Id: init_tacc_hpc 19512 2015-06-23 23:33:31Z predoehl $
# This is tcsh scripting language and is meant to be sourced by
# init_compile, when it is running for the first time on Stampede,
# the Xeon-based cluster of TACC (Texas Advanced Computing Cluster).
# TACC has other clusters, but we only consider Stampede (the newest).

# Interactive tcsh shells have the proper alias as "module," but it is
# not exported to this script.  We need it, so we set it up here.  See:
# https://www.tacc.utexas.edu/research-development/tacc-projects/lmod/system-administrators-guide/integrating-the-module-command-into-users-shells
# Note, this code is derived from their guide, and might be fragile.
set found = `alias | egrep -c "^module[[:space:]]"`
if ((! $found) && (-d /etc/profile.d)) then
    set nonomatch
    foreach i (/etc/profile.d/*.csh)
        source $i
    end
    unset nonomatch
else
    echo "Warning:  a module alias exists yet modules are not set up."
endif

# We load the intel/15 compiler, Boost, Cmake, FFTW3, GSL, and Python.
# Others are available, and it should be safe to but you'll have to add them
# yourself.  This is somewhat tweaked to support TIES.

# The names below are space-sep. strings recognized by the "module" command.
set desired_module_names = "boost cmake fftw3 gsl python"
# Some modules are for libraries with corresponding header or .so files.
# For each such module we need an identifying substring that TACC embeds in
# an env. variable, apparently just an all-caps version.  Order irrelevant.
set desired_mev_names = "BOOST FFTW3 GSL MKL PYTHON"
# Boost 1.55 for intel/14 was not compatible with C++11.
# I'm leaving this in for intel/15 in an abundance of caution (or cowardice).
kjb_setenv KJB_SUPPRESS_CXX11 1

# Load Intel compiler module -- latest minor version of major-version 15.
module -t spider intel >& /dev/null # rebuild cache
set found = "`(module -t spider intel)|& grep intel/15 |sort |tail -1`"
module load ${found}
# HACK! you cannot get fftw3 unless you already have this, an MPI module.
# The docs saying you need it are human-only-readable, unfortunately.
module swap mvapich2/2.1
# Load all the modules on the wish list all at once.
# Next line uses word splitting.
module load ${desired_module_names}

# Add important directories to INCLUDE and LD_LIBRARY_PATH.
# Next line uses word splitting.
foreach env_var_name (${desired_mev_names})
    # MIC_TACC... stuff is for code that targets Xeon Phi coprocessor cards.
    # MIC = "mike" = Many Integrated Cores.  Almost a synonym for Phi??
    set found = `printenv | sed -n "/^MIC_TACC_${env_var_name}_INC=/s/[^=]*=//p"`
    if (${%found}) then
        setenv INCLUDE "${INCLUDE}:${found}"
    endif
    set found = `printenv | sed -n "/^MIC_TACC_${env_var_name}_LIB=/s/[^=]*=//p"`
    if (${%found}) then
        setenv LD_LIBRARY_PATH "${LD_LIBRARY_PATH}:${found}"
    endif
    # non-MIC TACC is for the Xeon E5 (Sandy Bridge)
    set found = `printenv | sed -n "/^TACC_${env_var_name}_INC=/s/[^=]*=//p"`
    if (${%found}) then
        setenv INCLUDE "${INCLUDE}:${found}"
    endif
    set found = `printenv | sed -n "/^TACC_${env_var_name}_LIB=/s/[^=]*=//p"`
    if (${%found}) then
        setenv LD_LIBRARY_PATH "${LD_LIBRARY_PATH}:${found}"
    endif
end
unset found env_var_name

# All that work is vain unless these flags are set:
set use_ld_library_path = 1
set use_include_path = 1

if ($?KJB_VERBOSE) then
    echo " "
    echo "List of desired TACC modules: ${desired_module_names}"
    echo "List of loaded TACC modules: ${LOADEDMODULES}"
    echo 'Contents of $INCLUDE: ' "${INCLUDE}"
    echo 'Contents of $LD_LIBRARY_PATH: ' "${LD_LIBRARY_PATH}"
endif

# The next block is copied from above, and applies to TACC as well:
# "Since UA HPC uses environment variables such as LD_LIBRARY_PATH
# and INCLUDE, it seems prudent to cache them for this environment
# even though we do not cache them normally.  Ideally the cache
# would have already extracted all relevant information, but we
# cannot be sure that nothing will break if we pull LD_LIBRARY_PATH
# and other environment variables from all the tools."
if ($?LD_LIBRARY_PATH) echo LD_LIBRARY_PATH >>! ${varname_fname}
if ($?INCLUDE)         echo INCLUDE         >>! ${varname_fname}
if ($?LOADEDMODULES)   echo LOADEDMODULES   >>! ${varname_fname}
if ($?_LMFILES_)       echo _LMFILES_       >>! ${varname_fname}

