#include <mcmcda_cpp/mcmcda_data.h>
#include <mcmcda_cpp/mcmcda_track.h>
#include <mcmcda_cpp/mcmcda_association.h>
#include <mcmcda_cpp/mcmcda_likelihood.h>
#include <mcmcda_cpp/mcmcda_prior.h>
#include <vector>
#include <string>
#include <iostream>
#include <iterator>
#include <algorithm>
#include <cmath>

using namespace kjb;
using namespace kjb::mcmcda;
using namespace std;

typedef Generic_track<Vector> V_track;
typedef Association<V_track> V_association;

int main(int, char**)
{
    string fnames[2] = {"input/t1", "input/t2"};

    Data<Vector> data;
    data.read(vector<string>(fnames, fnames + 2));

    for(size_t i = 0; i < data.size(); i++)
    {
        copy(data[i].begin(), data[i].end(), ostream_iterator<Vector>(cout, " "));
        cout << endl;
    }

    //// POSTERIORS (JOINTS, ACTUALLY) OF ALL POSSIBLE ASSOCIATIONS
    Likelihood<V_track> L(1.0, 1.0, 1e-4, Identity<Vector>());
    Prior<V_track> P(1e-3, 0.3, 0.95, 0.1, 2.0, 3);
    V_association w(data);
    V_track track;
    V_track track2;
    double p_Y = 0.0;
    double Sp_w = 0.0;

    // all noise
    Sp_w += exp(P(w));
    p_Y += exp(L(w) + Sp_w);

    // 1 track (length 1)
    w.clear();
    track.clear();
    track[1] = &(*(data[0].begin()));
    w.insert(track);
    Sp_w += exp(P(w));
    p_Y += exp(L(w) + Sp_w);

    w.clear();
    track.clear();
    track[2] = &(*(data[1].begin()));
    w.insert(track);
    Sp_w += exp(P(w));
    p_Y += exp(L(w) + Sp_w);

    // 1 track (length 2)
    w.clear();
    track.clear();
    track[1] = &(*(data[0].begin()));
    track[2] = &(*(data[1].begin()));
    w.insert(track);
    Sp_w += exp(P(w));
    p_Y += exp(L(w) + Sp_w);

    // 2 tracks (length 1)
    w.clear();
    track.clear();
    track[1] = &(*(data[0].begin()));
    track2[2] = &(*(data[1].begin()));
    w.insert(track);
    w.insert(track2);
    Sp_w += exp(P(w));
    p_Y += exp(L(w) + Sp_w);

    cout << "p(Y) = " << p_Y << endl;
    cout << "S p(w) = " << Sp_w << endl;

    return EXIT_SUCCESS;
}

