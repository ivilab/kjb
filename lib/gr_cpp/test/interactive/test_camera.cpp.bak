/* $Id$ */
/* =========================================================================== *
   |
   |  Copyright (c) 1994-2010 by Kobus Barnard (author)
   |
   |  Personal and educational use of this code is granted, provided that this
   |  header is kept intact, and that the authorship is not misrepresented, that
   |  its use is acknowledged in publications, and relevant papers are cited.
   |
   |  For other use contact the author (kobus AT cs DOT arizona DOT edu).
   |
   |  Please note that the code in this file has not necessarily been adequately
   |  tested. Naturally, there is no guarantee of performance, support, or fitness
   |  for any particular task. Nonetheless, I am interested in hearing about
   |  problems that you encounter.
   |
   |  Author:  Kyle Simek
 * =========================================================================== */

/*-----------------------------------------------------------------------------
 *  This program tests the following functionality in gr_camera.h:
 *      * Matrix_camera class
 *-----------------------------------------------------------------------------*/

#ifdef KJB_HAVE_OPENGL
#ifdef MAC_OSX
#    include <OpenGL/glu.h>
#    include <GLUT/glut.h>
#else 
	#ifdef WIN32
	#	 include <GL/glu.h>
	#	 include <glut.h>
	#else 
	#    include <GL/glu.h>       
	#    include <GL/glut.h>       
	#endif
#endif 
#endif // KJB_HAVE_OPENGL

#include <unistd.h>
#include <m_cpp/m_cpp_incl.h>
#include <gr_cpp/gr_camera.h>
#include <gr_cpp/gr_sprite.h>

#include <iostream>

using namespace kjb;
using std::cout;

void print_projection_matrix();
void print_modelview_matrix();

void idle();
void draw();
void reshape(int width, int height);

void draw_image();
void draw_cube();
void key_cb(unsigned char _key, int x, int y);

Gl_sprite sprites[36];
Matrix_camera camera[36];
bool manual_operation = false;

int cur_view = 0;

int load()
{
    char buffer[512];

    for(int i = 0; i < 36; i++)
    {
        /* these were all calibrated using the top-left convention pixel coordinate convention */
        sprintf(buffer, "input/camera_%d.txt", i);


        // TODO migrate to Matrix_gl_interface
        // read matrix
        // create calibration info
        // decompose
        // pass to matrix_gl_interface
        //
        camera[i] = Matrix_camera(Matrix(buffer));

        sprintf(buffer, "input/cal_%d.tiff", i);
        sprites[i] = Gl_sprite(buffer);
    }

    /** Use matrix calibrated under the bottom-left convention for camera 0 */
        // TODO migrate to Matrix_gl_interface
        // read matrix
        // create calibration info
        // decompose
        // pass to matrix_gl_interface
        //
    sprintf(buffer, "input/camera_%d_bl.txt", 0);
    camera[0] = Matrix_camera(Matrix(buffer));
    camera[0].set_lower_left_convention(true);

}

int main(int argc, char *argv[])
{
    // create a camera from a calibrated camera matrix
    // display image in window
    Image img("input/cal_0.tiff");
    size_t width = img.get_num_cols();
    size_t height = img.get_num_rows();

    kjb_c::kjb_l_set("page", "off");

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowPosition(100,100);
    glutInitWindowSize(width,height);
    glutCreateWindow("Camera test");

    glutDisplayFunc(draw);
    glutIdleFunc(idle);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(key_cb);


    // set up viewport
    glViewport(0, 0, width, height);

    glEnable (GL_BLEND);
    glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    /* *
     * questions:
     *      1. does img display upside-down normally? 
     *      2. does img ignore camera matrix?
     *      */


    load();

    glutMainLoop();
    return EXIT_SUCCESS;
}

void draw()
{
    glClearColor(1.0, 1.0, 1.0, 0.0);

	/* clear the drawing buffer */
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);        

    cout << "Drawing view #" << cur_view << "\n";
    draw_image();
    draw_cube();

    glFlush();

    glutSwapBuffers(); 
}

void reshape(int width, int height)
{
    if(width == 0) width = 1;
    if(height == 0) height = 1;

    glViewport(0, 0, width, height);

}
/*  /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\   */

void draw_image()
{
    sprites[cur_view].set_position(0,0);
    sprites[cur_view].set_scale(1,1);
    sprites[cur_view].render();
}

void draw_cube()
{

    glDisable( GL_TEXTURE_2D);
    glEnable(GL_DEPTH_TEST);
    glDisable(GL_CULL_FACE);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    //gluPerspective(45, 1, 1, 1000);
    camera[cur_view].set_gl_projection();

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    camera[cur_view].set_gl_modelview();

    //print_projection_matrix();
    //print_modelview_matrix();
    // display 3d cube over image
    glBegin(GL_QUADS);
        glColor4f(1.0, 0.0, 0.0, 0.8);
        glVertex3f(0., 0., 0.);
        glVertex3f(0.,160., 0.);
        glVertex3f(160.,160., 0.);
        glVertex3f(160., 0., 0.);

        glColor4f(0.0, 1.0, 0.0, 0.8);
        glVertex3f(0., 0., 160.);
        glVertex3f(160., 0., 160.);
        glVertex3f(160.,160., 160.);
        glVertex3f(0.,160., 160.);

        glColor4f(0.0, 0.0, 1.0, 0.8);
        glVertex3f(0., 0., 0.);
        glVertex3f(0., 0.,160.);
        glVertex3f(0., 160.,160.);
        glVertex3f(0., 160., 0.);

        glColor4f(1.0, 1.0, 0.0, 0.8);
        glVertex3f(160., 0., 0.);
        glVertex3f(160., 160., 0.);
        glVertex3f(160., 160.,160.);
        glVertex3f(160., 0.,160.);

        glColor4f(0.0, 1.0, 1.0, 0.8);
        glVertex3f(0., 0., 0.);
        glVertex3f(160., 0., 0.);
        glVertex3f(160., 0., 160.);
        glVertex3f(0., 0., 160.);

        glColor4f(1.0, 0.0, 1.0, 0.8);
        glVertex3f(0., 160., 0.);
        glVertex3f(0., 160., 160.);
        glVertex3f(160., 160., 160.);
        glVertex3f(160., 160., 0.);
    glEnd();

    glColor3f(0.0, 0.0, 0.0);
    glBegin(GL_LINE_STRIP);
        glVertex3f(0,0,0);
        glVertex3f(0,160,0);
        glVertex3f(160,160,0);
        glVertex3f(160,0,0);
        glVertex3f(0,0,0);
    glEnd();

    glBegin(GL_LINE_STRIP);
        glVertex3f(0,0,160);
        glVertex3f(0,160,160);
        glVertex3f(160,160,160);
        glVertex3f(160,0,160);
        glVertex3f(0,0,160);
    glEnd();

    glBegin(GL_LINES);
        glVertex3f(0,0,0);
        glVertex3f(0,0,160);
        glVertex3f(160,0,0);
        glVertex3f(160,0,160);
        glVertex3f(160,160,0);
        glVertex3f(160,160,160);
        glVertex3f(0,160,0);
        glVertex3f(0,160,160);
    glEnd();
}

void idle()
{
    if(manual_operation)
        return;

    cur_view = (cur_view + 1) % 36;
    usleep(100000);
    glutPostRedisplay();
}

void key_cb(unsigned char _key, int x, int y) 
{
    switch(_key)
    {
        case 'n':
            cur_view = (cur_view + 1) % 36;
            manual_operation = true;
            glutPostRedisplay();
            break;
        case 'p':
            cur_view = (cur_view + 36-1) % 36;
            manual_operation = true;
            glutPostRedisplay();
            break;
        case 'o':
            print_projection_matrix();
            print_modelview_matrix();
            manual_operation = true;
            break;
        case 'g':
            manual_operation = false;
            break;
        case 'q':
            exit(0);
            break;
    }
}

void print_projection_matrix()
{
    double proj[16];

    glGetDoublev(GL_PROJECTION_MATRIX, proj);
    cout << "Projection_matrix:\n" ;
    cout << "[" ;
    cout << proj[0] << ", ";
    cout << proj[4] << ", ";
    cout << proj[8] << ", ";
    cout << proj[12] << "]\n";

    cout << "[" ;
    cout << proj[1] << ", ";
    cout << proj[5] << ", ";
    cout << proj[9] << ", ";
    cout << proj[13] << "]\n";
    cout << "[" ;
    cout << proj[2] << ", ";
    cout << proj[6] << ", ";
    cout << proj[10] << ", ";
    cout << proj[14] << "]\n";
    cout << "[" ;
    cout << proj[3] << ", ";
    cout << proj[7] << ", ";
    cout << proj[11] << ", ";
    cout << proj[15] << "]\n";
}

void print_modelview_matrix()
{
    double proj[16];

    glGetDoublev(GL_MODELVIEW_MATRIX, proj);
    cout << "Modelview matrix:\n" ;
    cout << "[" ;
    cout << proj[0] << ", ";
    cout << proj[4] << ", ";
    cout << proj[8] << ", ";
    cout << proj[12] << "]\n";

    cout << "[" ;
    cout << proj[1] << ", ";
    cout << proj[5] << ", ";
    cout << proj[9] << ", ";
    cout << proj[13] << "]\n";

    cout << "[" ;
    cout << proj[2] << ", ";
    cout << proj[6] << ", ";
    cout << proj[10] << ", ";
    cout << proj[14] << "]\n";
    cout << "[" ;
    cout << proj[3] << ", ";
    cout << proj[7] << ", ";
    cout << proj[11] << ", ";
    cout << proj[15] << "]\n";
}
