/* $Id$ */
/* {{{=========================================================================== *
   |
   |  Copyright (c) 1994-2014 by Kobus Barnard (author)
   |
   |  Personal and educational use of this code is granted, provided that this
   |  header is kept intact, and that the authorship is not misrepresented, that
   |  its use is acknowledged in publications, and relevant papers are cited.
   |
   |  For other use contact the author (kobus AT cs DOT arizona DOT edu).
   |
   |  Please note that the code in this file has not necessarily been adequately
   |  tested. Naturally, there is no guarantee of performance, support, or fitness
   |  for any particular task. Nonetheless, I am interested in hearing about
   |  problems that you encounter.
   |
   |  Author:  Kyle Simek
 * =========================================================================== }}}*/

// vim: tabstop=4 shiftwidth=4 foldmethod=marker

// This file implements the tests for two programs:
// 1. test_vector_d.cpp
// 2. test_vector_d_precompiled.cpp
//
// The difference between these is the value of a constant D; the 
// latter sets it to a low enough value that the precompiled code is used.
// The former sets D high enought that the generic implementation file, m_vector_d.impl.h
// must also be included. 
//
// PLEASE DEFINE CONSTANT D before including this file.

#include <l_cpp/l_test.h>

#include <l/l_sys_rand.h>

#include <l_cpp/l_serialization.h>
#include <m_cpp/m_vector_d.h>
#include <m_cpp/m_vector.h>
//#include <m_cpp/m_matrix_d.h>
#include <m_cpp/m_matrix.h>

#include <fstream>

using namespace kjb;

namespace
{

const bool VERBOSE = false;


#define TEST_EQUAL(a, b) TEST_TRUE(a == b)
#define TEST_FLT_EQUAL(a, b) TEST_TRUE(fabs(a-b) < FLT_EPSILON)

#define CHATTER \
    do { if (VERBOSE) std::cout << "Now in " << __func__ << '\n'; } while(0)

void test_ctors()
{
    CHATTER;

    // default construction.
    {
        Vector_d<D> v;
    }

    // copy constructor
    {
        Vector_d<D> v;
        for(size_t i = 0; i < v.size(); i++)
            v[i] = kjb_c::kjb_rand();

        Vector_d<D> v_copy(v);
        for(size_t i = 0; i < v.size(); i++)
            TEST_EQUAL(v[i], v_copy[i]);
    }

    // initialized construction
    {
        double value = 1234.0;
        Vector_d<D> v(value);
        for(size_t i = 0; i < v.size(); i++)
        {
            TEST_EQUAL(v[i], value);
        }
    }

    // "Vector2 constructor"
    {
        Vector2 v(1.0, 2.0);
        TEST_EQUAL(v.size(), 2);
        TEST_EQUAL(v[0], 1.0);
        TEST_EQUAL(v[1], 2.0);
    }

    // "Vector3 constructor"
    {
        Vector3 v(1.0, 2.0, 3.0);
        TEST_EQUAL(v.size(), 3);
        TEST_EQUAL(v[0], 1.0);
        TEST_EQUAL(v[1], 2.0);
        TEST_EQUAL(v[2], 3.0);
    }

    // "Vector4 constructor"
    {
        Vector4 v(1.0, 2.0, 3.0, 4.0);
        TEST_EQUAL(v.size(), 4);
        TEST_EQUAL(v[0], 1.0);
        TEST_EQUAL(v[1], 2.0);
        TEST_EQUAL(v[2], 3.0);
        TEST_EQUAL(v[3], 4.0);
    }

    // convert from dynamic Vector
    {
        Vector v = create_random_vector(D);
        Vector_d<D> vd(v);

        for(size_t i = 0; i < vd.size(); i++)
        {
            TEST_EQUAL(v[i], vd[i]);
        }

        // construct from wrong size
        Vector v2 = create_random_vector(D+1);
        TEST_FAIL(Vector_d<D> vd2(v2));
    }

    // assignment
    {
        Vector_d<D> vd(100.0);
        Vector_d<D> vd2;
        vd2 = vd;

        for(size_t i = 0; i < D; i++)
        {
            TEST_EQUAL(vd[i], vd2[i]);
        }

        // test assignment from dynamic vector
        Vector v = create_random_vector(D);
        vd = v;

        for(size_t i = 0; i < D; i++)
        {
            TEST_EQUAL(vd[i], v[i]);
        }

        v = create_random_vector(D+1);
        TEST_FAIL(vd = v);
    }

}

void test_accessors()
{
    CHATTER;
    {
        Vector2 v(1.0, 2.0);
        TEST_EQUAL(v.x(), 1.0);
        TEST_EQUAL(v.y(), 2.0);

        v.set_x(0.0);
        v.set_y(0.0);

        TEST_EQUAL(v.x(), 0.0);
        TEST_EQUAL(v.y(), 0.0);
    }

    {
        Vector3 v(1.0, 2.0, 3.0);
        TEST_EQUAL(v.x(), 1.0);
        TEST_EQUAL(v.y(), 2.0);
        TEST_EQUAL(v.z(), 3.0);

        v.set_x(0.0);
        v.set_y(0.0);
        v.set_z(0.0);

        TEST_EQUAL(v.x(), 0.0);
        TEST_EQUAL(v.y(), 0.0);
        TEST_EQUAL(v.z(), 0.0);
    }

    {
        Vector4 v(1.0, 2.0, 3.0, 4.0);
        TEST_EQUAL(v.x(), 1.0);
        TEST_EQUAL(v.y(), 2.0);
        TEST_EQUAL(v.z(), 3.0);
        TEST_EQUAL(v.w(), 4.0);

        v.set_x(0.0);
        v.set_y(0.0);
        v.set_z(0.0);
        v.set_w(0.0);

        TEST_EQUAL(v.x(), 0.0);
        TEST_EQUAL(v.y(), 0.0);
        TEST_EQUAL(v.z(), 0.0);
        TEST_EQUAL(v.w(), 0.0);
    }

    // magnitudes
    {
        Vector_d<D> v(1.0);
        TEST_FLT_EQUAL(v.magnitude(), sqrt(D));
        TEST_FLT_EQUAL(v.magnitude_squared(), D);
    }
}

template <class Matrix_type>
void test_matrix_multiply(size_t NUM_ROWS)
{
    CHATTER;
    Vector_d<D> vd = create_random_vector<D>();
    Matrix_type m = create_random_matrix(NUM_ROWS, D);
    Vector v = m * vd;

    for(size_t r = 0; r < NUM_ROWS; r++)
    {
        double sum = 0;
        for(size_t c = 0; c < D; c++)
        {
            sum += m(r, c) * vd[c];
        }

        TEST_EQUAL(sum, v[r]);
    }
}

void test_arithmetic()
{
    CHATTER;
    const int NUM_ROWS = 10;
    // multiply by dynamic matrix
    test_matrix_multiply<Matrix>(NUM_ROWS);
    CHATTER;

//    // multply by static matrix
//    test_matrix_multiply<Matrix_d<NUM_ROWS, D> >(NUM_ROWS);

    // subtraction
    {
        Vector_d<D> v1(create_random_vector<D>());
        Vector_d<D> v2(create_random_vector<D>());
        v1 -= v1;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v1[i], 0.0);

        v1 = create_random_vector<D>();
        Vector_d<D> v3 = v1;
        v3 -= v2;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v3[i], v1[i] - v2[i]);

        v3 = v1 - v2;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v3[i], v1[i] - v2[i]);
    }

    // negation
    {
        Vector_d<D> v1 = create_random_vector<D>();
        Vector_d<D> v2 = -v1;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v1[i], -v2[i]);
    }

    // addition
    {
        Vector_d<D> v1 = create_random_vector<D>();
        Vector_d<D> v2 = create_random_vector<D>();
        v1 += -v1;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v1[i], 0.0);

        v1 = create_random_vector<D>();
        Vector_d<D> v3 = v1;
        v3 += -v2;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v3[i], v1[i] - v2[i]);

        v3 = v1 + v2;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v3[i], v1[i] + v2[i]);

    }

    // multiplication by a scalar
    {
        double SCALAR = 123;
        Vector_d<D> v1 = create_random_vector<D>();
        Vector_d<D> v2 = v1 * SCALAR;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v2[i], v1[i] * SCALAR);
        
        // transitive case
        v2 = SCALAR * v1;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v2[i], v1[i] * SCALAR);

        // overwriting
        v2 = v1;
        v2 *= SCALAR;

        for(size_t i = 0; i < D; i++)
            TEST_EQUAL(v2[i], v1[i] * SCALAR);
    }

    // division by a scalar
    {
        double SCALAR = 123;
        Vector_d<D> v1 = create_random_vector<D>();
        Vector_d<D> v2 = v1 / SCALAR;

        for(size_t i = 0; i < D; i++)
        {
            if (VERBOSE)
            {
                std::cout << __FILE__ << ':' << __LINE__ << '\t'
                    << v2[i] << '\t' << v1[i] / SCALAR
                    << '\t' << v2[i] - v1[i]/SCALAR << '\n';
            }
#if 1
            TEST_FLT_EQUAL(v2[i], v1[i] / SCALAR);
#else
            TEST_EQUAL(v2[i], v1[i] / SCALAR);
#endif
        }

        // overwriting
        v2 = v1;
        v2 /= SCALAR;

        for(size_t i = 0; i < D; i++)
        {
            if (VERBOSE)
            {
                std::cout << __FILE__ << ':' << __LINE__ << '\t'
                    << v2[i] << '\t' << v1[i] / SCALAR
                    << '\t' << v2[i] - v1[i]/SCALAR << '\n';
            }
#if 1
            TEST_FLT_EQUAL(v2[i], v1[i] / SCALAR);
#else
            TEST_EQUAL(v2[i], v1[i] / SCALAR);
#endif
        }
   
    }

}

void test_mutators()
{
    CHATTER;
    // swap
    {
        Vector_d<D> v1 = create_random_vector<D>();
        Vector_d<D> v2 = v1;
        Vector_d<D> v3 = create_random_vector<D>();

        swap(v2, v3);

        for(size_t i = 0; i < D; i++)
        {
            TEST_EQUAL(v1[i], v3[i]);
        }
    }

    // resize
    {
        Vector_d<D> v;
        TEST_SUCCESS(v.resize(D));
        TEST_FAIL(v.resize(D+1));
    }

}

void test_comparators()
{
    CHATTER;
    // equality
    {
        Vector_d<D> v1 = create_random_vector<D>();
        Vector_d<D> v2 = v1;

        TEST_TRUE(v1 == v2);
        TEST_TRUE(v1 <= v2);
        TEST_TRUE(v1 >= v2);
        TEST_FALSE(v1 != v2);

        // randomly increase on of v2's elements, so 
        // we can test for inequality
        size_t i = kjb_c::kjb_rand() * D;
        v2[i] += 1;
        TEST_FALSE(v1 == v2);
        TEST_TRUE(v1 != v2);
        TEST_TRUE(v1 < v2);
        TEST_TRUE(v1 <= v2);
        TEST_TRUE(v2 > v1);
        TEST_TRUE(v2 >= v1);
    }

    // 
}

void test_utility_functions()
{
    CHATTER;
    Vector_d<D> v1 = create_random_vector<D>();

    for(size_t i = 0; i < D; i++)
    {
        TEST_TRUE(v1[i] <= 1.0);
        TEST_TRUE(0.0 <= v1[i]);
    }

    Vector2 v2 = create_random_vector2();

    for(size_t i = 0; i < 2; i++)
    {
        TEST_TRUE(v1[i] <= 1.0);
        TEST_TRUE(0.0 <= v1[i]);
    }

    Vector3 v3 = create_random_vector3();

    for(size_t i = 0; i < 3; i++)
    {
        TEST_TRUE(v1[i] <= 1.0);
        TEST_TRUE(0.0 <= v1[i]);
    }

    Vector4 v4 = create_random_vector4();

    for(size_t i = 0; i < 4; i++)
    {
        TEST_TRUE(v1[i] <= 1.0);
        TEST_TRUE(0.0 <= v1[i]);
    }
}

void test_io()
{
    CHATTER;
    // write to stream
    {
        Vector_d<D> v = create_random_vector<D>();
        std::ofstream ofs("/dev/null");
        ofs << v;
    }

    // write to file, read back in
    {
//        Vector_d<D> v = create_random_vector<D>();
//        Vector_d<D> v2;
//        save(v, "temp.out");
//        load(v2, "temp.out");
//
//        TEST_EQUAL(v, v2);
    }
}

}

int main_()
{
    test_ctors();
    test_accessors();
    test_arithmetic();
    test_mutators();
    test_comparators();
    test_utility_functions();
    test_io();

    std::cout << "All tests passed." << std::endl;
    return 0;
}
