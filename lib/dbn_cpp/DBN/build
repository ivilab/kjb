#!/bin/csh -f

##################################################################################
#
# Build script 
# ============
#
# This file is generally called by "make". It can also be called directly. The
# main purpose is to normalize the make environment, and to implement some
# functionality that is difficult to do in a robust portable way for all flavors
# of make. 
#
# This file should be a copy of: 
#     ${SRC_DIR}/Make/scripts/build 
#
# The chief functionallity implemented here is to determine the value of
# SRC_DIR, followed by sourcing ${SRC_DIR}Make/scripts/build-2. 
#
# This is a copy of ${SRC_DIR}/Make/scripts/build so that source directories can
# be moved up and down in the src directory tree without additional manual
# operations. If we instead were to link to ${SRC_DIR}/Make/scripts/build, then
# changing the depth in the tree would require repairing the link by hand.  
#

##################################################################################
#
#                      Manipulating the build
#                      ----------------------
#
# Build options can be manipulated by changing environment variables, some of
# which are documented in this file. If you prefer, these can be set in the
# BUILD_ENV* files. One way to get started with this plan is to copy BUILD_ENV
# from ${SRC_DIR}/Make/ into this directory. 
#
# If any relavent BUILD_ENV* file exits, they will source now, before calling
# ${SRC_DIR}/Make/build-2 which does the heavy lifting in setting up calls to
# "make".
#
# Some choices here depend on knowing the machine, so we make sure this is known
# at this point. 
#
if ($?KJB_HAVE_MACHINE) then
    if ($?KJB_VERBOSE) then
        echo "" 
        echo "Script build is not sourcing ${SRC_DIR}Make/init_machine because KJB_HAVE_MACHINE is set"
        echo "    indicating that this is already been done."
    endif 
else 
    if ($?KJB_VERBOSE) then
        echo "" 
        echo "Script build is sourcing ${SRC_DIR}Make/init_machine"
    endif 

    source ${SRC_DIR}Make/init_machine
    if ($status) exit $status
endif 

set shared_build_env_dirs = "BUILD_ENV BUILD_ENV.${OS} BUILD_ENV.${MACHINE}"

if ("${OS2}" != "") then 
    set shared_build_env_dirs = "${shared_build_env_dirs} BUILD_ENV.${OS2} BUILD_ENV.${OS2}${CPU}"
endif 

set build_env_dirs = ""

foreach shared_build_env_dir (${shared_build_env_dirs}) 
    set build_env_dirs = "${build_env_dirs} ${shared_build_env_dir}"

    if ($?USER) then
        set build_env_dirs = "${build_env_dirs} ${shared_build_env_dir}.${USER}"
    endif 
end

echo build_env_dirs: ${build_env_dirs}

foreach build_env_dir (${build_env_dirs})
    if (-e "${build_env_dir}") then
        if ($?KJB_VERBOSE) then
            echo "Sourcing ${build_env_dir} in directory ${cwd}, which can overide shell settings."
        endif 
        source ${build_env_dir}
        if ($?KJB_VERBOSE) then
            echo "Back from ${build_env_dir} in directory ${cwd}."
        endif 
        if (${status}) exit ${status}
    else if ($?KJB_VERBOSE) then
        echo "No optional build file ${build_env_dir} in directory ${cwd}."
    endif 
end

##################################################################################

# Find out where we are in the source tree. In particular, we want to find a dir
# that has Make as a sub-dir and Make/init_compile as a file in that (to further
# check that we have the right one). 

set found = 0
set src_dir = ""

pushd `pwd` > /dev/null

while ("`pwd`" != "/")
    if (-e Make/init_compile) then
        set found = 1
        break
    endif 

    set src_dir = "../${src_dir}"

    cd ..
end

popd > /dev/null

if (${found}) then
    if ("${src_dir}" == "") then
        set src_dir = "./"
    endif 

    setenv SRC_DIR "${src_dir}"
else
   if ($?SRC_DIR == 0) then 
       setenv SRC_DIR "${HOME}/src/"
   endif 

   if (! -e ${SRC_DIR}/Make/init_compile) then
       # We cannot use P_STDERR here because we might not have defined it yet.
       bash -c 'echo " " >&2'
       bash -c 'echo "This directory does not seem to be below a src dirctory with KJB installed." >&2'
       bash -c 'echo "Nor does ${SRC_DIR}/Make/init_compile exist. " >&2'
       bash -c 'echo "Hence this build will fail." >&2'
       bash -c 'echo " " >&2'
       bash -c 'echo "Try setting SRC_DIR to a directory with Make as a sub-dir." >&2'
       bash -c 'echo " " >&2'

       exit 1 
   endif 
endif 

# if ($?KJB_ABSOLUTE_SRC_PATH) then
    pushd ${SRC_DIR} > /dev/null
    setenv SRC_DIR "${cwd}/"
    popd > /dev/null
# endif 

set multiple_boost = 0

if ($?BOOST_VERSION) then
    if ("${BOOST_VERSION}" != "") then
        # If BOOST_VERSION points to more then one option, we need to choose it
        # here. It would conceptually be simpler to wrap this into finding boost as
        # we do below, but since it is tied to the build string, cache dirs, etc.,
        # we need to peek at what bosts we may be able to find. We will assume that
        # the first headers 

        set multiple_boost = `echo ${BOOST_VERSION} | grep -c ':'`
    endif
endif

if (${multiple_boost}) then
    set boost_candidates = `echo ${BOOST_VERSION} | sed 's/:/ /g'`

    set found_workable_boost = 0 

    foreach boost_candidate (${boost_candidates}) 
        if (! $?KJB_QUIET ) then
            echo "Script build is trying boost_candidate ${boost_candidate} by setting BUILD_VERSION to that and sourcing build-2."
        endif 

        setenv BOOST_VERSION "${boost_candidate}"

        source ${SRC_DIR}Make/scripts/build-2 
        if (! ${status}) then
            set found_workable_boost = 1
            break
        endif 
    end

    if (! ${found_workable_boost}) then
        echo "Not able to find any of the boost candidates in (${boost_candidates})."
        exit 1
    endif 
else
    source ${SRC_DIR}Make/scripts/build-2 
    if (${status}) exit ${status}
endif 



