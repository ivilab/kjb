/* $Id$ */
/* =========================================================================== *
   |
   |  Copyright (c) 1994-2010 by Kobus Barnard (author)
   |
   |  Personal and educational use of this code is granted, provided that this
   |  header is kept intact, and that the authorship is not misrepresented, that
   |  its use is acknowledged in publications, and relevant papers are cited.
   |
   |  For other use contact the author (kobus AT cs DOT arizona DOT edu).
   |
   |  Please note that the code in this file has not necessarily been adequately
   |  tested. Naturally, there is no guarantee of performance, support, or fitness
   |  for any particular task. Nonetheless, I am interested in hearing about
   |  problems that you encounter.
   |
   |  Author:  Kyle Simek
 * =========================================================================== */

#include <string>
#include <fstream>
#include <iostream>
#include <ctime>

#include "i_cpp/i_image.h"
#include "edge_cpp/vanishing_point_detector.h"
#include "edge_cpp/features_manager.h"
#include "l/l_sys_rand.h"

using namespace std;

int main(int argc, char ** argv)
{
	using namespace kjb;

    string name;

	name.append(argv[1]);
	name.append("/");
	name.append(argv[2]);
	name.append(".jpg");


	string edges(argv[1]);
	edges.append("/edge_experiments/");
	string img_edges(edges);
	edges.append(argv[2]);
	edges.append("_edges.txt");
	img_edges.append("images/");
	img_edges.append(argv[2]);
	string edge_segs(img_edges);
	edge_segs.append("_segments.jpg");
	img_edges.append("_edges.jpg");


	Image img(name.c_str());
	Image img2 = img;
	Image img3 = img;

	try
	{
	Canny_edge_detector canny(1.0, 2.55, 2.04, 20, true); //2.35-2.04
	//Canny_edge_detector canny(0.9, 2.15, 1.5, 20, true); //2.35-2.04
	Edge_set * edge_set =  canny.detect_edges(img);
	edge_set->break_edges_at_corners(0.85, 7);
	edge_set->break_edges_at_corners(0.99, 60);
	//edge_set->break_edges_at_corners(0.99, 20);
	/*edge_set->break_edges_at_corners(0.99, 30);
	edge_set->break_edges_at_corners(0.99, 40);
	edge_set->break_edges_at_corners(0.99, 50);
	edge_set->break_edges_at_corners(0.99, 60);*/
	edge_set->remove_short_edges(15);
	Edge_segment_set * edge_segments = new Edge_segment_set(edge_set);
	//edge_segments->remove_non_straight_segments(*edge_set, 3.0);
	//edge_segments->remove_overlapping_segments(*edge_set);
	edge_segments->remove_frame_segments(img.get_num_rows(), img.get_num_cols(),*edge_set);
	edge_segments->randomly_color(img3);
	Edge_set * new_edges = edge_segments->convert_to_edge_set(img.get_num_rows(), img.get_num_cols());
	Image imgee = img;
	Image imggt = img;
	/*new_edges->get_edge(0).draw(imgee, 255,0,0);
	edge_set->get_edge(0).draw(imggt, 255, 0, 0);

	imgee.write("experiment.jpg");
	imggt.write("experimentgt.jpg");*/

	/*for(unsigned int k = 0; k <12; k++)
	{
	    std::cout << edge_set->get_edge(k).get_edge_point(k).get_dcol() << " " <<edge_set->get_edge(k).get_edge_point(k).get_drow() << std::endl;
	    std::cout << new_edges->get_edge(k).get_edge_point(k).get_dcol() << " " <<new_edges->get_edge(k).get_edge_point(k).get_drow() << std::endl;
	    std::cout << std::endl;
	}*/

    std::cout << "NOW write: " << edges << std::endl;
	new_edges->write(edges.c_str());
	new_edges->draw(img2, 255, 0, 0);
    img2.write(img_edges.c_str());
    std::cout << edge_segs << std::endl;
    img3.write(edge_segs.c_str());
    delete edge_set;
    delete edge_segments;
    delete new_edges;
	}
	catch(KJB_error e)
	{
		e.print(std::cout);
	}
	/*catch(Illegal_argument e2)
	{
		e2.print(std::cout);
	}*/


    return 0;
}

