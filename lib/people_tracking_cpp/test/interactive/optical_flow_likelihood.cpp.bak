/* =========================================================================== *
|
|  Copyright (c) 1994-2008 by Kobus Barnard (author).
|
|  Personal and educational use of this code is granted, provided that this
|  header is kept intact, and that the authorship is not misrepresented, that
|  its use is acknowledged in publications, and relevant papers are cited.
|
|  For other use contact the author (kobus AT cs DOT arizona DOT edu).
|
|  Please note that the code in this file has not necessarily been adequately
|  tested. Naturally, there is no guarantee of performance, support, or fitness
|  for any particular task. Nonetheless, I am interested in hearing about
|  problems that you encounter.
|
| Authors:
|     Ernesto Brau, Jinyan Guan
|
* =========================================================================== */

/* $Id: optical_flow_likelihood.cpp.bak 15947 2013-10-30 06:18:23Z ernesto $ */

#include <people_tracking_cpp/pt_optical_flow_likelihood.h>
#include <people_tracking_cpp/pt_visibility.h>
#include <people_tracking_cpp/pt_util.h>
#include <people_tracking_cpp/pt_complete_trajectory.h>
#include <people_tracking_cpp/pt_box_trajectory.h>
#include <flow_cpp/flow_feature_set.h>
#include <st_cpp/st_perspective_camera.h>
#include <m_cpp/m_vector.h>
#include <m_cpp/m_matrix.h>
#include <g_cpp/g_util.h>
#include <gr_cpp/gr_opengl.h>
#include <gr_cpp/gr_glut.h>
#include <gr_cpp/gr_plot.h>
#include <l_cpp/l_filesystem.h>
#include <l/l_sys_mal.h>
#include <detector_cpp/d_bbox.h>
#include <vector>
#include <algorithm>
#include <boost/lexical_cast.hpp>
#include <boost/bind.hpp>

using namespace std;
using namespace kjb;
using namespace kjb::pt;
using namespace kjb::opengl;

double img_width;
double img_height;

const double scale_x = 0.34990;
const double scale_y = 0.17581;
const double dx = 0.01;
const double dz = 0.01;
const double dw = 0.01;
const double dh = 0.01;
const double dg = 0.01;

size_t cur_frame;
size_t start_frame;
size_t end_frame;
int left_edge;
int right_edge;
int bot_edge;
int top_edge;
bool zoom;
bool compute_oflh;
double oflh;
bool enable_keys;
Trajectory traj;
Perspective_camera camera;

const vector<Flow_feature_set>* feature_sets_p;
const vector<Integral_flow>* x_flows_p;
const vector<Integral_flow>* y_flows_p;
const Optical_flow_likelihood* of_lh_p; 

Glut_plot_window* pwin_p;
Vector* its_p;
Vector* lhs_p;

/** @brief  Display scene. */
void display();

/** @brief  Reshape scene. */
void reshape(int, int);

/** @brief  Handle key input. */
void handle_key(unsigned char, int, int);

/** @brief  Adjust screen according to current frame and zoom. */
void adjust_screen();

/** @brief  Render a box. */
void draw_box(const Bbox&, bool infront = false);

/** @brief  Render an arrow from src to dest. */
void draw_arrow(const Vector& src, const Vector& dest);

/** @brief  Main -- all the magic happens here. */
int main(int argc, char** argv)
{
#ifdef TEST
    kjb_c::kjb_init();
    kjb_c::kjb_l_set("heap-checking", "off");
    kjb_c::kjb_l_set("initialization-checking", "off");
#endif

    string feat_dp;
    string trajs_dp;
    string cam_fp;
    string image_fp;

    if(argc == 4)
    {
        feat_dp = argv[1];
        trajs_dp = argv[2];
        cam_fp = trajs_dp + "/camera.txt";
        image_fp = argv[3];
    }
    else if(argc == 5)
    {
        feat_dp = argv[1];
        trajs_dp = argv[2];
        cam_fp = argv[3];
        image_fp = argv[4];
    }
    else
    {
        cout << "Usage: optical_flow_likelihood "
             << "FEAT-DIR TRAJS-DIR [ CAM-FILE ] IMG-FILE\n";
        return EXIT_FAILURE;
    }

    try
    {
        // read image to get size
        Image tmp_img(image_fp);
        img_width = tmp_img.get_num_cols();
        img_height = tmp_img.get_num_rows();

        // read OF features
        /*vector<string> of_fps = file_names_from_format(feat_dp + "/%05d.txt");
        vector<Flow_feature_set> feature_sets(of_fps.size());
        transform(
            of_fps.begin(),
            of_fps.end(),
            feature_sets.begin(),
            read_flow_features);

        // make likelihood object
        Optical_flow_likelihood of_likelihood(
            feature_sets, img_width, img_height,
            scale_x, scale_y, 2*scale_x, 2*scale_y);
            */
        vector<string> x_of_fps = 
            file_names_from_format(feat_dp + "/x_int_s4/%05d.txt");
        vector<string> y_of_fps = 
            file_names_from_format(feat_dp + "/y_int_s4/%05d.txt");

        vector<Integral_flow> flows_x;
        vector<Integral_flow> flows_y;
        KJB(ASSERT(x_of_fps.size() == y_of_fps.size()));
        size_t num_frames = x_of_fps.size();
        for(size_t i = 0; i < num_frames; i++)
        {
            flows_x.push_back(Integral_flow(x_of_fps[i]));
            flows_y.push_back(Integral_flow(y_of_fps[i]));
        }
        x_flows_p = &flows_x;
        y_flows_p = &flows_y;

        Optical_flow_likelihood of_likelihood(
            flows_x, flows_y, img_width, img_height,
            scale_x, scale_y, 2 * scale_x, 2 * scale_y);

        // read trajectories
        Trajectory_map trajs;
        trajs.parse(trajs_dp, "person");
        traj = trajs.begin()->second;
        start_frame = traj.start_time();
        end_frame = traj.end_time();
        //camera.read(cam_fp.c_str());
        load(camera, cam_fp);

        // set initial state
        zoom = false;
        adjust_screen();
        enable_keys = true;
        compute_oflh = true;
        cur_frame = start_frame;

        // plot variables
        Vector its;
        Vector lhs;
        its_p = &its;
        lhs_p = &lhs;

        // set global pointers
        //feature_sets_p = &feature_sets;
        of_lh_p = &of_likelihood; 

        // GL stuff
        Glut_window win(img_width, img_height);
        win.set_display_callback(display);
        win.set_reshape_callback(reshape);
        win.set_keyboard_callback(handle_key);

        Glut_plot_window pwin(600, 400, "likelihood");
        pwin_p = &pwin;
        pwin.add_plot(its_p, lhs_p);

        glEnable(GL_DEPTH_TEST);
        glutMainLoop();
    }
    catch(const kjb::Exception& ex)
    {
        ex.print_details();
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void display()
{
    // setup matrices
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(left_edge, right_edge, bot_edge, top_edge, -1.0, 10.0);
    glMatrixMode(GL_MODELVIEW);

    // clear stuff
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    // display flow features
    glColor3d(0.5, 0.5, 0.0);
    glLineWidth(1.0);
    /**const vector<Flow_feature_set>& feature_sets = *feature_sets_p;
    BOOST_FOREACH(const Feature_pair& fp, feature_sets[cur_frame - 1])
    {
        Vector src = fp.first;
        Vector dest = fp.second;
        standardize(src, img_width, img_height);
        standardize(dest, img_width, img_height);
        draw_arrow(src, dest);
    }
    */

    // display trajectory
    Box_trajectory btraj = get_body_box_trajectory(traj, camera); 
    vector<Bbox> boxes = btraj.get_values();
    glLineWidth(1.0);
    glColor3d(0.0, 0.0, 0.3);
    for_each(boxes.begin(), boxes.end(), boost::bind(draw_box, _1, false));

    // display current boxes
    const Bbox& cur_box = boxes[cur_frame - start_frame];
    const Bbox& next_box = boxes[cur_frame - start_frame + 1];
    glLineWidth(2.0);
    glColor3d(1.0, 0.0, 0.0);
    draw_box(cur_box, true);
    draw_box(next_box, true);
    draw_arrow(cur_box.get_center(), next_box.get_center());

    // display optical features
    glColor3d(1.0, 1.0, 0.0);
    glLineWidth(1.0);
    const vector<Integral_flow>& x_flows = *x_flows_p;
    const vector<Integral_flow>& y_flows = *y_flows_p;

    for(size_t i = 0; i < img_height; i = i + 4)
    {
        for(size_t j = 0; j < img_width; j = j + 4)
        {
            Bbox box(Vector((double)j, (double)i), 
                     Vector((double)j + 1.0, (double)i + 1.0));
            double dx = x_flows[cur_frame - 1].flow_sum(box);
            double dy = y_flows[cur_frame - 1].flow_sum(box);
            Vector src((double)j, (double(i)));
            Vector dest(src[0] + dx, src[1] + dy);
            standardize(src, img_width, img_height);
            standardize(dest, img_width, img_height);
            draw_arrow(src, dest);

        }
    }
    
    // display likelihood
    vector<Visibility> viss(boxes.size());
    BOOST_FOREACH(Visibility& vis, viss)
    {
        vis.visible = 1.0;
    }

    if(compute_oflh)
    {
        oflh = of_lh_p->at_trajectory(boxes, viss, start_frame);
        its_p->push_back(its_p->empty() ? 1 : its_p->back() + 1);
        lhs_p->push_back(oflh);
        pwin_p->update_bounds();
        compute_oflh = false;
    }

    string ol_str = "of(x) = " + boost::lexical_cast<string>(oflh);
    glColor3d(1.0, 1.0, 1.0);
    bitmap_string(ol_str, left_edge + 2, bot_edge + 3);

    glutSwapBuffers();
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void reshape(int w, int h)
{
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void handle_key(unsigned char key, int, int)
{
    if(!enable_keys) return;

    Vector3& pos = (traj[cur_frame - 1]->value).position;
    switch(key)
    {
        case 'n': 
        {
            cur_frame++;
            if(cur_frame == end_frame)
            {
                cur_frame = start_frame;
            }

            its_p->clear();
            lhs_p->clear();
            adjust_screen();
            break;
        }

        case 'p': 
        {
            cur_frame--;
            if(cur_frame == start_frame - 1)
            {
                cur_frame = end_frame - 1;
            }

            its_p->clear();
            lhs_p->clear();
            adjust_screen();
            break;
        }

        case 'l':
        {
            pos[0] += dx;
            compute_oflh = true;
            break;
        }
        case 'h':
        {
            pos[0] -= dx;
            compute_oflh = true;
            break;
        }

        case 'j':
        {
            pos[2] += dz;
            compute_oflh = true;
            break;
        }
        case 'k':
        {
            pos[2] -= dz;
            compute_oflh = true;
            break;
        }

        case 'L':
        {
            pos[0] += 100*dx;
            compute_oflh = true;
            break;
        }
        case 'H':
        {
            pos[0] -= 100*dx;
            compute_oflh = true;
            break;
        }

        case 'J':
        {
            pos[2] += 100*dz;
            compute_oflh = true;
            break;
        }
        case 'K':
        {
            pos[2] -= 100*dz;
            compute_oflh = true;
            break;
        }

        case 'W': 
        {
            traj.width += dw;
            compute_oflh = true;
            break;
        }

        case 'w': 
        {
            traj.width -= dw;
            compute_oflh = true;
            break;
        }

        case 'T': 
        {
            traj.height += dh;
            compute_oflh = true;
            break;
        }

        case 't': 
        {
            traj.height -= dh;
            compute_oflh = true;
            break;
        }

        case 'G': 
        {
            traj.girth += dg;
            compute_oflh = true;
            break;
        }

        case 'g': 
        {
            traj.girth -= dg;
            compute_oflh = true;
            break;
        }

        case 'z': 
        {
            zoom = !zoom;
            adjust_screen();
            break;
        }

        case 'c': 
        {
            its_p->clear();
            lhs_p->clear();
            break;
        }

        case 'q':
        case 'Q':
        {
            exit(EXIT_SUCCESS);
        }
    }

    glutPostRedisplay();
    pwin_p->redisplay();
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void adjust_screen()
{
    if(zoom)
    {
        Bbox cur_box = project_cstate(traj[cur_frame - 1]->value, camera,
                                      traj.height, traj.width, traj.girth);
        Bbox next_box = project_cstate(traj[cur_frame]->value, camera,
                                       traj.height, traj.width, traj.girth);

        left_edge = std::min(cur_box.get_left(), next_box.get_left()) - 30;
        right_edge = std::max(cur_box.get_right(), next_box.get_right()) + 30;
        bot_edge = std::min(cur_box.get_bottom(), next_box.get_bottom()) - 20;
        top_edge = std::max(cur_box.get_top(), next_box.get_top()) + 20;
    }
    else
    {
        left_edge = -img_width / 2.0;
        right_edge = img_width / 2.0;
        bot_edge = -img_height / 2.0;
        top_edge = img_height / 2.0;
    }
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void draw_box(const Bbox& box, bool infront)
{
    double z = infront ? 0.5 : -0.5;
    glBegin(GL_LINE_LOOP);
    glVertex3d(box.get_left(), box.get_top(), z);
    glVertex3d(box.get_right(), box.get_top(), z);
    glVertex3d(box.get_right(), box.get_bottom(), z);
    glVertex3d(box.get_left(), box.get_bottom(), z);
    glEnd();
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void draw_arrow(const Vector& src, const Vector& dest)
{
    Vector dir(dest - src);
    double mag = dir.magnitude();

    Vector l(0.85 * mag, -0.1 * mag);
    Vector r(0.85 * mag, 0.1 * mag);

    double angle = acos(dir[0] / mag);
    if(dir[1] < 0)
    {
        angle = -angle;
    }

    Matrix R = geometry::get_rotation_matrix(angle);

    glBegin(GL_LINES);
        // shaft of arrow
        glVertex(src);
        glVertex(dest);

        // left arrow half
        glVertex(dest);
        glVertex(src + R*l);

        // right arrow half
        glVertex(dest);
        glVertex(src + R*r);
    glEnd();
}

