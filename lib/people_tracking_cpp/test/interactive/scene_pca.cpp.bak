/* =========================================================================== *
   |
   |  Copyright (c) 1994-2011 by Kobus Barnard (author)
   |
   |  Personal and educational use of this code is granted, provided that this
   |  header is kept intact, and that the authorship is not misrepresented, that
   |  its use is acknowledged in publications, and relevant papers are cited.
   |
   |  For other use contact the author (kobus AT cs DOT arizona DOT edu).
   |
   |  Please note that the code in this file has not necessarily been adequately
   |  tested. Naturally, there is no guarantee of performance, support, or fitness
   |  for any particular task. Nonetheless, I am interested in hearing about
   |  problems that you encounter.
   |
   |  Author:  Ernesto Brau, Zewei Jiang, Jinyan Guan
 * =========================================================================== */

/* $Id$ */

#include <people_tracking_cpp/pt_association.h>
#include <people_tracking_cpp/pt_scene.h>
#include <people_tracking_cpp/pt_target.h>
#include <people_tracking_cpp/pt_data.h>
#include <people_tracking_cpp/pt_scene_adapter.h>
#include <st_cpp/st_perspective_camera.h>
#include <l_cpp/l_word_list.h>
#include <l_cpp/l_exception.h>
#include <l_cpp/l_filesystem.h>
#include <l/l_sys_io.h>
#include <vector>
#include <string>
#include "pca.h"
#include <boost/format.hpp>

using namespace std;
using namespace kjb;
using namespace kjb::pt;

int main(int argc, char** argv)
{
    try
    {
        //// READ SCENES AND BOXES
        // output of hmc.cpp
        const string indir = "output/hmc_cpp";
        const string scenesdir = indir + "/samples";
        const string datadir = indir + "/data";

        // values should match those of hmc.cpp
        const double img_width = 1200;
        const double img_height = 800;

        // read data
        Box_data data(img_width, img_height);
        data.read(file_names_from_format(datadir + "/%05d.txt"));

        // scene dirs
        Word_list scene_dps(scenesdir + "/*", kjb_c::is_directory);
        const size_t num_scenes = scene_dps.size();
        IFT(num_scenes > 0, IO_error, "Input directory is empty.");

        // empty target must match hmc.cpp
        const double gp_scale = 150.0;
        const double gp_svar = 100.0;

        // read scenes
        vector<Scene> scenes(
                        num_scenes,
                        Scene(Ascn(data), Perspective_camera(), 0.0, 0.0, 0.0));
        for(size_t i = 0; i < num_scenes; i++)
        {
            read_scene(scenes[i], scene_dps[i]);
        }

        //// DO PCA ANALYSIS
        ////// Zewei -- scenes should now contain all the scenes in the
        ////// right directory. From here, you know what to do with them.
        ////// Good luck :-)

	// CONVERT SCENE TO MATRIX
        Scene& fs = scenes.front();
        Scene_adapter another_adapter(&fs, false, false);
	    size_t num_samples = 60;
        size_t scene_dim = another_adapter.size(&fs);
        Matrix data_mat(num_samples,scene_dim);
        for(int z=0;z<num_samples;z++)
        {
            Scene& another_fs = scenes[z];
            Scene_adapter adapter(&another_fs, false, false);
            for(size_t i = 0; i < scene_dim; i++)
            {
                data_mat(z,i) = adapter.get(&another_fs, i);
            }
        }
        //do the PCA stuff
        PCA pca(data_mat);
        //get the reduced-dimension data, you need to pass in the dimension, it will return the most important dimensions
        //cout<<pca.get_data_after_PCA(4)<<endl;
        vector<Vector> many_vectors(60);
        for(int k=-30;k<30;k++)
        {
            many_vectors[k+30] = pca.get_scence_with_one_dimension_value(k);
        }
        // WRITE SCENES
        // assuming you have a vector of scenes called pca_scenes, where you
        // saved the scenes resulting from moving just one dimension, etc.,
        // all that stuff we talked about (I'm just declaring it here so
        // that this compiles, but it should exist from the previous
        // part
        
        //vector<Scene> pca_scenes;

        string outdir = "output/scene_pca_cpp/";
        for(size_t i = 0; i < num_scenes; i++)
        {
            Scene_adapter adapter(&(scenes[i]),false,false);
            for(size_t m=0;m<scene_dim;m++)
            {
                adapter.set(&(scenes[i]),m,(many_vectors[i])(m));
            }
            // you can change the naming scheme of the scene directories;
            // this is just an example
            string sd = boost::str(boost::format("%s/%05d") % outdir % (i + 1));
            write_scene(scenes[i], sd);
        }

    }
    catch(const kjb::Exception& ex)
    {
        ex.print_details();
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}

