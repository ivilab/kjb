/* =========================================================================== *
   |
   |  Copyright (c) 1994-2011 by Kobus Barnard (author)
   |
   |  Personal and educational use of this code is granted, provided that this
   |  header is kept intact, and that the authorship is not misrepresented, that
   |  its use is acknowledged in publications, and relevant papers are cited.
   |
   |  For other use contact the author (kobus AT cs DOT arizona DOT edu).
   |
   |  Please note that the code in this file has not necessarily been adequately
   |  tested. Naturally, there is no guarantee of performance, support, or fitness
   |  for any particular task. Nonetheless, I am interested in hearing about
   |  problems that you encounter.
   |
   |  Author:  Ernesto Brau
 * =========================================================================== */

#include <stracking_cpp/stracking_mcmcda_proposer.h>
#include <people_tracking_cpp/pt_association.h>
#include <people_tracking_cpp/pt_detection_box.h>
#include <people_tracking_cpp/pt_data.h>
#include <people_tracking_cpp/pt_target.h>
#include <gr_cpp/gr_opengl.h>
#include <gr_cpp/gr_glut.h>
#include <prob_cpp/prob_distribution.h>
#include <prob_cpp/prob_sample.h>
#include <l_cpp/l_filesystem.h>
#include <detector_cpp/d_bbox.h>
#include <string>
#include <exception>
#include <limits>
#include <boost/program_options.hpp>
#include <boost/foreach.hpp>
#include <boost/bind.hpp>

using namespace kjb;
using namespace kjb::pt;
using namespace kjb::opengl;
using namespace kjb::stracking;
using namespace std;
using namespace boost;

// pointers to stuff
const Perspective_camera* cam_p;
const Mcmcda_proposer<Target>* proposer_p;
const Glut_window* wnd_p;
Ascn::const_iterator cur_target_p;
Ascn* w_p;
Ascn* wp_p;

// declarations
void reshape_window(int w, int h);
void display_scene();
void process_key(unsigned char key, int x, int y);
void draw_box(const Bbox&);
void add_boxes_from_line
(
    Box_data& data,
    const pair<Vector, Vector>& line,
    double w,
    double h
);
Vector get_dbox_center(const Detection_box& dbox);
Detection_box average_box_centers(const vector<const Detection_box*>& boxes);
std::vector<double> feature_prob
(
    const Target*, 
    int t1, 
    const Detection_box* candidate,
    int t2, 
    size_t wsz
);

void process_options(int argc, char** argv);

// options
double img_width;
double img_height;
int d_bar;
int b_bar;
double v_bar;
double noise_variance;
double gamm;

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

int main(int argc, char** argv)
{
    try
    {
        process_options(argc, argv);

        // generate synthetic data
        vector<pair<Vector, Vector> > lines(3);
        lines[0].first.set(-img_width/2 + 100, -img_height/2 + 200);
        lines[0].second.set(img_width/2 - 100, img_height/2 - 200);
        lines[1].first.set(img_width/2 - 100, -img_height/2 + 200);
        lines[1].second.set(-img_width/2 + 100, img_height/2 - 200);
        lines[2].first.set(0.0, -50.0);
        lines[2].second.set(0.0, -50.0);

        Box_data data(img_width, img_height, 1.0);
        data.resize(300);
        add_boxes_from_line(data, lines[0], 120, 250);
        add_boxes_from_line(data, lines[1], 90, 300);
        add_boxes_from_line(data, lines[2], 150, 400);

        // create proposer
        Mcmcda_proposer<Target> proposer(
            Categorical_distribution<size_t>(
                MCMCDA_BIRTH, MCMCDA_NUM_MOVES - 1, 1),
            v_bar,
            d_bar,
            b_bar,
            gamm,
            bind(get_dbox_center, _1),
            average_box_centers,
            feature_prob,
            noise_variance,
            Target(1.7, 0.4, 0.3, data.size()));

        // create GL environment
        Glut_window wnd(img_width, img_height, "MCMCDA proposer (advanced)");
        wnd.set_reshape_callback(reshape_window);
        wnd.set_display_callback(display_scene);
        wnd.set_keyboard_callback(process_key);

        // initialize stuff
        Ascn w(data);
        cur_target_p = w.end();
        Ascn wp = w;

        // global pointers
        proposer_p = &proposer;
        wnd_p = &wnd;
        w_p = &w;
        wp_p = &wp;

        glutMainLoop();
    }
    catch(const std::exception& ex)
    {
        cout << ex.what() << endl;
        return EXIT_FAILURE;
    }
    catch(const Exception& kex)
    {
        kex.print_details();
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void reshape_window(int w, int h)
{
    glViewport(0, 0, (GLsizei)w, (GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-img_width / 2.0, img_width / 2.0,
            -img_height / 2.0, img_height / 2.0,
            -1.0, 10.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void display_scene()
{
    // clear stuff
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    const Ascn& w = *w_p;

    // display boxes
    glColor3d(0.2, 0.2, 0.2);
    glLineWidth(1.0);
    for(size_t i = 0; i < w.get_data().size(); i++)
    {
        BOOST_FOREACH(const Detection_box& box, w.get_data()[i])
        {
            draw_box(box.bbox);
        }
    }

    Vector active_box_col = Vector().set(1.0, 0.0, 0.0);
    Vector inactive_col = Vector().set(0.0, 0.4, 0.0);
    for(Ascn::const_iterator tg_p = w.begin();
                                            tg_p != w.end();
                                            tg_p++)
    {
        glColor(tg_p == cur_target_p ? active_box_col : inactive_col);
        glLineWidth(2.0);
        BOOST_FOREACH(const Target::value_type& pr, *tg_p)
        {
            draw_box(pr.second->bbox);
        }
    }

    if(cur_target_p != w.end())
    {
    }
    else
    {
        cout << "No tracks...\n\n";
    }

    glutSwapBuffers();
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void process_key(unsigned char key, int /*x*/, int /*y*/)
{
    Ascn& w = *w_p;
    Ascn& wp = *wp_p;
    const Mcmcda_proposer<Target>& proposer = *proposer_p;
    double fwd, rev;
    bool true_move = true;

    switch(key)
    {
        case 'b':
        {
            fwd = proposer.propose_birth(w, wp);
            if(fwd == -numeric_limits<double>::max())
            {
                break;
            }

            rev = proposer.p_death(wp, w);
            if(rev == -numeric_limits<double>::max())
            {
                break;
            }

            fwd += proposer.move_log_pdf(MCMCDA_BIRTH, w);
            rev += proposer.move_log_pdf(MCMCDA_DEATH, wp);

            break;
        }

        case 'd':
        {
            fwd = proposer.propose_death(w, wp);
            if(fwd == -numeric_limits<double>::max())
            {
                break;
            }

            rev = proposer.p_birth(wp, w);
            if(rev == -numeric_limits<double>::max())
            {
                break;
            }

            fwd += proposer.move_log_pdf(MCMCDA_DEATH, w);
            rev += proposer.move_log_pdf(MCMCDA_BIRTH, wp);

            break;
        }

        case 'e':
        {
            fwd = proposer.propose_extension(w, wp);
            if(fwd == -numeric_limits<double>::max())
            {
                break;
            }

            rev = proposer.p_reduction(wp, w);
            if(rev == -numeric_limits<double>::max())
            {
                break;
            }

            fwd += proposer.move_log_pdf(MCMCDA_EXTENSION, w);
            rev += proposer.move_log_pdf(MCMCDA_REDUCTION, wp);

            break;
        }

        case 'r':
        {
            fwd = proposer.propose_reduction(w, wp);
            if(fwd == -numeric_limits<double>::max())
            {
                break;
            }

            rev = proposer.p_extension(wp, w);
            if(rev == -numeric_limits<double>::max())
            {
                break;
            }

            fwd += proposer.move_log_pdf(MCMCDA_REDUCTION, w);
            rev += proposer.move_log_pdf(MCMCDA_EXTENSION, wp);

            break;
        }

        case 'w':
        {
            fwd = proposer.propose_switch(w, wp);
            if(fwd == -numeric_limits<double>::max())
            {
                break;
            }

            fwd += proposer.move_log_pdf(MCMCDA_SWITCH, w);
            rev = fwd;

            break;
        }

        case 'k':
        {
            fwd = proposer.propose_secretion(w, wp);
            if(fwd == -numeric_limits<double>::max())
            {
                break;
            }

            rev = proposer.p_absorption(wp, w);
            if(rev == -numeric_limits<double>::max())
            {
                break;
            }

            fwd += proposer.move_log_pdf(MCMCDA_SECRETION, w);
            rev += proposer.move_log_pdf(MCMCDA_ABSORPTION, wp);

            break;
        }

        case 'p':
        {
            fwd = proposer.propose_absorption(w, wp);
            if(fwd == -numeric_limits<double>::max())
            {
                break;
            }

            rev = proposer.p_secretion(wp, w);
            if(rev == -numeric_limits<double>::max())
            {
                break;
            }

            fwd += proposer.move_log_pdf(MCMCDA_ABSORPTION, w);
            rev += proposer.move_log_pdf(MCMCDA_SECRETION, wp);

            break;
        }

        case 'h':
        {
            true_move = false;

            if(w.empty())
            {
                break;
            }

            cur_target_p++;
            if(cur_target_p == w.end())
            {
                cur_target_p = w.begin();
            }

            break;
        }

        case 'l':
        {
            true_move = false;

            if(w.empty())
            {
                break;
            }

            if(cur_target_p == w.begin())
            {
                cur_target_p = w.end();
            }

            cur_target_p--;

            break;
        }

        case 'z':
        {
            true_move = false;
            using std::swap;
            swap(w, wp);
            cout << "Rejected!\n\n";
            cur_target_p = w.empty() ? w.end() : w.begin();
            break;
        }

        case 'q':
        {
            cout << "Bye..." << endl;
            exit(EXIT_SUCCESS);
        }

        default:
        {
            return;
        }
    }

    if(true_move)
    {
        if(fwd == -numeric_limits<double>::max()
                || rev == -numeric_limits<double>::max())
        {
            cout << "    proposal failed; probability is 0.\n\n";
        }
        else
        {
            cout << "    success!\n";
            cout << "    fwd prob is " << fwd << "\n";
            cout << "    rev prob is " << rev << "\n";

            using std::swap;
            swap(w, wp);

            if(w.empty())
            {
                cur_target_p = w.end();
            }
        }
    }

    wnd_p->redisplay();
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void draw_box(const Bbox& box)
{
    glBegin(GL_LINE_LOOP);
    glVertex2d(box.get_left(), box.get_top());
    glVertex2d(box.get_right(), box.get_top());
    glVertex2d(box.get_right(), box.get_bottom());
    glVertex2d(box.get_left(), box.get_bottom());
    glEnd();
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void add_boxes_from_line
(
    Box_data& data,
    const pair<Vector, Vector>& line,
    double w,
    double h
)
{
    const size_t nf = data.size();
    const size_t num_boxes = 2;
    const Vector& s = line.first;
    const Vector& e = line.second;
    Normal_distribution N(0.0, 1.0);

    Vector l = e - s;
    double inc = l.magnitude() / nf;
    l.normalize();

    for(size_t i = 0; i < nf; i++)
    {
        for(size_t j = 1; j <= num_boxes; j++)
        {
            Vector c = s + l*inc*i;
            c += Vector(sample(N), sample(N));
            Bbox box(c, w, h);
            data[i].insert(Detection_box(box, 0.0, "synth"));
        }
    }
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

Vector get_dbox_center(const Detection_box& dbox)
{
    return dbox.bbox.get_bottom_center();
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

Detection_box average_box_centers(const vector<const Detection_box*>& boxes)
{
    Vector avg(0.0, 0.0);
    double avg_w = 0.0;
    double avg_h = 0.0;
    size_t num_boxes = boxes.size();
    for(size_t i = 0; i < num_boxes; i++)
    {
        avg += boxes[i]->bbox.get_bottom_center();
        avg_w += boxes[i]->bbox.get_width();
        avg_h += boxes[i]->bbox.get_height();
    }

    Detection_box res = *boxes[0];
    res.bbox.set_center(avg / num_boxes);
    res.bbox.set_width(avg_w / num_boxes);
    res.bbox.set_height(avg_h / num_boxes);
    res.bbox.set_centre_y(res.bbox.get_centre_y() + res.bbox.get_height()/2.0);

    return res;
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void process_options(int argc, char** argv)
{
    namespace bpo = program_options;

    bpo::options_description cmdline_options("General options");
    bpo::variables_map vm;

    try
    {
        // All options
        cmdline_options.add_options()
            ("help,h", "produce help message")
            ("width", bpo::value<double>(&img_width)->default_value(1280),
                      "width of the image (and GL window)")
            ("height", bpo::value<double>(&img_height)->default_value(720),
                      "height of the image (and GL window)")
            ("v-bar", bpo::value<double>(&v_bar)->default_value(5.0),
                      "maximum velocity of tracks")
            ("d-bar", bpo::value<int>(&d_bar)->default_value(30),
                      "maximum skipped frames of a track")
            ("b-bar", bpo::value<int>(&b_bar)->default_value(30),
                      "maximum skipped frames of a track")
            ("noise-variance",
                bpo::value<double>(&noise_variance)->default_value(400.0),
                "noise variance for detection boxes")
            ("gamma", bpo::value<double>(&gamm)->default_value(0.1),
                      "probability of halting growing a proposed track");

        bpo::store(bpo::command_line_parser(argc, argv)
                   .options(cmdline_options).run(), vm);

        if(vm.count("help"))
        {
            cout << "Usage: mcmcda_proposer OPTIONS\n"
                 << "Manually run MCMCDA moves."
                 << cmdline_options << "\n"
                 << "For questions or complaints see Ernesto." << endl;

            exit(EXIT_SUCCESS);
        }

        bpo::notify(vm);
    }
    catch(const bpo::error& err)
    {
        throw Exception(err.what());
    }    
    catch(const std::exception& ex)
    {
        throw ex;
    }    
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

std::vector<double> feature_prob
(
    const Target*, 
    int t1, 
    const Detection_box* candidate,
    int t2, 
    size_t wsz
)
{
    std::vector<double> f_p;
    return f_p;
}


