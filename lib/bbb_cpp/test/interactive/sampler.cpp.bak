/* =========================================================================== *
   |
   |  Copyright (c) 1994-2011 by Kobus Barnard (author)
   |
   |  Personal and educational use of this code is granted, provided that this
   |  header is kept intact, and that the authorship is not misrepresented, that
   |  its use is acknowledged in publications, and relevant papers are cited.
   |
   |  For other use contact the author (kobus AT cs DOT arizona DOT edu).
   |
   |  Please note that the code in this file has not necessarily been adequately
   |  tested. Naturally, there is no guarantee of performance, support, or fitness
   |  for any particular task. Nonetheless, I am interested in hearing about
   |  problems that you encounter.
   |
   |  Author:  Ernesto Brau
 * =========================================================================== */

/* $Id$ */

#include <bbb_cpp/bbb_activity_library.h>
#include <bbb_cpp/bbb_description.h>
#include <bbb_cpp/bbb_intentional_activity.h>
#include <bbb_cpp/bbb_description_prior.h>
#include <bbb_cpp/bbb_activity_sequence_prior.h>
#include <bbb_cpp/bbb_association.h>
#include <prob_cpp/prob_distribution.h>
#include <prob_cpp/prob_sample.h>
#include <m_cpp/m_vector.h>
#include <l_cpp/l_functors.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <iterator>
#include <functional>
#include <boost/bind.hpp>
#include <boost/ref.hpp>
#include <ergo/mh.h>
#include <ergo/record.h>

using namespace kjb;
using namespace std;
using namespace boost;

/** @brief  Main function (duh!). */
int main(int argc, char** argv)
{
    Data data;
    read(data, "data.csv");

    //// CREATE LIBRARY
    Activity_library alib;
    create_default_library(alib);

    //// CREATE PRIOR
    // create global trajectory set
    Traj_set traj_set;
    generate_n(inserter(traj_set, traj_set.begin()), N, Increment<size_t>(0));

    // make prior distribution
    Description_prior prior("FFA", traj_set, alib, as_prior);

    //// CREATE LIKELIHOOD
    double gp_noise = 0.01;
    Likelihood likelihood(traj_set, data, gp_noise);

    //// CREATE POSTERIOR
    Posterior posterior = bind(
                            plus<double>(),
                            bind(cref(prior), _1),
                            bind(cref(likelihood), _1));

    //// SAMPLER CODE
    // create steps
    Propose_description propose(data);
    mh_step<Description> step(posterior, propose);

    // initial state
    Description description = naive_description(data, alib);
    double lp = posterior(description)

    // recorder
    Description best_description = description;
    step.add_recorder(make_best_sample_recorder(&best_description).replace());

    // run sampler
    const size_t num_iterations = 500;
    for(size_t i = 1; i <= num_iterations; i++)
    {
        step(description, lp);
    }

    // REPORT RESULTS
    // for now, simply write best one
    cout << best_description << endl;

    return EXIT_SUCCESS;
}

