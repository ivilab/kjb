/**
 * @file
 * @brief definition for class template StochasticPriorityQueue (take 3)
 * @author Andrew Predoehl
 */
/*
 * $Id: stoprique.h.DRAFT 20056 2015-11-10 06:28:02Z predoehl $
 */

#ifndef STOPRIQUE3_H_INCLUDED_PREDOEHL_UOFARIZONAVISION
#define STOPRIQUE3_H_INCLUDED_PREDOEHL_UOFARIZONAVISION 1

#include <l/l_sys_lib.h>
#include <l/l_sys_rand.h>
#include <l_cpp/l_util.h>

#include <qd_cpp/redblack.h>

namespace kjb
{
namespace qd
{

/**
 * @brief a priority queue implementing a stochastic extract-near-min method
 *
 * The idea is to use this in an unsuspecting implementation of Dijkstra's
 * algorithm, but the extract_min() method, via proxy Dijkstra_extraction(),
 * shall not always really return (a locator to) the min.  Instead it returns
 * (a locator to) an element at or near the min, drawn according to an
 * empirical discrete probability distribution.
 *
 * This empirical discrete probability distribution translates distances in the
 * graph (called "energy," since it represents the energy required to travel
 * all that distance) into a discrete non-normalized probability which I call
 * a "weight," since the the stochastic draw is not uniform but is weighted,
 * i.e., it prefers an element with high weight to an element with low weight.
 * The actual frequentist probability of an element is equal to its weight
 * divided by the sum of all weights of elements.
 *
 * This data structure also supports the idea of zero-energy and
 * infinite-energy elements.
 * These elements are stored in
 * separate trees from the tree that stores positive, finite-energy elements.
 * Infinite-energy elements are the vertices in Dijkstra's algorithm in the
 * time period of the computation before their distance is "relaxed."
 * Zero-energy elements include the source vertex and any vertex that can be
 * reached from the source by traversing zero-distance edges.  Such elements
 * are deterministically drawn from the queue (in undefined order) before any
 * positive-weight elements.  In a graph with edges that are always positive,
 * the only zero-energy element is the source vertex, on the very first
 * iteration.
 *
 * @section spqin Implementation notes
 * @subsection spqewx Transform of energy to probability weight
 *
 * The BIG QUESTION is how to transform positive energy into probability
 * weight \f$ w(v) \f$ for vertex \f$ v \f$.
 * If you want behavior similar to a deterministic queue, it should be
 * something like an inverse relationship:  if vertices \f$ u,v \f$ have
 * energies \f$ energy(u) > energy(v) \f$,
 * then it should be true that \f$ w(u) \le w(v) \f$, i.e.,
 * \f$ v \f$ should have a probability weight no less than that of
 * \f$ u \f$, so it should at least as likely to be drawn.
 * Empirically there are three obvious choices:
 * - an inverse power law: \f$ w(v) = energy(v)^{\alpha} \f$ for
 *      \f$ \alpha < 0 \f$, e.g., -1.5.
 * - an exponential decay:  \f$ w(v) = \alpha ^{-energy(v)} \f$ for
 *      \f$ \alpha > 1 \f$, e.g., 1.01.
 * - a uniform distribution: \f$ w(v) = 1 \f$.  I have not tried this but it
 *      is feasible.  An earlier implementation required that
 *      the transform be inverible, but that constraint is gone now.
 *
 * In implementation, alpha (for either model) is expressed as a rational
 * number with numerator POWERLAW_NUM and denominator POWERLAW_DEN.
 * Another alternative is to just use a uniform distribution, but that is
 * going to look rather different from a shortest path.
 *
 * Intuition suggests that the polynomial decay will become too uniform
 * for distances far from the source, where the enqueued elements are all
 * a large and almost uniform from the source and the differences among
 * weights is small in comparison.  Intuition also suggests that
 * exponential decay could be just too aggressive, period.
 *
 * Experimentally I've tried power-law decay with alphas of -1.5 and -10.
 * The former has worked alright, whereas the latter has somehow caused
 * strange single-source-short-path trees to form:  the destination node
 * apparently wasn't drawn until much later than it should have been, and
 * the resulting path is pathologically (lol) long.  So I would avoid
 * large values of \f$ |\alpha| \f$.
 *
 * Experimentally, with exponential decay a modest alpha of 1.01
 * (1% deflation) has worked similarly to the OK results just mentioned,
 * but alpha of 1.10 (or, 10% deflation) has caused pathological results
 * qualitatively like what I described in the previous paragraph.
 *
 * I have also considered the idea of adding to the discrete distribution
 * an extra spike of 0.5 to the min-energy/max-weight element, so that
 * the shortest path has a higher density (although the probability of
 * getting the truly shortest path in a big graph is still exponentially
 * tiny).  See method Dijkstra_extraction().  The extra spike does not
 * need to be 0.5 of course, but I don't know the best value, but (again
 * going from intuition) that should stabilize the output, i.e., reduce
 * pathlogical behavior.  We might even discover that the best behavior is
 * to FORGET about a fancy energy-to-weight function and just go with
 * a uniform probability distribution plus a spike at minimum energy.
 * That would have an attractive simplicity.
 *
 * Earlier implementations of this class had to deal with zero energy
 * inputs nicely, but that is no longer the case now that we support an
 * "alwaysland" subqueue.  Also, an earlier implementation required that
 * the energy2weight function be invertible, but that is no longer a
 * requirement, although the function might still happen to be invertible.
 *
 * @subsection spqsubqs Sub-queues
 *
 * This queue comprises three sub-queues.  When you do a Dijkstra_extract
 * operation, we always draw from "alwaysland," unless it is empty.  It
 * hold elements of zero energy.  All elements are equally worthy to be
 * drawn.  If alwaysland is empty, we draw from "sometimesland," which
 * holds elements of positive energy.  The choice is stochastic and depends
 * on the energy of the element, preferring smaller energies.  We never
 * draw elements from "neverland," which contains elements that have
 * infinite energy.  Elements can be rekeyed and consequently move from one
 * sub-queue to another.
 */
template< typename SATELLITE_TYPE, int POWERLAW_NUM, int POWERLAW_DEN >
class StochasticPriorityQueue
:   public DijkstraPriorityQueue<
        SATELLITE_TYPE, 
        Redblack_subtree_sum<SATELLITE_TYPE, float >::iterator 
    >
{
    typedef typename Redblack_subtree_sum< SATELLITE_TYPE, float > RbTree;

public:
    /// @brief alias of satellite type
    typedef SATELLITE_TYPE Sat_tp;

    typedef typename RbTree::iterator iterator;

    /// @brief alias of key type
    typedef typename DijkstraPriorityQueue< SATELLITE_TYPE, iterator >::Key_tp Key_tp;

    /**
     * @brief parameter used in the energy ~ probability weight relation
     * @return quotient representing the statically-chosen rational number.
     *
     * If you are using the polynomial decay for the energy~probability xform,
     * value here should be negative (we need increasing energy to have
     * decreasing probability of being drawn from the queue).
     * The magnitude of the value is related to the spread/diffusion of the
     * trajectories.  E.g., -1 will cause trajectories to spread "widely,"
     * and -20 will cause the trajectories to spread much less.
     * As the value heads towards negative infinity, this data structure will
     * act increasingly like a deterministic priority queue.
     * Large values cause problems.
     * Example:  POWERLAW_NUM=-3, POWERLAW_DEN=2 gives decay of order
     * \f$ energy(v)^{-1.5} \f$,
     * which is reasonable.
     *
     * If you are using exponential decay, the value here should be positive
     * and a touch above unity, like 1.01
     * (i.e., POWERLAW_NUM=101, POWERLAW_DEN=100).
     */
    inline static Key_tp power_law()
    {
        return Key_tp( POWERLAW_NUM ) / Key_tp( POWERLAW_DEN );
    }

private:

    /// structure we store in our subqueues
    struct SatLoc {
        Sat_tp dat;      ///< the user's precious satellite data in our charge
        iterator spqloc; ///< pointer to this record
        /// I can initialize those fields for you
        SatLoc( const Sat_tp& sat = Sat_tp() ) //, Loc_tp bxl = 0 )
        :   dat( sat ), spqloc( bxl )
        {}
    };

    /// tree data structure used for sub-queues of the overall queue
    typedef Redblack_subtree_sum< SatLoc > RBT;

    /*
    enum {
        LOC_BIAS = 12345    ///< bias all external locators to make it opaque
    };*/

    /// This structure holds the record for a single element
    struct Compo {
        RBT* subq;  ///< which sub-queue holds this element?
        iterator loc; ///< this element's locator in its sub-queue (inner loc)
        Sat_tp sat; ///< this element's satellite data
        Key_tp enr; ///< this element's energy

        /// ctor to initialize
        Compo( RBT* pq, iterator pl, const Sat_tp& ps, const Key_tp& pe )
        :   subq( pq ), loc( pl ), sat( ps ), enr( pe )
        {}

        /// destroy a record
        void clear_it()
        {
            subq = 00;
        }

        /// test whether record is valid or destroyed
        bool is_cleared() const
        {
            return 00 == subq;
        }
    };

    /// this is the master list of elements; index by external unbiased locator
    std::vector< Compo > m_master;



    /// @brief queue of zero-energy entries, a.k.a. alwaysland
    RBT m_always;

    /// @brief queue for positive, finite energy entries, a.k.a. sometimesland
    RBT m_sometimes;

    /**
     * @brief queue for entries of "infinite" energy
     * [symbolized by MAX_ENERGY()], a.k.a. neverland
     */
    RBT m_never;



    /// @brief sort of a sentinel meaning infinite energy, zero probability
    static inline
    Key_tp MAX_ENERGY() { return std::numeric_limits< Key_tp >::max(); }


    /// @brief entries in alwaysland and neverland are given this dummy weight.
    static inline
    Key_tp DUMMY_WT() { return 0; }


    /**
     * @brief transform "energy" (distance, if you will) to probability weight
     * @param energy positive quantity to be minimized in this priority queue
     * @return probability weight to be associated with the input energy
     * @see @ref spqewx
     */
    static inline Key_tp energy2weight( const Key_tp& energy )
    {
        /*
         * polynomial decay:  1/(energy + epsilon) to some positive power
         */
        return pow( energy, power_law() );

        /*
         * exponential decay:  base ^ {-energy}.
        return pow( power_law(), -energy );
         */
    }


    /// @brief same as above but return a "nice" weight, avoid degeneracies
    static inline Key_tp nice_e2w( const Key_tp& enr )
    {
        return 0 < enr && enr < MAX_ENERGY() ? energy2weight(enr) : DUMMY_WT();
    }



    /// select a subqueue based on energy
    inline RBT& which_sub_queue( const Key_tp& energy )
    {
        if ( 0 == energy )
        {
            return m_always;
        }
        if ( MAX_ENERGY() <= energy )
        {
            return m_never;
        }
        return m_sometimes;
    }


    /// @brief insert node in a given subqueue, return biased external locator
    iterator insert_here( RBT& subq, const Sat_tp& sat, const Key_tp& energy )
    {
        SatLoc satloc( sat, LOC_BIAS + m_master.size() );
        Loc_tp inner_loc = subq.insert( nice_e2w( energy ), satloc );
        m_master.push_back( Compo( & subq, inner_loc, sat, energy ) );
        return satloc.spqloc;
    }


    /// get pointer to composite record indicated by a biased external locator
    Compo* ref( Loc_tp spqloc )
    {
        if ( spqloc < LOC_BIAS )
        {
            return 00;
        }
        register Loc_tp unbiased = spqloc - LOC_BIAS;
        return m_master.size() <= unbiased ? 00 : & m_master[ unbiased ];
    }


    /// get pointer to composite record indicated by a biased external locator
    const Compo* ref( Loc_tp spqloc ) const
    {
        if ( spqloc < LOC_BIAS )
        {
            return 00;
        }
        register Loc_tp unbiased = spqloc - LOC_BIAS;
        return m_master.size() <= unbiased ? 00 : & m_master[ unbiased ];
    }



public:

    /// @brief return the number of (valid) entries in the queue
    size_t size() const
    {
        return m_always.size() + m_sometimes.size() + m_never.size();
    }


    /// @brief predicate tests whether the queue contains no entries
    bool is_empty() const
    {
        return 0 == size();
    }


    /// @brief throw away all contents
    void clear()
    {
        m_always.clear();
        m_sometimes.clear();
        m_never.clear();
        m_master.clear();
    }


    /// @brief insert a key with infinite energy (must be relaxed before drawn)
    Loc_tp ins_max_key( const Sat_tp& sat )
    {
        return insert_here( m_never, sat, MAX_ENERGY() );
    }


    /// @brief insert a key with a given energy and a given satellite value
    Loc_tp insert( const Key_tp& energy, const Sat_tp& sat )
    {
        return insert_here( which_sub_queue( energy ), sat, energy );
    }


    /// @brief fetch the energy or satellite values of indicated record
    bool access_loc( Loc_tp spqloc, Key_tp* energy, Sat_tp* serialnum ) const
    {
        const Compo* ccc = ref( spqloc );
        if ( 00 == ccc || ccc -> is_cleared() )
        {
            return false;
        }
        if ( energy )
        {
            *energy = ccc -> enr;
        }
        if ( serialnum )
        {
            *serialnum = ccc -> sat;
        }
        return true;
    }


    /// @brief remove the indicated record
    bool erase_loc( Loc_tp spqloc )
    {
        Compo* ccc = ref( spqloc );
        if ( 00 == ccc || ccc -> is_cleared() )
        {
            return false;
        }
        bool result = ccc -> subq -> erase_loc( ccc -> loc );
        ccc -> clear_it();
        return result;
    }


    /// @brief change the energy of the indicated record
    bool rekey_loc( Loc_tp spqloc, const Key_tp& newenergy )
    {
        Compo* ccc = ref( spqloc );
        if ( 00 == ccc || ccc -> is_cleared() )
        {
            return false;
        }
        register const Key_tp oldenergy = ccc -> enr;
        if ( newenergy == oldenergy )
        {
            return true; // energy has not changed so nothing to do
        }
        ccc -> enr = newenergy;

        // handle the common case of node that stays within the same subqueue
        const Key_tp new_weight = nice_e2w( newenergy );
        RBT& newsubq = which_sub_queue( newenergy );
        if ( & newsubq == ccc -> subq ) // if node stays in same subqueue
        {
            return ccc -> subq -> rekey_loc( ccc -> loc, new_weight );
        }

        // node has to hop out of one subqueue and into another
        bool result = ccc -> subq -> erase_loc( ccc -> loc );
        ccc -> subq = & newsubq;
        ccc -> loc
            = ccc -> subq -> insert( new_weight, SatLoc( ccc -> sat, spqloc ));
        return result;
    }



    /**
     * @brief get the locator of a record drawn by our devious method
     *
     * Devious method is to give absolute priority to zero-energy records.
     * If any exist (stored in "alwaysland") we return one of their locators,
     * in an undefined order.  If none exist, we give stochastic priority to
     * records with finite positive energy (stored in "sometimesland").
     * We return
     * a locator of a record drawn from empirical discrete distribution
     * defined by the weights of those entries.
     * If ra, rb are both records in sometimesland and if the weight of ra
     * exceeds
     * the weight of rb (equivalently, if the energy of ra is lower than the
     * energy of rb) then ra is more likely to be selected than rb.
     * The exact probability is defined elsewhere (see @ref energy2weight).
     * In this context, the definition of "finite" is loosened up to mean a
     * value less than MAX_ENERGY(), which is a huge number used as a sentinel
     * for infinity.
     *
     * Records with "infinite" energy (or MAX_ENERGY() energy) are stored but
     * never returned by this method; they are in "neverland."
     *
     * @return locator of the selected record or BAD_LOC if queue is empty.
     */
    Loc_tp low_energy_sample() const
    {
        const bool alwaysland_empty = m_always.is_empty();
        if ( alwaysland_empty && m_sometimes.is_empty() )
        {
            return BAD_LOC;
        }
        const RBT& pq( alwaysland_empty ? m_sometimes : m_always );
        Loc_tp loc( alwaysland_empty ? Loc_tp(BAD_LOC) : m_always.loc_max() );
        if ( alwaysland_empty )
        {
            // Pick, at random, a value in range (0,M)
            // where M = sum of tree's keys:
            Key_tp seek_wt = m_sometimes.root_sum() * kjb_c::kjb_rand();

            // Now find a node n such that an inorder (by key) listing of nodes
            // from smallest-keyed to n
            // has a sum of keys S equal to or barely exceeding 'seek_wt' --
            // minimal in the sense that (S - n.key) < seek_wt <= S.

            // The cumulative key sum is like the inverse CDF of the mass
            // function,
            // and selection via seek_wt is basically a transformation method
            // of sampling from the inverse CDF.
            loc = m_sometimes.loc_using_cumulative_key_sum( seek_wt );
        }
        SatLoc sl;
#ifdef TEST
        bool found =
#endif
                     pq.access_loc( loc, 00, &sl );
        KJB( ASSERT( found ) );
        return sl.spqloc;
    }


    /**
     * @brief get the locator of the record with maximum probability weight
     * @return locator of a record with max probability weight.
     *
     * If the energy-to-weight transform is strictly decreasing, this will be
     * a record with minimum energy (hence the name).
     *
     * @see @ref spqewx
     */
    Loc_tp loc_min() const
    {
        const bool alwaysland_empty = m_always.is_empty();
        if ( alwaysland_empty && m_sometimes.is_empty() )
        {
            return BAD_LOC;
        }
        const RBT& pq( alwaysland_empty ? m_sometimes : m_always );
        SatLoc sl;
        bool found = pq.access_loc( pq.loc_max(), 00, &sl );
        KJB( ASSERT( found ) );
        return sl.spqloc;
    }


    /**
     * @brief method to make this and deterministic pri queue share interface
     * @returns locator of node chosen to be removed
     *
     * I have two lines of code below, only one of which is selected:
     * @code
        return low_energy_sample();                                       // 1
        return kjb_c::kjb_rand() < 0.5 ? low_energy_sample() : loc_min(); // 2
     * @endcode
     * Line 1 relies entirely on its probability weight function.  Line 2 takes
     * half the "mass" out of that function and grants it to the max-weight
     * member, so it has a better-than-even chance of being chosen.
     * So when line 2 is active and 1 is disabled, Dijkstra's algorithm with
     * this queue acts
     * much more "calm"; whereas when line 1 is active and line 2 is disabled,
     * Dijkstra's algorithm with this queue is more "adventurous."  It turns
     * out that the "adventurous" behavior seems to work better for trails.
     *
     * The method name is a misnomer; it does not reduce the queue size.
     *
     * @see @ref spqewx
     */
    Loc_tp Dijkstra_extraction() const
    {
        return low_energy_sample();
        //return kjb_c::kjb_rand() < 0.5 ? low_energy_sample() : loc_min();
    }

};



template< typename SATELLITE_TYPE >
class DeterministicPriorityQueue
:   public DijkstraPriorityQueue<
        SATELLITE_TYPE, 
        Redblack_subtree_sum<SATELLITE_TYPE, float >::iterator 
    >
{
    typedef typename Redblack_subtree_sum<SATELLITE_TYPE, float > Tree_;
    Tree_ tree_;

public:

    typedef Tree_::iterator iterator;
    typedef Tree_::const_iterator const_iterator;
    typedef float Key_tp;
    typedef SATELLITE_TYPE Sat_tp;

    DeterministicPriorityQueue() {}

    ~DeterministicPriorityQueue() {}

    void clear() { tree_.clear(); }

    iterator insert(const Key_tp&k, const Sat_tp&s) {return tree_.insert(k,s);}

    iterator ins_max_key( const Sat_tp&s ) { return tree_.ins_max_key(s); }

    void erase( iterator i ) { tree_.erase(i); }

    iterator Dijkstra_extraction() { return tree_.Dijkstra_extraction(); }

    size_t size() const { return tree_.size(); }

    bool is_empty() const { return tree_.is_empty(); }

    void rekey_loc( iterator i, const Key_tp&k ) { tree_.rekey_loc(i, k); }
};



}
}

#endif /* STOPRIQUE3_H_INCLUDED_PREDOEHL_UOFARIZONAVISION */
