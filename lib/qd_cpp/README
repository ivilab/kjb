This directory contains code to support the quasi-Dijkstra short path
algorithm that finds paths that are short but not shortest in a graph.
This algorithm is a principal ingredient in the proposer for the Finding
Trails project as reworked by me (Andy Predoehl).

MANIFEST (low-level to high-level):

1) pixpoint.h
2) pixpath.h, pixpath.cpp
3) svgwrap.h, svgwrap.cpp

The above three files contains support code for sequences of integer-valued
ordered pairs.  The motivation was to support lists of pixel locations.
Each pair is thus called a PixPoint, and a sequence of them is called a
PixPath.  The class PixPath is general purpose, and you can use it for any
sequence of pixel locations.
This class has many useful methods to support typical operations on
such sequences.  I use it all the time in the trails project.
The SvgWrap class lets you draw a PixPath with vector drawing primitives.

4) polypath.h

This header defines a class PolyPath, which is an augmented version of PixPath
that better supports polygonal paths.  PolyPath does not directly support
closed paths.  Open polygonal paths have a sequence of vertices (I call such
a sequence of vertices a "sparse path")
and a sequence of pixel locations from start to end, connected by 8-way
connectivity, which I call a "dense path."  The sparse path is a subsequence of
the dense path.  This particular class requires that the vertices be unique
from their neighbors 1 and 2 steps away.  If so, you can construct from a
sparse path, or imperfectly, approximately, convert from a dense path to a
sparse path.  Also this computes the tangent direction at each dense path
point.

5) redblack.h

This is a general purpose self-balancing tree container that also stores
subtree sums of the keys (maintained with no asymptotic time penalty).
This has been painstakingly debugged by me, and it's by no means perfect but
I've worked very hard on it.  Please be very careful if you decide to modify
it.  If you discover any bugs, I would very much like to know.
There is an extensive test program in the test directory.
Obviously a red-black tree is nothing exotic, but having one that maintains
subtree sums is uncommon.  The subtree sums are what makes
the stochastic priority queue operate without asymptotic time penalty.

Future work:  there is a draft version of this file that does not use the
clunky "locator" design, instead using an "iterator" design more like that
of std::map and std::set.  The draft code is complete for the red-black tree
but not for the interfaces of items 6 and 7 below.  The iterator design is
definitely more streamlined and almost surely will work faster, but there are
some chicken-and-egg problems that have to be ironed out of the interface
specification.

6) diprique.h

This is a short header that defines the interface to a priority queue that
supports Dijkstra's algorithm efficiently.  Both the redblack tree and
stochastic priority queue implement this interface.

7) stoprique.h

This is it!  A stochastic priority queue supporting an extract-near-min
operation.  See the example in test/interactive for how you can implement
a quasi-Dijkstra algorithm for your graph application.

8) ratpoint.h, ratpoint.cpp

In these files we define a 2D point class with rational coordinates, which
provide exact representation for the intersections of line segments with
endpoints that have rational coordinates.  Also there are a number of other
utility functions that describe the intersection and relationship of line
segments, possibly intersecting, or incident at endpoints and turning
clockwise or counterclockwise, or parallel, or sharing a continuum.

9) intersection.h, intersection.cpp

These files introduce classes and functions that support computing multiple
line-segment intersections.  Specifically, when a PixPath is interpreted as
a polygonal path, the self-intersections of this path can be computed
efficiently using the Bentley-Ottman algorithm, which is implemented here.
The intersection points can be exactly represented using rational numbers.
These files also compute the intersection of a vector of line segments with
endpoints having rational coordinates.  Bentley-Ottman is output-sensitive,
so its asymptotic time complexity is better than brute force if and only if
the number of intersections is (asymptotically) less than quadratic in the
number of edges.

10) dcel.h, dcel.cpp
11) svg_dcel.h, svg_dcel.cpp

This file implements a 2D data structure called a Doubly Connected Edge List,
invented by Muller and Preparata.  Vertices must have rational coordinates.
It is a general data structure for collections of line segments in the plane,
possibly forming polygons.  This structure will compute simple polygons,
possibly having holes, based on collections of line segments.
The draw_dcel_as_svg() function renders the DCEL with vector primitives.

This is bulky code, over 3000 lines.  The code has room for improvement but
please be careful if you decide to change anything.
Geometric algorithms are infamous for their tricky degenerate cases.
One potential weak area is that the code now does much less introspection
and self-validation than it used to.

The time complexity of the merge operation has been reduced to O(n log n)
for a merged DCEL of n edges.  Finally!  (Dec. 2015)

12) doublecircle.h, doublecircle.cpp

This is a class representing 2D circles, using 'double' floating point
cartesian coordinates, and the only clever thing here is that this implements
Welzl's algorithm, a randomized, expected-linear-time method
for computing the smallest enclosing disk of a set of points.
Welzl worked with Sharir, who was Alon Efrat's advisor.

13) pathresize.h, pathresize.cpp

This implements a clever dynamic programming algorithm by Perez and Vidal
used to reduce the complexity of a polygonal path, optimal according to a
sum-of-squares error metric.  That is, you can reduce the number of vertices
and still follow the original path pretty well.

14) sweep.h, sweep.cpp

This file holds some of the sweep-line scan machinery used by the
Bentley-Ottman algorithm, so it can be reused by the other sweep-line
algorithms in this directory.  It's used four times, in items 9, 10, and 15.
The code is currently abstracted using templates, aka "generic programming,"
but it might have been nicer if it used class inheritance.

15) triangulate.h, triangulate.cpp

This file holds functions that partition, if necessary, a DCEL face so that
its subdivisions are y-monotone, i.e., has a convex intersection with any
given horizontal line, or so that its subdivisions are triangles.  Also,
using the triangulation, this can easily return the area of any face, and
there is a function to do that.  The time complexity for each operation is
O(n log n) where n is the number of edges in the face.

