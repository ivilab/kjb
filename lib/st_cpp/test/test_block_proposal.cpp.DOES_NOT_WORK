/* $Id$ */

/* =========================================================================== *
|
|  Copyright (c) 1994-2008 by Kobus Barnard (author).
|
|  Personal and educational use of this code is granted, provided that this
|  header is kept intact, and that the authorship is not misrepresented, that
|  its use is acknowledged in publications, and relevant papers are cited.
|
|  For other use contact the author (kobus AT cs DOT arizona DOT edu).
|
|  Please note that the code in this file has not necessarily been adequately
|  tested. Naturally, there is no guarantee of performance, support, or fitness
|  for any particular task. Nonetheless, I am interested in hearing about
|  problems that you encounter.
|
| Authors:
|     Luca Del Pero
|
* =========================================================================== */

#include <st_cpp/st_parapiped.h>
#include <st_cpp/st_perspective_camera.h>
#include <edge_cpp/manhattan_world.h>
#include <edge_cpp/features_manager.h>
#include <gr_cpp/gr_offscreen.h>
#include <iostream>

#warning "[Code police] doesn't compile as of 12 Oct. 2012; see below."


using namespace std;
using namespace kjb;



//Temporary, fix it so that it works on Linux as well
int main(int argc, char **argv)
{
    if(argc < 3)
    {
        std::cout << "Usage: <base_dir> <output_dir> <input_image>" << std::endl;
        return 0;
        }

    string base(argv[1]);
    base.append("/");

    string features_file(base);
    features_file.append("features/");
    features_file.append(argv[3]);
    features_file.append("_features.txt");
    std::cout << "Features file: " << features_file << std::endl;

    string image_name(base);
    image_name.append(argv[3]);
    image_name.append(".jpg");
    Image img(image_name);

    string out_base(argv[2]);
    out_base.append("/");
    out_base.append(argv[3]);
    string out_name(out_base);
    out_name.append(".jpg");

    bool found = false;

    Features_manager fm(features_file.c_str());
    Perspective_camera camera;
    kjb::Parametric_parapiped pp;
    unsigned int corner_index = 0;

    static kjb::Offscreen_buffer* offscreen = 0;
    offscreen = kjb::create_and_initialize_offscreen_buffer(img.get_num_cols(), img.get_num_rows());

    std::cout << "The focal length is: " << fm.get_manhattan_world().get_focal_length() << std::endl;
    //fm.set_manhattan_focal_length(700);

    for(unsigned int i = 0; i < fm.get_manhattan_world().get_num_corners2(); i++)
    {
        try
        {
            const Manhattan_corner & corner = fm.get_manhattan_world().get_corner_2(i);
            if(i == 0)
            {
                std::cout << "THE CORNER:" << corner << std::endl;
            }
            kjb::robustly_propose_parapiped_and_camera_from_orthogonal_corner(pp, camera, corner,
                fm.get_manhattan_world().get_focal_length(), img.get_num_rows(), img.get_num_cols(), 1000);
            if(!found)
            {
                found = true;
                corner_index = i;
            }
            camera.prepare_for_rendering(true);

            glColor3f(255.0, 0.0, 0.0);
            Base_gl_interface::set_gl_view(img);
            pp.wire_render();
            kjb_c::KJB_image * capture4 = NULL;
            Base_gl_interface::capture_gl_view(&capture4);
            Image img2(capture4);

#warning "[Code police] method get_orthogonal_segment is no longer valid."
#ifndef PROGRAMMER_IS_predoehl
            fm.get_manhattan_world().get_corner_2(i).get_orthogonal_segment(0).draw(img2,0,0,255);
            fm.get_manhattan_world().get_corner_2(i).get_orthogonal_segment(1).draw(img2,0,0,255);
            fm.get_manhattan_world().get_corner_2(i).get_orthogonal_segment(2).draw(img2,0,0,255);
#endif
            string temp_name(out_base);
            temp_name.append("_");
            char nn[50];
            sprintf(nn, "%d", i);
            temp_name.append(nn);
            temp_name.append(".jpg");
            img2.write(temp_name.c_str());
            std::cout << "It worked for " << temp_name << std::endl;
            //break;
        }
        catch(KJB_error e)
        {
            continue;
        }
    }

    if(!found)
    {
        std::cout << "Could not do it!" << std::endl;
        KJB_THROW_2(KJB_error,"Could not do it");
    }

    camera.prepare_for_rendering(true);

    glColor3f(255.0, 0.0, 0.0);
    Base_gl_interface::set_gl_view(img);
    pp.wire_render();
    kjb_c::KJB_image * capture4 = NULL;
    Base_gl_interface::capture_gl_view(&capture4);
    Image img2(capture4);

#warning "[Code police] method get_orthogonal_segment is no longer valid."
#ifndef PROGRAMMER_IS_predoehl
    fm.get_manhattan_world().get_corner_2(corner_index).get_orthogonal_segment(0).draw(img2,0,0,255);
    fm.get_manhattan_world().get_corner_2(corner_index).get_orthogonal_segment(1).draw(img2,0,0,255);
    fm.get_manhattan_world().get_corner_2(corner_index).get_orthogonal_segment(2).draw(img2,0,0,255);
#endif


    img2.write(out_name.c_str());

    camera.prepare_for_rendering(true);

    glColor3f(255.0, 0.0, 0.0);
    Base_gl_interface::set_gl_view(img);
    //pp.stretch_along_axis(1,50.0,false, true);
    //pp.stretch_along_axis(2,20.0,true, true);
    //pp.stretch_along_axis(1, 430.0, false, false);
    pp.wire_render();
    kjb_c::KJB_image * capture5 = NULL;
    Base_gl_interface::capture_gl_view(&capture5);
    Image img3(capture5);

#warning "[Code police] method get_orthogonal_segment is no longer valid."
#ifndef PROGRAMMER_IS_predoehl
    fm.get_manhattan_world().get_corner_3(corner_index).get_orthogonal_segment(0).draw(img3,0,0,255);
    fm.get_manhattan_world().get_corner_3(corner_index).get_orthogonal_segment(1).draw(img3,0,0,255);
    fm.get_manhattan_world().get_corner_3(corner_index).get_orthogonal_segment(2).draw(img3,0,0,255);
#endif

    std::cout << "Pitch: " << camera.get_pitch() << std::endl;
    std::cout << "Roll: " << camera.get_roll() << std::endl;
    std::cout << "Focal length: " << camera.get_focal_length() << std::endl;
    img3.write("stretch.jpg");

}


/*  /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\   */

