/* $Id$ */
/* =========================================================================== *
   |
   |  Copyright (c) 1994-2010 by Kobus Barnard (author)
   |
   |  Personal and educational use of this code is granted, provided that this
   |  header is kept intact, and that the authorship is not misrepresented, that
   |  its use is acknowledged in publications, and relevant papers are cited.
   |
   |  For other use contact the author (kobus AT cs DOT arizona DOT edu).
   |
   |  Please note that the code in this file has not necessarily been adequately
   |  tested. Naturally, there is no guarantee of performance, support, or fitness
   |  for any particular task. Nonetheless, I am interested in hearing about
   |  problems that you encounter.
   |
   |  Author: Jinyan Guan, Ernesto Brau
 * =========================================================================== */

#include <likelihood_cpp/line_segment_likelihood.h>
#include <g_cpp/g_util.h>
#include <prob_cpp/prob_pdf.h>
#include <prob_cpp/prob_sample.h>
#include <m_cpp/m_matrix.h>
#include <m_cpp/m_vector.h>
#include <algorithm>
#include <functional>
#include <utility>

namespace kjb {

const double Line_segment_likelihood::precision_epsilon = 1e-6;
const double Line_segment_likelihood::beta_epsilon = 1e-2;

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

Elsl_correspondence_pair::Elsl_correspondence_pair
(
    const Chain* data_ch_p,
    const Chain* model_ch_p,
    const Line_segment_likelihood* lhood_p
) :
    data_chain_p(data_ch_p),
    model_chain_p(model_ch_p),
    likelihood_p(lhood_p)
{
    IFT(likelihood_p != NULL, Runtime_error, "NULL likelihood object!");
    if(model_chain_p == NULL)
    {
        likelihood = likelihood_p->spurious(*data_chain_p);
    }
    else
    {
        likelihood = likelihood_p->pairwise(*data_chain_p, *model_chain_p);
    }
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

void Line_segment_likelihood::find_correspondence
(
    const Chain_vector& model_chains
) const
{
    correspondence.clear();

    typedef std::multiset<Elsl_correspondence_pair> Pair_set;
    Pair_set all_pairs;

    for(Chain_vector::const_iterator d_chain_p = m_data_chains.begin();
                                     d_chain_p != m_data_chains.end();
                                     d_chain_p++)
    {
        for(Chain_vector::const_iterator m_chain_p = model_chains.begin();
                                         m_chain_p != model_chains.end();
                                         m_chain_p++)
        {
            all_pairs.insert(Elsl_correspondence_pair(&(*d_chain_p),
                                                      &(*m_chain_p),
                                                      this));
        }

        all_pairs.insert(Elsl_correspondence_pair(&(*d_chain_p), NULL, this));
    }

    std::set<const Chain*> used_model_chains;
    std::set<const Chain*> used_data_chains;
    for(Pair_set::const_iterator pair_p = all_pairs.begin();
                                 pair_p != all_pairs.end();
                                 pair_p++)

    {
        if(used_model_chains.count(pair_p->model_chain_p) == 0
            && used_data_chains.count(pair_p->data_chain_p) == 0)
        {
            correspondence.push_back(*pair_p);
            if(pair_p->model_chain_p != NULL)
            {
                used_model_chains.insert(pair_p->model_chain_p);
                //std::cout << "AHHHHHHHHHHHHHHHHHHHHAHAHAHAHAHAAAAAAAAAAAAAAAAAAAAAAAAA\n";
            }

            used_data_chains.insert(pair_p->data_chain_p);
        }
    }

    // Store the unassigned model segments 
    for(Chain_vector::const_iterator chain_p = model_chains.begin();
                                     chain_p != model_chains.end();
                                     chain_p++)
    {
        if(used_model_chains.count(&(*chain_p)) == 0)
        {
            unassigned_model_chain_ps.push_back(&(*chain_p));
        }
    }
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

double Line_segment_likelihood::operator()
(
    const Chain_vector& model_chains
) const
{
    find_correspondence(model_chains);

    double ll = 0.0;
    size_t num_noise = 0;
    for(Elsl_correspondence::const_iterator pair_p = correspondence.begin();
                                            pair_p != correspondence.end();
                                            pair_p++)
    {
        ll += pair_p->likelihood;
        if(pair_p->model_chain_p == NULL)
        {
            num_noise++;
        }
    }

    ll += kjb::log_pdf(m_num_noise_chains_dist, num_noise);

    return ll;
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

Chain_vector Line_segment_likelihood::sample
(
    const Chain_vector& model_chains
) const
{
    using kjb::sample;

    Chain_vector data_chains;
    for(size_t i = 0; i < model_chains.size(); i++)
    {
        const Chain& chain = model_chains[i];
        double aligned_chain_length = chain.get_length();
        double aligned_chain_start_x = -aligned_chain_length / 2.0;

        Segment_vector data_segs;
        double lgrowth = sample(m_growth_dist);
        double rgrowth = sample(m_growth_dist);
        std::vector<double> start_ts = chain.get_start_ts();
        std::vector<double> end_ts = chain.get_end_ts();
        start_ts.front() = lgrowth;
        end_ts.back() = 1.0 + rgrowth;

        size_t num_segs = sample(m_num_segments_dist);

        if(num_segs == 0)
        {
            continue;
        }

        size_t num_parts = 2 * num_segs - 1;

        std::vector<double> borders(num_parts + 1, start_ts.front());
        borders[num_parts] = end_ts.back();
        for(size_t j = 1; j < num_parts; j++)
        {
            borders[j] = sample(Uniform_distribution(start_ts.front(),
                                                     end_ts.back()));
        }

        std::sort(borders.begin(), borders.end());

        bit_vector segment_on(num_parts);
        segment_on.front() = true;
        segment_on.back() = true;
        for(size_t j = 2; j < borders.size() - 1; j++)
        {
            double ratio = compute_segment_ratio(borders[j - 1], borders[j],
                                                 start_ts, end_ts);
            // ratio hack
            ratio = std::max(ratio, beta_epsilon);
            ratio = std::min(ratio, 1.0 - beta_epsilon);

            double a = ratio * m_segment_probability_scale;
            double b = (1 - ratio) * m_segment_probability_scale;
            double p_seg = sample(Beta_distribution(a, b));
            segment_on[j - 1] = sample(Bernoulli_distribution(p_seg));

            if(segment_on[j - 1])
            {
                double stpt = aligned_chain_start_x
                                + borders[j - 1] * aligned_chain_length;
                double enpt = aligned_chain_start_x
                                + borders[j] * aligned_chain_length;
                data_segs.push_back(Line_segment(Vector().set(stpt, 0.0),
                                                 Vector().set(enpt, 0.0)));
            }
        }

        if(data_segs.empty())
        {
            continue;
        }


        data_chains.push_back(Chain(data_segs));

        using namespace kjb::geometry;
        double distance = sample(m_distance_dist);
        double angle = sample(m_angle_dist);
        double final_angle = angle + chain.get_orientation();
        Matrix R = Matrix::create_2d_rotation_matrix(chain.get_orientation());
        Vector t = projective_to_euclidean_2d(chain.get_centre())
                        + R * Vector().set(0.0, distance);

        data_chains.back().translate(t);
        data_chains.back().rotate(final_angle);
    }

    return data_chains;
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

double Line_segment_likelihood::pairwise
(
    const Chain& data_chain,
    const Chain& model_chain
) const
{
    double distance;
    double angle_magnitude;
    std::pair<Chain, Chain> chs = align_to_x_axis(data_chain,
                                                  model_chain,
                                                  distance,
                                                  angle_magnitude);
    double distance_ll = kjb::log_pdf(m_distance_dist, distance);
    double angle_ll = kjb::log_pdf(m_angle_dist, angle_magnitude);

    const Chain& ad_chain = chs.first;
    const Chain& am_chain = chs.second;

    double lgrowth = am_chain.get_start_x() - ad_chain.get_start_x();
    double rgrowth = ad_chain.get_end_x() - am_chain.get_end_x();

    double rel_lgrowth = lgrowth / am_chain.get_length();
    double rel_rgrowth = rgrowth / am_chain.get_length();
    double growth_ll = kjb::log_pdf(m_growth_dist, rel_lgrowth)
                        + kjb::log_pdf(m_growth_dist, rel_rgrowth);

    const Segment_vector& data_segments = ad_chain.get_segments();
    size_t num_segs = data_segments.size();
    double num_segs_ll = kjb::log_pdf(m_num_segments_dist, num_segs);
    std::vector<double> borders(num_segs* 2);
    for(size_t i = 0; i < data_segments.size(); i++)
    {
        const Line_segment& segment = data_segments[i];
        borders[2*i] = am_chain.find_t(Vector().set(
                                segment.get_start_x(), 0.0));
        borders[2*i + 1] = am_chain.find_t(Vector().set(
                                segment.get_end_x(), 0.0));
    }

    std::vector<double> start_ts = am_chain.get_start_ts();
    std::vector<double> end_ts = am_chain.get_end_ts();
    if(rel_lgrowth < 0)
    {
        start_ts.front() = rel_lgrowth;
    }

    if(rel_rgrowth > 0)
    {
        end_ts.back() = 1.0 + rel_rgrowth;
    }

    double parts_ll = 0.0;
    for(size_t i = 2; i < borders.size() - 1; i++)
    {
        double ratio = compute_segment_ratio(borders[i - 1], borders[i],
                                             start_ts, end_ts);
        // ratio hack
        ratio = std::max(ratio, beta_epsilon);
        ratio = std::min(ratio, 1.0 - beta_epsilon);

        bool seg_on = i % 2;
        parts_ll += (seg_on ? std::log(ratio) : std::log(1 - ratio));
    }

    return distance_ll + angle_ll + parts_ll + growth_ll + num_segs_ll;
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

double Line_segment_likelihood::spurious
(
    const Chain& data_chain
) const
{
    const Segment_vector& data_segments = data_chain.get_segments();
    size_t num_segs = data_segments.size();
    double num_segs_ll = kjb::log_pdf(m_num_noise_segments_dist, num_segs);

    double length = data_chain.get_length();
    double length_ll = kjb::log_pdf(m_noise_length_dist, length);

    const Vector& center = data_chain.get_centre();
    double location_ll = kjb::log_pdf(m_noise_location_x_dist, center[0])
                            + kjb::log_pdf(m_noise_location_y_dist, center[1]);

    double angle = data_chain.get_orientation();
    double angle_ll = kjb::log_pdf(m_noise_angle_dist, angle);

    double parts_ll = 0.0;
    for(size_t i = 0; i < num_segs; i++)
    {
        bool seg_on = (i + 1) % 2;
        parts_ll += kjb::log_pdf(m_noise_segment_dist, seg_on);
    }

    return length_ll + location_ll + angle_ll + parts_ll + num_segs_ll;
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

double Line_segment_likelihood::compute_segment_ratio
(
    double start,
    double end,
    const std::vector<double>& start_ts,
    const std::vector<double>& end_ts
) const
{
    std::vector<double>::const_iterator
        fe_p = find_if(end_ts.begin(), end_ts.end(),
                       std::bind2nd(std::greater<double>(), start));
    std::vector<double>::const_iterator fs_p = start_ts.begin();
    std::advance(fs_p, std::distance(end_ts.begin(), fe_p));

    std::vector<double>::const_iterator
        ls_p = find_if(start_ts.begin(), start_ts.end(),
                       std::bind2nd(std::greater<double>(), end));

    double seg_len = 0.0;
    for(; fs_p != ls_p; fs_p++, fe_p++)
    {
        double real_start = std::max(start, *fs_p);
        double real_end = std::min(end, *fe_p);
        seg_len += real_end - real_start;
    }

    return seg_len / (end - start);
}

/* \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ */

std::pair<Chain, Chain> align_to_x_axis
(
    const Chain& data_chain,
    const Chain& model_chain,
    double& distance,
    double& angle_magnitude
)
{
    Chain aligned_model_chain = model_chain;
    aligned_model_chain.rotate(-aligned_model_chain.get_orientation());

    Line_segment rot_model_chain(model_chain.get_centre()[0],
                                 model_chain.get_centre()[1],
                                 data_chain.get_orientation(),
                                 model_chain.get_length());
    Vector u = rot_model_chain.get_line()
                        .project_point_onto_line(data_chain.get_centre());
    Vector t = geometry::projective_to_euclidean_2d(u)
                - geometry::projective_to_euclidean_2d(data_chain.get_centre());
    distance = t.magnitude();

    double angle = data_chain.get_orientation()
                    - model_chain.get_orientation();

    angle_magnitude = fabs(angle);
    if(angle_magnitude > M_PI / 2.0)
    {
        angle_magnitude = M_PI - angle_magnitude;
    }

    Vector rot_model_chain_center =
        geometry::projective_to_euclidean_2d(rot_model_chain.get_centre());

    Matrix M_t = geometry::get_translation_matrix(t);
    Matrix M_o = geometry::get_translation_matrix(-rot_model_chain_center);
    Matrix R = Matrix::create_2d_homo_rotation_matrix(
                                -angle - model_chain.get_orientation());
    Matrix M_no = geometry::get_translation_matrix(rot_model_chain_center);
    Matrix M = M_no * R * M_o * M_t; 

    Chain aligned_data_chain = data_chain;
    aligned_data_chain.transform(M);

    return std::make_pair(aligned_data_chain, aligned_model_chain);
}

} //namespace  kjb

