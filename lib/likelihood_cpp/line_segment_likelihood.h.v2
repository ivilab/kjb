/* $Id$ */
/* =========================================================================== *
   |
   |  Copyright (c) 1994-2010 by Kobus Barnard (author)
   |
   |  Personal and educational use of this code is granted, provided that this
   |  header is kept intact, and that the authorship is not misrepresented, that
   |  its use is acknowledged in publications, and relevant papers are cited.
   |
   |  For other use contact the author (kobus AT cs DOT arizona DOT edu).
   |
   |  Please note that the code in this file has not necessarily been adequately
   |  tested. Naturally, there is no guarantee of performance, support, or fitness
   |  for any particular task. Nonetheless, I am interested in hearing about
   |  problems that you encounter.
   |
   |  Author: Jinyan Guan, Ernesto Brau
 * =========================================================================== */

#ifndef EDGE_LINE_SEGMENTS_LIKELIHOOD_H_INCLUDED
#define EDGE_LINE_SEGMENTS_LIKELIHOOD_H_INCLUDED

#include <prob_cpp/prob_distribution.h>
#include <edge_cpp/line_segment.h>
#include <edge_cpp/collinear_segment_chain.h>
#include <vector>
#include <list>

namespace kjb {

// useful typedefs
typedef Collinear_segment_chain Chain;
typedef std::vector<Chain> Chain_vector;
typedef std::vector<const Chain*> Chain_p_vector;
typedef std::vector<Line_segment> Segment_vector;
typedef std::vector<const Line_segment*> Segment_p_vector;
typedef std::vector<bool> bit_vector;

// forward declaration
class Line_segment_likelihood;

/** @brief  Soon... */
struct Elsl_correspondence_pair
{
    const Chain* data_chain_p;
    const Chain* model_chain_p;
    const Line_segment_likelihood* likelihood_p;
    double likelihood;

    Elsl_correspondence_pair
    (
        const Chain* data_ch_p,
        const Chain* model_ch_p,
        const Line_segment_likelihood* lhood_p
    );

    bool operator<(const Elsl_correspondence_pair& elslc) const
    {
        return likelihood > elslc.likelihood;
    }
};

// correspondence
typedef std::list<Elsl_correspondence_pair> Elsl_correspondence;

/** @brief  Soon... */
class Line_segment_likelihood
{
public:
    static const double precision_epsilon;
    static const double beta_epsilon;

    /**
     * @brief   Creates likelihood. Param description coming later =).
     */
    Line_segment_likelihood
    (
        const Chain_vector& data_chains,
        double distance_sigma,
        double angle_sigma, 
        double growth_sigma,
        double num_segments_lambda,
        double segment_probability_scale,
        double num_noise_chains_lambda,
        double noise_length_lambda,
        double noise_min_x,
        double noise_max_x,
        double noise_min_y,
        double noise_max_y,
        double num_noise_segments_lambda,
        double noise_segment_probability
    ) :
        m_data_chains(data_chains),
        m_distance_dist(0.0, distance_sigma),
        m_angle_dist(0.0, angle_sigma),
        m_growth_dist(0.0, growth_sigma),
        m_num_segments_dist(num_segments_lambda),
        m_segment_probability_scale(segment_probability_scale),
        m_num_noise_chains_dist(num_noise_chains_lambda),
        m_noise_length_dist(noise_length_lambda),
        m_noise_location_x_dist(noise_min_x, noise_max_x),
        m_noise_location_y_dist(noise_min_y, noise_max_y),
        m_noise_angle_dist(0.0, M_PI),
        m_num_noise_segments_dist(num_noise_segments_lambda),
        m_noise_segment_dist(noise_segment_probability)
    {}

    /** @brief  Find the correspondence */
    void find_correspondence(const Chain_vector& model_chains) const;

    /** @brief  Compute the likelihood */
    double operator()(const Chain_vector& model_chains) const;

    /** @brief  Compute the likelihood */
    Chain_vector sample(const Chain_vector& model_chains) const;

    /** @brief  Get the last computed correspondence. */
    const Elsl_correspondence& get_correspondence() const
    {
        return correspondence;
    }

    /** @brief Return a vector of unassigned model chains */
    const Chain_p_vector& get_unassigned_model_chains() const
    {
        return unassigned_model_chain_ps;
    }

private:
    /*==============================================================*
     *                    PRIVATE MEMBER FUNCS                      *
     *--------------------------------------------------------------*/

    /** @brief  Soon... */
    double compute_segment_ratio
    (
        double start,
        double end,
        const std::vector<double>& start_ts,
        const std::vector<double>& end_ts
    ) const;

    /** @brief  Soon... */
    double pairwise(const Chain& data_chain, const Chain& model_chain) const;

    /** @brief  Soon... */
    double spurious(const Chain& data_chain) const;

    /*==============================================================*
     *                          DATA MEMBERS                        *
     *--------------------------------------------------------------*/

    // For corresponding model and data chain pairs 
    const Chain_vector& m_data_chains;
    Normal_distribution m_distance_dist;
    Normal_distribution m_angle_dist;
    Normal_distribution m_growth_dist;
    Poisson_distribution m_num_segments_dist;
    double m_segment_probability_scale;

    // For noisy data chains  
    Poisson_distribution m_num_noise_chains_dist;
    Exponential_distribution m_noise_length_dist;
    Uniform_distribution m_noise_location_x_dist;
    Uniform_distribution m_noise_location_y_dist;
    Uniform_distribution m_noise_angle_dist;
    Poisson_distribution m_num_noise_segments_dist;
    Bernoulli_distribution m_noise_segment_dist;

    // state of this likelihood
    mutable Elsl_correspondence correspondence;

    // unassigned model chains
    mutable Chain_p_vector unassigned_model_chain_ps;

    friend class Elsl_correspondence_pair;
};

/** @brief  Soon... */
std::pair<Chain, Chain> align_to_x_axis
(
    const Chain& data_chain,
    const Chain& model_chain,
    double& distance,
    double& angle_magnitude
);

} // namespace kjb

#endif //EDGE_LINE_SEGMENTS_LIKELIHOOD

