/* $Id$ */
/* =========================================================================== *
   |
   |  Copyright (c) 1994-2010 by Kobus Barnard (author)
   |
   |  Personal and educational use of this code is granted, provided that this
   |  header is kept intact, and that the authorship is not misrepresented, that
   |  its use is acknowledged in publications, and relevant papers are cited.
   |
   |  For other use contact the author (kobus AT cs DOT arizona DOT edu).
   |
   |  Please note that the code in this file has not necessarily been adequately
   |  tested. Naturally, there is no guarantee of performance, support, or fitness
   |  for any particular task. Nonetheless, I am interested in hearing about
   |  problems that you encounter.
   |
   |  Author: Jinyan Guan, Ernesto Brau
 * =========================================================================== */

#ifndef LINE_SEGMENT_LIKELIHOOD_H_INCLUDED
#define LINE_SEGMENT_LIKELIHOOD_H_INCLUDED

#include <edge_cpp/line_segment.h>
#include <m_cpp/m_vector.h>
#include <m_cpp/m_matrix.h>
#include <g_cpp/g_util.h>
#include <prob_cpp/prob_distribution.h>
#include <prob_cpp/prob_pdf.h>
#include <prob_cpp/prob_sample.h>
#include <prob_cpp/prob_util.h>
#include <vector>
#include <algorithm>
#include <boost/bind.hpp>

namespace kjb {

/** @brief  Soon... */
class Line_segment_likelihood
{
public:
    // useful typedefs
    typedef std::vector<Line_segment> Segment_vector;

    /**
     * @brief   Creates likelihood. Param description coming later =).
     *
     * For a description of the parameters, see line segments paper.
     */
    Line_segment_likelihood
    (
        const Line_segment* data_segment_p,
        double L,
        double p,
        double q,
        double r
    ) :
        m_data_segment_p(data_segment_p),
        m_L(L),
        m_p(p),
        m_q(q),
        m_r(r)
    {}

    /**
     * @brief   Creates likelihood. Param description coming later =).
     *
     * For a description of the parameters, see line segments paper.
     *
     * @note    In order to call this on a model, one must call
     *          set_data_segment() first.
     */
    Line_segment_likelihood
    (
        double L,
        double p,
        double q,
        double r
    ) :
        m_data_segment_p(0),
        m_L(L),
        m_p(p),
        m_q(q),
        m_r(r)
    {}

    /** @brief  Sets the data segment to the given segment. */
    void set_data_segment(const Line_segment* seg_p)
    {
        m_data_segment_p = seg_p;
    }

    /** @brief  Compute the likelihood */
    double operator()(const Segment_vector& model_segments) const
    {
        std::vector<double> lhs(model_segments.size());
        std::transform(model_segments.begin(), model_segments.end(), lhs.begin(),
                       boost::bind(&Line_segment_likelihood::single_component,
                                   this, _1));
        double lh = std::accumulate(lhs.begin(), lhs.end(), 0.0)
                                        / model_segments.size();

        return std::log(lh);
    }

    /** @brief  Sample from the likelihood */
    Line_segment sample(const Segment_vector& model_segments) const
    {
        const Line_segment& m = *element_uar(model_segments.begin(),
                                             model_segments.size());

        double sigma_angle = m_r / std::sqrt(m_L * m.get_length());
        double sigma_length = m_p * std::sqrt(m_L * m.get_length());
        double sigma_width = m_q;

        double angle = kjb::sample(Normal_distribution(0.0, sigma_angle));
        double length = kjb::sample(Normal_distribution(0.0, sigma_length));
        double width = kjb::sample(Normal_distribution(0.0, sigma_width));
        double seg_length = kjb::sample(Uniform_distribution(
                                                1.0, m.get_length() / 4.0));

        Vector l_dir = geometry::projective_to_euclidean_2d(m.get_end())
                        - geometry::projective_to_euclidean_2d(m.get_start());
        l_dir.normalize();
        Vector l_component = length * l_dir;

        Vector w_dir = Vector().set(l_dir[1], -l_dir[0]);
        Vector w_component = width * w_dir;
        Vector center = geometry::projective_to_euclidean_2d(m.get_centre())
                            + l_component + w_component;

        return Line_segment(center[0], center[1],
                            m.get_orientation() + angle, seg_length);
    }

private:
    /** @brief  Compute likelihood of single data segment. */
    double single_component(const Line_segment& m) const
    {
        double sigma_angle = m_r / std::sqrt(m_L * m.get_length());
        double sigma_length = m_p * std::sqrt(m_L * m.get_length());
        double sigma_width = m_q;

        double angle = fabs(m.get_orientation()
                                - m_data_segment_p->get_orientation());
        if(angle > M_PI / 2.0)
        {
            angle = M_PI - angle;
        }

        using namespace geometry;
        Matrix R = get_rotation_matrix(-m.get_orientation());
        Vector ac
            = R * (projective_to_euclidean_2d(m_data_segment_p->get_centre())
                                - projective_to_euclidean_2d(m.get_centre()));

        double length = ac[0];
        double width = ac[1];

        double angle_lh = gauss_like_pdf(angle, sigma_angle);
        double length_lh = gauss_like_pdf(length, sigma_length);
        double width_lh = gauss_like_pdf(width, sigma_width);

        return angle_lh * length_lh * width_lh;
    }

    /** @brief  Gauss-like distribution...might just use a Gaussian later. */
    double gauss_like_pdf(double x, double s) const
    {
        return kjb::pdf(Normal_distribution(0.0, s), x);
    }

    /*==============================================================*
     *                          DATA MEMBERS                        *
     *--------------------------------------------------------------*/

    // data and params
    const Line_segment* m_data_segment_p;
    double m_L;
    double m_p;
    double m_q;
    double m_r;
};

} // namespace kjb

#endif //LINE_SEGMENT_LIKELIHOOD

