#!/bin/csh -f

##################################################################################
#
# Build script 
# ============
#
# This file is generally called by "make". It can also be called directly. The
# main purpose is to normalize the make environment, and to implement some
# functionality that is difficult to do in a robust portable way for all flavors
# of make. 
#
# This file should be a copy of: 
#     ${SRC_DIR}/Make/scripts/build 
#
# The chief functionallity implemented here is to determine the value of
# SRC_DIR, followed by sourcing ${SRC_DIR}Make/scripts/build-2. 
#
# This is a copy of ${SRC_DIR}/Make/scripts/build so that source directories can
# be moved up and down in the src directory tree without additional manual
# operations. If we instead were to link to ${SRC_DIR}/Make/scripts/build, then
# changing the depth in the tree would require repairing the link by hand.  
#

##################################################################################
#
#                      Manipulating the build
#                      ----------------------
#
# Build options can be manipulated by changing environment variables documented
# in this file. While setting them in this file can also work, this is NO LONGER
# ADVISED. 
#
# TODO --- make it so that this script can take options to request specific builds. 
#
# TODO --- once the above is done, document how to set build options using:
#             1) Kobus's setup
#             2) Tcsh env vars
#             3) Bash env vars
#             4) Options. 
#

#                      Object file dir hint 
#                      --------------------
#
# By default object files go into a directory which looks like
# $MACHINE/$COMPILER/$CODE, where CODE is generally either of "dev" for
# developement or "prod" for production (see below). Thus multiple versions are
# easily managed.  FORCE_OBJ_DIR can be used to force the code to go elsewhere,
# with the most comon other destination being "" which makes .o, .a, and
# executable files to appear in the current directory. If the rseolved value of
# the environment variable OBJ_DIR is not "", and Kobus's environment is not
# beig used, then a link is made from any built executables to the current
# directory. If Kobus's environment is being used, then OBJ_DIR is automatically
# arranged to be part of the path and these (ugly) links are not needed. 

# setenv FORCE_OBJ_DIR ""


#                      Production vs development code hint
#                      -----------------------------------
#
# By default, the version of the code is inherited from environment variables
# such as PRODUCTION. The default is to build development versions of the code,
# unless this is part of an exported version  (on-line, shared).  
#

# setenv PRODUCTION 1

#                      Compiler hints
#                      --------------
#
# You can set a preferred compiler by uncommenting and editing the following
# lines. Otherwise the script "init_compile" will try to find a compiler. 
#
# If our choice for one of the compilers is not in our PATH, then we may need to
# specify the path in variable provided. Note that specifying the path but NOT a
# compiler choice is likely an ERROR, because you would be setting the path of a
# compiler chosen by the script. The path must have a trailing slash. 
# 
# setenv KJB_CC gcc
# setenv CC_PATH ""
#
# setenv KJB_CXX g++
# setenv CXX_PATH ""
#
# setenv KJB_F77 gcc
# setenv F77_PATH ""
#
# setenv KJB_LD gcc 
# setenv LD_PATH ""
#

##############################################################################

#
# Find out where we are in the source tree. In particular, we want to find a dir
# that has Make as a sub-dir and Make/init_compile as a file in that (to further
# check that we have the right one). 
#

set found = 0
set src_dir = ""

pushd `pwd` >& /dev/null

while ("`pwd`" != "/")
    if (-e Make/init_compile) then
        set found = 1
        break
    endif 

    set src_dir = "../${src_dir}"

    cd ..
end

popd >& /dev/null

if (${found}) then
    if ("${src_dir}" == "") then
        set src_dir = "./"
    endif 

    setenv SRC_DIR "${src_dir}"
else
   if ($?SRC_DIR == 0) then 
       setenv SRC_DIR "${HOME}/src/"
   endif 

   if (! -e ${SRC_DIR}Make/init_compile) then
       echo " "
       echo "This directory does not seem to be below a src dirctory with KJB installed."
       echo "Nor does ${SRC_DIR}/Make/init_compile exist. "
       echo "Hence this build will fail." 
       echo " "
       echo "Try setting SRC_DIR to a directory with Make as a sub-dir."
       echo " "

       exit 1 
   endif 
endif 

# if ($?KJB_ABSOLUTE_SRC_PATH) then
    pushd ${SRC_DIR} > /dev/null
    setenv SRC_DIR "${cwd}/"
    popd > /dev/null
# endif 

source ${SRC_DIR}Make/scripts/build-2 

