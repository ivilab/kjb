#!/bin/csh -f

###############################################################################
#
# Identification:
#     A script to build the file Makefile-libs-needed
#
# Description:
#     This script builds the file Makefile-libs-needed" in the directory given
#     by the first parameter, or the current directory if there are no
#     parameters. In this description we will simply refer to "this directory." 
#
#     Makefile-libs-needed contains symbols for all all optional external
#     libraries needed by the code in this directory, as well as symbols for
#     propagating what is needed by code that depends on this directory.
#
#     The file Makefile-libs-needed in a given library sub-dir is included by
#     the file Makefile-include in the sub-dir. Sub-dir Makefile-includes that
#     are needed for a given compile are included from the file Makefile-dirs,
#     both in the case of program directories and library directories. 
#
#     The function of this script is broken down into four parts.  Part one: If
#     there is C++ code in this directory, a symbol inherited via
#     Makefile-libs-needed is set to ensure the linker is appropriate for C++.
#
#     Part two: For any KJB_HAVE_XXX found in this directory, a symbol for the
#     compile like to provide the definitions of those symbols  is set.  
#
#     Part three: Because KJB_HAVE_XXX may not always be used as it should, and
#     also because the use of KJB_HAVE_XXX does not necessarily mean that the
#     library component is actually used, we use #includes to identify external
#     library use. Having done that, we arrange for the propagation of the link
#     lings to program builds. We also arrange for any non-standard includes
#     needed for compiles within this directory.
#
#     Part four: If either KJB_HAVE_XXX, or an #include associated with an
#     external library is found in a header file, then we must propagate the
#     need for the KJB_HAVE_XXX symbol, and associated non-standard include dirs
#     to other code. Note that the information used is similar to the union of
#     that used in the previous two steps, but restricted to header files only. 
#
# Author:
#     Kobus Barnard
#
###############################################################################

@ num_args = ${#argv}

if ("${num_args}" > 1) then
    ${P_STDERR} "Script build_makefile_libs_needed_2 takes only 0 or 1 parameters."
    exit 1
endif 

set build_dir_path = "${cwd}"

set ppid = `ps -p $$ -o ppid=`
${VERBOSE_ECHO} "${KJB_VERBOSE_INDENT}Process $$ locked by ${ppid} entering script build_makefile_libs_needed_2 with directory ${build_dir_path}."

if (($?KJB_LOCK_TIME_STAMP) && (-e Makefile-libs-needed)) then
    set can_skip = `${MAKE_SCRIPT_PATH}test_older_than ${KJB_LOCK_TIME_STAMP} Makefile-libs-needed`

    if (${can_skip}) then
        ${VERBOSE_ECHO} "${KJB_VERBOSE_INDENT}Skipping build_makefile_libs_needed_2 in `pwd` as Makefile-libs-needed is new."
        # set x = $$ ; @ x %= 100 ; sleep 0.$x >& /dev/null
        # echo $BEEP
        
        exit 0
    endif 
else 
    ${VERBOSE_ECHO} "${KJB_VERBOSE_INDENT}Process $$ locked by ${ppid} reports Makefile-libs-needed does not exist in script build_makefile_libs_needed_2 with directory ${build_dir_path}."
endif 

${VERBOSE_ECHO} "${KJB_VERBOSE_INDENT}Process $$ locked by ${ppid} continuing with script build_makefile_libs_needed_2 with directory ${build_dir_path}."

##########################################################

# 2019/06/15. It is not clear if this is still possible given the locking
# system? 
#
# It is possible that this script can be run in two threads due to imperfections
# in the build system. So we reduce the chance of conflicts, and enable printing
# a message when this occurs, by building the results in a temporary file. 
#
${KJB_RM} Makefile-libs-needed
set output_file_name = Makefile-libs-needed.$$

set cur_time = `date`

echo  " " > ${output_file_name}
echo  "# Generated by the script build_makefile_libs_needed_2 " >> ${output_file_name}
echo  "# by process $$ at ${cur_time}." >> ${output_file_name}
echo  " " >> ${output_file_name}

if (-e Makefile-include) then
    set lib_prefix = `grep _LIB_UC_PREFIX Makefile-include | sed "s/\(.*\)_LIB_UC_PREFIX *= *.*/\1_LIB_/"`
else 
    set lib_prefix = "" 
endif 

set test_main = `${MAKE_SCRIPT_PATH}stream_file_names -s -m`
if (${status}) then
    ${KJB_RM} "${lock_file}"
    ${P_STDERR} "Script stream_file_names failed with options -s -m  in script build_makefile_libs_needed_2."
    exit 1
endif 

if ("${test_main}" != "") then
    
    # What if we accidently have a main in a KJB library sub-directory? 
    #
    if (-e Makefile-include) then
        echo "Makefile-include found in a directory with a main module."
        echo "Assuming that we are in a KJB library sub-directory."
        echo "Adjusting building of ${build_dir_path}/Makefile-libs-needed appropriately."

        set test_main = "" 
    endif 
endif 

# #############################################################################
# 
# Part one: If there is C++ code in the directory, make sure that we overide the
# command for linking to deal with it. 
#

${VERBOSE_ECHO_2} "${KJB_VERBOSE_INDENT}Script build_makefile_libs_needed_2 part one."

set have_cpp = `${MAKE_SCRIPT_PATH}stream_file_names -t -x` 

if ("${have_cpp}" != "") then
     echo  " " >> ${output_file_name}
     echo  "# We found C++ code in this sub-tree." >> ${output_file_name}
     echo  "# This means we might need to need to link against C++ libs." >> ${output_file_name}
     echo  "# Currently it seems that the safest way is to let C++ call the linker." >> ${output_file_name}
     echo  "# " >> ${output_file_name}
     echo "KJB_LD = "'$'"(KJB_CXX)" >> ${output_file_name}
     echo  " " >> ${output_file_name}
endif 

# #############################################################################


set need_haves = ""
set found_haves = ""

set need_options = ""
set need_include = ""
set need_cc_flags = ""

set kjb_haves = `sed -n '/KJB_HAVE/p' Include_lines/include_lines`

# echo haves: ${haves} 

set noglob 

# #############################################################################
# 
# Part two: See if any the libraries that we actually need (based on include
# lines) are in the list of libraries that can be GPU enabled. If this is the
# case, then we create lines in the Makefile that switch OBJ_DIR and friends  to
# the GPU versions. Note that the GPU versions are usually exactly the same as
# the non-GPU versions, UNLESS we are on a system with a GPU as determined by
# init_compile. 
#

${VERBOSE_ECHO_2} "${KJB_VERBOSE_INDENT}Script build_makefile_libs_needed_2 part two."

# This is not needed so far as we just propogate CUDA support and use that. 
#
set do_gpu = 0

if (${do_gpu}) then
    set used_libs = ""
    set first_item = 1

    foreach gpu_enabled_lib (${GPU_ENABLED_LIBS})
        # echo gpu_enabled_lib: $gpu_enabled_lib
        set lib = `echo ${gpu_enabled_lib} | sed 's/\(.*\):.*/\1/'`

        set grep_str = `echo ${gpu_enabled_lib} | sed 's/.*:\(.*\)/\1/'`
        # echo grep_str: $grep_str

        unset noglob
        set grep_res = `grep -l "\<${grep_str}\>" Include_lines/include_lines`
        # echo grep_res: $grep_res
        set noglob 

        if ("${grep_res}" != "") then
            echo  " " >> ${output_file_name}
            echo  "# This is where we arrange for the switch object directories" >> ${output_file_name}
            echo  "# and executable link names when we may be using GPU enabled libraries." >> ${output_file_name}
            echo  "# " >> ${output_file_name}

            echo 'OBJ_DIR = $(GPU_OBJ_DIR)' >> ${output_file_name}
            echo 'CXX_OBJ_DIR = $(GPU_CXX_OBJ_DIR)' >> ${output_file_name}
            echo 'F77_OBJ_DIR = $(GPU_F77_OBJ_DIR)' >> ${output_file_name}
            echo 'LD_OBJ_DIR = $(GPU_LD_OBJ_DIR)' >> ${output_file_name}
            echo 'LINK_NAME_SUFFIX = $(GPU_SUFFIX)' >> ${output_file_name}
            echo  "" >> ${output_file_name}
          
            break
        endif 
    end
endif 

# #############################################################################
# 
# Part three: Define a make symbol to ensure that all KJB_HAVE_XXX used
# in the directory are provided on the compile line whenever code in this
# directory is compiled.

${VERBOSE_ECHO_2} "${KJB_VERBOSE_INDENT}Script build_makefile_libs_needed_2 part three."

foreach kjb_have (${kjb_haves})
    set lib = `echo ${kjb_have} | sed 's/KJB_HAVE_/LIB_/'`
    set have_str = `echo ${lib} | sed 's/LIB_/HAVE_/'`
    
    set have_env_str = '$'"(KJB_${have_str})"
    set need_haves = "${need_haves} ${have_env_str}"
end

if ("${need_haves}" != "") then
    echo  " " >> ${output_file_name}
    echo  "# This symbol provides all needed defines for KJB_HAVE_XXX for compiles" >> ${output_file_name}
    echo  "# in this directory." >> ${output_file_name}
    echo  "#" >> ${output_file_name}

    echo "${lib_prefix}NEED_HAVE = ${need_haves}" >> ${output_file_name}

    echo "" >> ${output_file_name}
endif 

# #############################################################################
# 
# Part four: While external library use should be accompanied by a
# KJB_HAVE_XXX, we do not count on this. We may find out that we need that
# library via #includes. Further, a KJB_HAVE_XXX, may not imply actually needing
# the library or associated header file. Hence we consider #includes to decide
# if we need to link against the library. This is propagated to programs being
# built through the symbols NEED_LIB_XXX. Further, for compiling in this
# directory, we need to ensure that the include directory is provided if it is
# not standard, and any other special considerations. This is specified using
# the symbols XXX_EXTRA_LIB_INCLUDES, XXX_EXTRA_LIB_OPTIONS, and
# XXX_EXTRA_LIB_CC_FLAGS, XXX_EXTRA_LIB_CC_FLAGS, and XXX_EXTRA_LIB_CC_FLAGS.
#

${VERBOSE_ECHO_2} "${KJB_VERBOSE_INDENT}Script build_makefile_libs_needed_2 part four."

set used_libs = ""
set first_item = 1

foreach optional_lib_group (${OPTIONAL_LIBS})
    # echo optional_lib_group: $optional_lib_group
    set lib_group = `echo ${optional_lib_group} | sed 's/\(.*\):.*/\1/'`
    # echo lib_group:$lib_group

    set grep_str = `echo ${optional_lib_group} | sed 's/.*:\(.*\)/\1/'`
    # echo grep_str: $grep_str

    set lib_list = `echo ${lib_group} | sed 's/\./ /g'`

    foreach lib ($lib_list)
        # echo lib:$lib 
        
        #
        # Check if have already got this one. Note that finding the include
        # (grep_str_2) means that we will also have done HAVE. 
        #
        set found = 0
        foreach test_lib (${used_libs}) 
            if ("${test_lib}" == "${lib}") then
                set found = 1
                break
            endif 
        end
        if (${found}) continue

        unset noglob
        set grep_res = `grep -l "\<${grep_str}\>" Include_lines/include_lines`
        # echo grep_res: $grep_res
        set noglob 

        if ("${grep_res}" != "") then
            set used_libs = "${used_libs} ${lib}"

            if (${first_item}) then
                set first_item = 0

                echo  " " >> ${output_file_name}
                echo  "# These symbols propagate external link libraries corresponding to #includes." >> ${output_file_name}
                echo  "# They are instantiated in NEED_LIBS in Makefile-program." >> ${output_file_name}
                echo  "#" >> ${output_file_name}
            endif 

            echo "NEED_LIB_${lib} = "'$'"(LIB_${lib})" >> ${output_file_name}

            set include = INCLUDE_${lib}
            set options = OPTIONS_${lib} 
            set cc_flags = CC_FLAGS_${lib}

            set include_env_str =  '$'"(${include})"
            set options_env_str =  '$'"(${options})"
            set cc_flags_env_str = '$'"(${cc_flags})"

            set need_include = "${need_include} ${include_env_str}"
            set need_options = "${need_options} ${options_env_str}" 
            set need_cc_flags = "${need_cc_flags} ${cc_flags_env_str}"
        endif 
    end
end

if ( ! ${first_item}) then
    echo  " " >> ${output_file_name}
    echo  " " >> ${output_file_name}
    echo  "# These symbols provide non-standard include dir locations of external libraries" >> ${output_file_name}
    echo  "# corresponding to #includes found in this directory." >> ${output_file_name}
    echo  "#" >> ${output_file_name}

    echo "${lib_prefix}EXTRA_LIB_INCLUDES = ${need_include}" >> ${output_file_name}
    echo "${lib_prefix}EXTRA_LIB_OPTIONS = ${need_options}" >> ${output_file_name}
    echo "${lib_prefix}EXTRA_LIB_CC_FLAGS = ${need_cc_flags}" >> ${output_file_name}
endif 

# #############################################################################
# 
# Part five: In either the KJB_HAVE_XXX or a #include for an external library is
# in a header file, then we need to makes sure that any code that includes
# header files in this directory will know about any KJB_HAVE_XXX or
# non-standard include directories needed to compile. This is done using the
# symbol(s) WITH_LIBS_HAVE_XXX that propagates compile information, much like
# NEED_LIB_XXX propagates linking information. 
    
${VERBOSE_ECHO_2} "${KJB_VERBOSE_INDENT}Script build_makefile_libs_needed_2 part five."

set have_header_files = `${MAKE_SCRIPT_PATH}stream_file_names -h Include_lines -t`
set first_with_libs_have = 1 

if ("${have_header_files}" != "") then
    set with_libs_used = "" 

    foreach optional_lib_group (${OPTIONAL_LIBS})
        # echo 
        # echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        # echo optional_lib_group: $optional_lib_group
        set lib_group = `echo ${optional_lib_group} | sed 's/\(.*\):.*/\1/'`
        # echo lib_group:$lib_group

        set grep_str_2 = `echo ${optional_lib_group} | sed 's/.*:\(.*\)/\1/'`
        # echo grep_str_2: $grep_str_2

        set lib_list = `echo ${lib_group} | sed 's/\./ /g'`

        foreach lib ($lib_list)
            # echo 
            # echo YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
            # echo lib:$lib 
            
            set found = 0
            foreach with_lib_used (${with_libs_used}) 
                if ("${with_lib_used}" == "${lib}") then
                    set found = 1
                    break
                endif
            end

            if ($found) then
                # echo "Found in ones already used."
                continue
            endif 

            # echo "Not found in ones already used."

            set have_str = HAVE_${lib}
            set grep_str = "KJB_${have_str}"
            # echo grep_str: $grep_str
            
            unset noglob
            set grep_h_res = `grep -l "\<${grep_str}\>" Include_lines/*.h  Include_lines/*.[hit]pp`
            # echo grep_h_res: $grep_h_res
            set grep_2_h_res = `grep -l "\<${grep_str_2}\>" Include_lines/*.h  Include_lines/*.[hit]pp`
            # echo grep_2_h_res: $grep_2_h_res
            set noglob 

            if (("${grep_h_res}" != "") || ("${grep_2_h_res}" != "")) then
                set with_libs_used = "${with_libs_used} ${lib}" 
                
                # echo 
                # echo ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
                # echo lib: $lib

                set include = INCLUDE_${lib}
                set options = OPTIONS_${lib}
                set cc_flags = CC_FLAGS_${lib}

                set have_env_str = '$'"(KJB_${have_str})"
                set include_env_str =  '$'"(${include})"
                set options_env_str =  '$'"(${options})"
                set cc_flags_env_str = '$'"(${cc_flags})"

                if (${first_with_libs_have}) then
                    set first_with_libs_have = 0

                    echo " "  >> ${output_file_name}
                    echo " "  >> ${output_file_name}
                    echo "# Symbols defined when either the include for an optional lib or the KJB_HAVE_XXX was found in a header file." >> ${output_file_name}
                    echo "# Here a component relying on this component may need extra information passed via WITH_LIBS_XXX."  >> ${output_file_name}
                    echo "# "  >> ${output_file_name}
                endif 

                echo "WITH_LIBS_${have_str} = ${have_env_str} ${include_env_str} ${options_env_str} ${cc_flags_env_str}" >> ${output_file_name}
            endif 
        end
    end
endif 

echo " "  >> ${output_file_name}
echo " "  >> ${output_file_name}

${VERBOSE_ECHO_2} "${KJB_VERBOSE_INDENT}Script build_makefile_libs_needed_2 wrapping up."

set is_lib = `echo ${cwd} | grep -c '^.*/lib/[^/][^/]*$'`

if (${is_lib}) then
    set symbolic_lib = `echo ${cwd} | sed 's#^.*/lib/\([^/][^/]*\)#\1#' | sed "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/" | sed "s/-/__/g"`
    set symbolic_lib = '$('${symbolic_lib}_DIR')'
else 
    set symbolic_lib = ""
endif 

# Perhaps issues with parallel make? 
# Our constructed Makefile-depend has many (all?) objects depending on the
# cache.state file, which depends on the variable cache. If we are running into
# problems, then we may need to redo this a bit. 
#
set cache_depend = '$(VAR_CACHE_FNAME)'
echo ${symbolic_lib}Include_lines/cache.state : ${cache_depend} >> ${output_file_name}
echo '	$(KJB_TOUCH) $@' >> ${output_file_name}
echo " "  >> ${output_file_name}

if (-e Makefile-libs-needed) then
    echo " "
    echo "Moving Makefile-libs-needed, which must of been created by a different process, to Makefile-libs-needed-SAVE.$$."
    ${KJB_MV} Makefile-libs-needed Makefile-libs-needed-SAVE.$$ 
    echo "Directory is ${cwd}."
    echo " "
endif 

${KJB_MV} ${output_file_name} Makefile-libs-needed

unset noglob 

${KJB_RM} .missing_includes
${KJB_RM} Makefile-libs-needed-depend
${KJB_RM} Makefile-libs-needed-depend.bak

cleanup:

${VERBOSE_ECHO} "${KJB_VERBOSE_INDENT}Process $$ locked by ${ppid} leaving script build_makefile_libs_needed_2."




