#!/bin/csh -f

################################################################################
# 
# This script builds a file called Makefile-dirs in the directory given by the
# last parameter which gets bound to the variable build_dir. If that parameter
# is not set or emply, then we build in the current directory. 
#
# Much of what is needed for this file comes from Include_lines/sub_libs_needed.
# We first build the part that can be done without
# Include_lines/sub_libs_needed. If Include_lines/sub_libs_needed exists, we
# then create entries for each of the sub libs. Note that the items in
# Include_lines/sub_libs_needed are ordered so that all items have all their
# dependencies preceeding them. 
#
# We export symbols for directory separator (e.g., '/') so as not to restrict to
# unix (although it has been a while since this has been relavent). 
#
################################################################################

# set echo

@ num_args = ${#argv}

# echo num_args: ${num_args}

if ("${num_args}" > 1) then
    ${P_STDERR} "Script build_makefile_dirs needs 0 or 1 parameters."
    exit 1
endif 

if ($?KJB_VERBOSE_INDENT) then
    setenv KJB_VERBOSE_INDENT "    ${KJB_VERBOSE_INDENT}"
else 
    setenv KJB_VERBOSE_INDENT ""
endif 

if ($?KJB_VERBOSE) then
    echo "${KJB_VERBOSE_INDENT}Entering script build_include_lines in directory ${cwd} with args '$*'."
endif

set build_dir = ""
# set dir_arg = ""

if ("${num_args}" >= 1) then
    if ("${1}" != "") then
        # set dir_arg = "$1"
        set build_dir = `echo ${1} | sed 's/ *//g'`
    endif 
endif 

if ("${build_dir}" != "") then
    set build_dir = `echo ${build_dir} | sed 's#///*#/#g' | sed 's#/$##'`
    cd ${build_dir}
endif 

${MAKE_SCRIPT_PATH}kjb_lock ${MAKE_SCRIPT_PATH}build_makefile_dirs_2 
set exit_status = ${status}

if ($?KJB_VERBOSE) then
    echo "${KJB_VERBOSE_INDENT}Leaving script build_include_lines in directory ${cwd} with status ${exit_status}."
endif

exit ${exit_status} 


# ##########################################################
# 
# set src_dir_sed_str = "s#${KJB_SRC_PATH}#"'$(KJB_SRC_PATH)'"#"
# set parent_dir_sed_str = "s#\.\./#"'$(KJB_PARENT_DIR_STR)'"#g"
# set cur_dir_sed_str = "s#\./#"'$(KJB_CUR_DIR_STR)'"#g"
# set dir_str_sed_str = "s#/#"'$(KJB_DIR_STR)'"#g"
# 
# set real_kjb_lib_dir = `echo ${KJB_LIB_PATH} | sed 's/\/*$//'`
# 
# ##########################################################
# 
# 
# set build_dir_path = "${cwd}"
# 
# if ($?KJB_VERBOSE) then
#     echo " "
#     echo "${KJB_VERBOSE_INDENT}Entering script build_makefile_dirs with directory ${build_dir_path}."
# endif
# 
# ##########################################################
# 
# set count = 0
# # Wait up to N seconds to get the lock. 
# set wait_in_seconds = 10 
# while (${count} < ${wait_in_seconds})
#     if (-e "${lock_file}") then
#         set test_pid = `cat "${lock_file}"`
#         ps $test_pid >& /dev/null
#         if ${status} then 
#             if ($?KJB_DEBUG) then
#                 echo " "
#                 echo "##################################################################### "
#                 echo " "
#                 echo "${KJB_VERBOSE_INDENT}Script build_makefile_dirs process $$ ignoring lock file in ${build_dir_path}"
#                 echo "${KJB_VERBOSE_INDENT}because the process that created it no longer exists. "
#                 echo " "
#                 echo "##################################################################### "
#                 echo " "
#             endif 
# 
#             break
#         else if (${count} == 0) then
#             if ($?KJB_DEBUG) then
#                 echo " "
#                 echo "##################################################################### "
#                 echo " "
#                 echo "${KJB_VERBOSE_INDENT}Script build_makefile_dirs process $$ found a lock file in ${build_dir_path}."
#                 echo "${KJB_VERBOSE_INDENT}Current files:"
#                 /bin/ls 
#                 echo " "
#                 echo "##################################################################### "
#                 echo " "
#             endif 
#         else 
#             if ($?KJB_DEBUG) then
#                 echo " "
#                 echo "##################################################################### "
#                 echo " "
#                 echo "${KJB_VERBOSE_INDENT}Script build_makefile_dirs process $$ still waiting ${count}/${wait_in_seconds}"
#                 echo " "
#                 echo "##################################################################### "
#                 echo " "
#             endif 
#         endif 
# 
#         sleep 1
#     else 
#         if (${count} > 0) then
#             if ($?KJB_DEBUG) then
#                 echo " "
#                 echo "##################################################################### "
#                 echo " "
#                 echo "${KJB_VERBOSE_INDENT}Script build_makefile_dirs process $$ got the lock on cycle ${count}"
#                 echo "##################################################################### "
#                 echo " "
#             endif 
#         endif 
# 
#         break
#     endif 
# 
#     @ count += 1
# end
# 
# if (${count} == "${wait_in_seconds}") then
#     if ($?KJB_DEBUG) then
#         echo " "
#         echo "##################################################################### "
#         echo "${KJB_VERBOSE_INDENT}Script build_makefile_dirs process $$ timed out on the lock"
#         echo "##################################################################### "
#         echo " "
#     endif 
# endif 
# 
# echo $$ > "${lock_file}"
# 
# ##########################################################
# 
# set local_include_dirs = `${MAKE_SCRIPT_PATH}get_local_include_dirs | sed "${parent_dir_sed_str}" | sed "${cur_dir_sed_str}" | sed "${dir_str_sed_str}"`
# 
# if (${status}) then
#     ${P_STDERR} "Script get_local_include_dirs failed in script build_makefile_dirs."
#     ${KJB_RM} "${lock_file}"
#     exit 1 
# endif
# 
# # echo local_include_dirs: ${local_include_dirs}
# 
# 
# # It is possible that this script can be run in two threads due to imperfections
# # in the build system. So we reduce the chance of conflicts, and enable printing
# # a message when this occurs, by building the results in a temporary file. 
# #
# ${KJB_RM} Makefile-dirs
# set output_file_name = Makefile-dirs.$$
# 
# echo  " " > ${output_file_name}
# echo  "# Generated by the script build_makefile_dirs " >> ${output_file_name}
# echo  " " >> ${output_file_name}
# echo  " " >> ${output_file_name}
# 
# # FIXME
# #
# # If we are doing KJB load and go, or perhaps building makefiles for a program
# # that does need the KJB library, then we produce this line anyway which is
# # confusing. 
# #
# 
# set local_pch_include_dirs = ""
# foreach include_dir (${local_include_dirs})
#     set local_pch_include_dirs = "${local_pch_include_dirs} ${include_dir}"'$(DIR_STR)$(PCH_DIR)'
# end
# 
# echo "BASE_INCLUDES = ${local_pch_include_dirs} -I"'$(KJB_LIB_PATH)$(PCH_DIR)'" ${local_include_dirs} -I"'$(KJB_LIB_PATH)' >> ${output_file_name}
# 
# echo  " " >> ${output_file_name}
# echo  " " >> ${output_file_name}
#     
# 
# # #############################################################################
# 
# set cwd_for_make = `echo ${cwd} | sed "${src_dir_sed_str}" | sed "${dir_str_sed_str}"`
# 
# if (-e Makefile-include) then
#     # We assume that we are a sub-dir of a directory "lib", and that we are not
#     # beeing too fancy with links. Perhaps we should CHECK! 
#     #
#     set lib_dir = `echo ${build_dir_path} | sed 's#\(.*/lib\)/\([^/]*\)$#\1#' | sed "${src_dir_sed_str}" `
#     set lib_sub_dir = `echo ${build_dir_path} | sed 's#.*/lib/\([^/]*\)$#\1#'`
#     set uc_lib_sub_dir = `echo "${lib_sub_dir}" | sed "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"`
#     set uc_lib_sub_dir = `echo "${uc_lib_sub_dir}" | sed "s/-/__/g"` 
# 
#     set in_kjb_lib_sub_dir = 0
# 
#     if (-d ${real_kjb_lib_dir}) then
#         pushd ${real_kjb_lib_dir} > /dev/null
#             if (${status}) then 
#                 exit 1 
#                 ${KJB_RM} "${lock_file}"
#             endif 
#             set real_kjb_lib_path = "${cwd}"
#         popd > /dev/null
# 
#         if ("${real_kjb_lib_path}/${lib_sub_dir}" == "${build_dir_path}") then
#            set in_kjb_lib_sub_dir = 1
#         endif 
#     endif 
# 
#     #
#     # The first case is for KJB library sub-dirs. Then we handle local
#     # library sub-dirs. 
#     #
#     if (${in_kjb_lib_sub_dir}) then
#         echo "${uc_lib_sub_dir}_DIR = "'$(KJB_LIB_DIR)'${lib_sub_dir}'$(KJB_DIR_STR)' >> ${output_file_name}
#     else 
#         echo "${uc_lib_sub_dir}_DIR = ${cwd_for_make}"'$(KJB_DIR_STR)' >> ${output_file_name}
#     endif 
#     
#     #
#     # The first case is for KJB library sub-dirs. Then we handle local
#     # library sub-dirs. 
#     #
#     if (${in_kjb_lib_sub_dir}) then
#         echo  "REAL_${uc_lib_sub_dir}_DIR = "'$(KJB_LIB_PATH)'${lib_sub_dir}'$(KJB_DIR_STR)' >> ${output_file_name}
#     else 
#         echo  "REAL_${uc_lib_sub_dir}_DIR = ${cwd_for_make}"'$(KJB_DIR_STR)' >> ${output_file_name}
#     endif 
# 
#     #
#     # The first case is for KJB library sub-dirs. Then we handle local
#     # library sub-dirs. 
#     #
#     if (${in_kjb_lib_sub_dir}) then
#         echo "${uc_lib_sub_dir}_LIB_PARENT_DIR = "'$(KJB_LIB_DIR)' >> ${output_file_name}
#     else 
#         echo "${uc_lib_sub_dir}_LIB_PARENT_DIR = ${lib_dir}" >> ${output_file_name}
#     endif 
#   
#     #
#     # The first case is for KJB library sub-dirs. Then we handle local
#     # library sub-dirs. 
#     #
#     if (${in_kjb_lib_sub_dir}) then
#         echo  "PCH_${uc_lib_sub_dir}_DIR = "'$(KJB_LIB_PATH)$(PCH_DIR)'${lib_sub_dir}'$(KJB_DIR_STR)' >> ${output_file_name}
#     else
#         echo  "PCH_${uc_lib_sub_dir}_DIR = ${lib_dir}"'$(KJB_DIR_STR)$(PCH_DIR)'${lib_sub_dir}'$(KJB_DIR_STR)' >> ${output_file_name}
#     endif 
# 
#     echo  " " >> ${output_file_name}
# endif
# 
# # #############################################################################
# #
# # Test for building either a program or libKJB.a itself? 
# #
# set in_kjb_dir = 0
# 
# if ((-e "kjb.h") || (-e "KJB.h") || (-e "kjb_all_c.h") || (-e "kjb_cpp.h") || (-e "KJB_cpp.h") || (-e "kjb_all_cpp.h") ) then
#     set test_main = "PHONY"
# else 
#     set test_main = `${MAKE_SCRIPT_PATH}stream_file_names -m`
#     if (${status}) then
#         ${KJB_RM} "${lock_file}"
#         ${P_STDERR} "Script stream_file_names failed with option -m in script build_makefile_dirs."
#         exit 1
#     endif 
# 
#     if ("${test_main}" != "") then
#         if (-e Makefile-include) then
#             echo "Warning: Found both a main module and Makefile-include in directory ${build_dir_path}"
#         endif 
#     endif 
# endif 
# 
# ##########################################################
# 
# if (! -e Include_lines/sub_libs_needed) then
#     if ($?KJB_VERBOSE) then
#         echo " "
#         echo "${KJB_VERBOSE_INDENT}Leaving script build_makefile_dirs early due to no sub_libs_needed."
#     endif
# 
#     ${KJB_RM} "${lock_file}"
#     exit 0
# endif 
# 
# ##########################################################
# 
# set libs_needed = `/bin/cat Include_lines/sub_libs_needed`
# 
# set lib_count = ${#libs_needed}
# 
# echo  " " >> ${output_file_name}
# echo  " " >> ${output_file_name}
# 
# # Deal with the fact that if there are no KJB sub libs, then we don't want to
# # try to make the archive. In this case, KJB_LIB_ARCHIVE will default to the
# # empty string. Otherwise (the usual case) we need to set it. 
# #
# if (("${test_main}" != "") && ("${test_main}" != "PHONY") && (${lib_count} > 0)) then
#     echo 'KJB_LIB_ARCHIVE = $(LD_OBJ_DIR)libKJB.a' >> ${output_file_name}
#     echo 'KJB_LIB_LINK_STR = -lKJB' >> ${output_file_name}
#     echo  " " >> ${output_file_name}
#     echo  " " >> ${output_file_name}
# endif 
# 
# 
# set count = 1
# 
# set depend_dirs = ()
# set archives = ()
# set lib_ld_strings = ()
# set symbolic_dirs = ()
# set real_dirs = ()
# set uc_dirs = ()
# set lc_dirs = ()
# 
# while ($count <= $lib_count) 
#     set dir = ${libs_needed[$count]}
#     set lc_dir = "${dir}"
#     set lc_dir = `echo "${lc_dir}" | sed "s/-/__/"`
#     set uc_dir = `echo "${lc_dir}" | sed "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"`
# 
#     set symbolic_dir = "${uc_dir}_DIR"
# 
#     if (-e "${real_kjb_lib_dir}/${dir}") then
#         echo "${symbolic_dir} = "'$(KJB_LIB_PATH)'"${dir}"'$(KJB_DIR_STR)' >> ${output_file_name}
#         echo "REAL_${symbolic_dir} = "'$(KJB_LIB_PATH)'"${dir}"'$(KJB_DIR_STR)' >> ${output_file_name}
#         echo "PCH_${symbolic_dir} = "'$(KJB_LIB_PATH)$(PCH_DIR)'"${dir}"'$(KJB_DIR_STR)' >> ${output_file_name}
#         echo "${uc_dir}_LIB_PARENT_DIR = "'$(KJB_LIB_PATH)' >> ${output_file_name}
#         set real_dir = "${real_kjb_lib_dir}/${dir}"
#     else if (-d "lib/${dir}")  then
#         set real_dir = "lib/${dir}"
# 
#         pushd lib > /dev/null
#         if (${status}) then 
#             ${KJB_RM} "${lock_file}"
#             exit 1 
#         endif 
# 
#         set lib_dir_for_make = `echo ${cwd} | sed "${src_dir_sed_str}" | sed "${dir_str_sed_str}"`
# 
#         pushd ${dir} > /dev/null
#         if (${status}) then 
#             ${KJB_RM} "${lock_file}"
#             exit 1 
#         endif 
# 
#         set sub_dir_for_make = `echo ${cwd} | sed "${src_dir_sed_str}" | sed "${dir_str_sed_str}"`
# 
#         popd > /dev/null 
#         popd > /dev/null 
# 
#         echo "${symbolic_dir} = ${sub_dir_for_make}"'$(KJB_DIR_STR)' >> ${output_file_name}
#         echo "REAL_${symbolic_dir} = ${sub_dir_for_make}"'$(KJB_DIR_STR)' >> ${output_file_name}
#         echo "PCH_${symbolic_dir} = ${lib_dir_for_make}"'$(KJB_DIR_STR)''$(PCH_DIR)'"${dir}"'$(KJB_DIR_STR)' >> ${output_file_name}
#         echo "${uc_dir}_LIB_PARENT_DIR = ${lib_dir_for_make}"'$(KJB_DIR_STR)' >> ${output_file_name}
#     else 
#         # This is pretty suspect, and I am not sure when it is used. Best to do
#         # it differently. The patch for the case that the directory that we are
#         # building Makefile-dirs for is a sub-dir of a lib dir is handled above.
#         # These two code bits should be the same (they are not), although it is
#         # not clear that either is sufficiently robust. 
# 
#         set parent_dir = "../"
# 
#         set iteration = 0
#         set found = 0
# 
#         while (${iteration} < 5) 
#             set real_dir = "${parent_dir}lib/${dir}"
# 
#             if (-e ${real_dir}) then
#             if (-d ${real_dir}) then
#                 pushd ${parent_dir}lib > /dev/null
#                 if (${status}) then 
#                     ${KJB_RM} "${lock_file}"
#                     exit 1 
#                 endif 
# 
#                 set lib_dir_for_make = `echo ${cwd} | sed "${src_dir_sed_str}" | sed "${dir_str_sed_str}"`
# 
#                 pushd ${dir} > /dev/null
#                 if (${status}) then 
#                     ${KJB_RM} "${lock_file}"
#                     exit 1 
#                 endif 
# 
#                 set sub_dir_for_make = `echo ${cwd} | sed "${src_dir_sed_str}" | sed "${dir_str_sed_str}"`
#                 set found = 1
# 
#                 popd > /dev/null 
#                 popd > /dev/null 
#             endif
#             endif 
# 
#             if (${found}) break
# 
#             set parent_dir = "${parent_dir}../" 
#             @ iteration ++
#         end
# 
#         if (${found}) then
#             echo "${symbolic_dir} = ${sub_dir_for_make}"'$(KJB_DIR_STR)' >> ${output_file_name}
#             echo "REAL_${symbolic_dir} = ${sub_dir_for_make}"'$(KJB_DIR_STR)' >> ${output_file_name}
#             echo "PCH_${symbolic_dir} = ${lib_dir_for_make}"'$(KJB_DIR_STR)''$(PCH_DIR)'"${dir}"'$(KJB_DIR_STR)' >> ${output_file_name}
#             echo "${uc_dir}_LIB_PARENT_DIR = ${lib_dir_for_make}" >> ${output_file_name}
#         else 
#             ${KJB_RM} "${lock_file}"
#             ${P_STDERR} "Library string ${dir} processed by build_makefile_dirs is not in"
#             ${P_STDERR} "either ${real_kjb_lib_dir} or ${build_dir_path}/lib or ${build_dir_path}/../../lib"
#             exit 1
#         endif 
#     endif 
#     
#     echo " " >> ${output_file_name}
# 
#     set symbolic_dirs = (${symbolic_dir} ${symbolic_dirs})
#     set archives = (${uc_dir}_LIB_ARCHIVE ${archives})
#     set lib_ld_strings = (${uc_dir}_LIB_LD ${lib_ld_strings})
#     set real_dirs = (${real_dir} ${real_dirs})
#     set uc_dirs = (${uc_dir} ${uc_dirs})
#     set lc_dirs = (${lc_dir} ${lc_dirs})
# 
#     @ count ++
# end 
# 
# echo " " >> ${output_file_name}
# echo  " " >> ${output_file_name}
# 
# @ count = $lib_count
# 
# while ($count > 0) 
#     set symbolic_dir = $symbolic_dirs[$count]
#     echo 'include $'"(${symbolic_dir})Makefile-include" >> ${output_file_name}
#     @ count --
# end 
# 
# echo " " >> ${output_file_name}
# echo " " >> ${output_file_name}
# 
# 
# # if (("${test_main}" != "") || (${in_kjb_dir})) then
# #     @ count = 1
# # 
# #     while ($count <= $lib_count) 
# #         if ($count == 1) then
# #             echo 'KJB_SUB_LIB_ARCHIVES = \' >> ${output_file_name}
# #         endif 
# # 
# #         set archive = $archives[$count]
# # 
# #         if ($count < $lib_count) then
# #             echo "               "'$'"($archive) "'\' >> ${output_file_name}
# #         else 
# #             echo "               "'$'"($archive) "'' >> ${output_file_name}
# #         endif 
# #          
# #         @ count ++
# #     end 
# # 
# #     echo  " " >> ${output_file_name}
# # endif 
# 
# # 2019/06/08: We need to do this block if there is any chance that we might want
# # to do a "make shared" or "make static". The old criterion was too strict.
# # Trying a simpler one, as if we were to build libraries in a lib dir we would
# # have additional work to do to get the sub modules anyway. 
# #
# if (! -e Makefile-include) then
# # if (("${test_main}" != "") || (${in_kjb_dir})) then
# if (${lib_count} > 0) then
#     #
#     # We either use a local libs of OBS, or a big list of OBS, or patterns that
#     # are expanded to them. The local lib version has the smallest list size. 
#     #
#     # TODO (FIXME): 
#     #     Even if we use the local sub libs for the archive, we still use the
#     #     big list of OBS for SHARED. 
#     #
#     set use_local_sub_libs = 1
#     set use_sub_lib_list = 1
# 
#     if (${use_local_sub_libs}) then 
#         @ count = 1
# 
#         while ($count <= $lib_count) 
#             if ($count == 1) then
#                 echo 'SUB_LIB_OBS = \' >> ${output_file_name}
#             endif 
# 
#             set uc_dir = $uc_dirs[$count]
#             echo "               "'$'"(${uc_dir}_LIB_LOCAL_OBS) \" >> ${output_file_name}
#              
#             @ count ++
#         end 
# 
#         echo  "               "'$(NULL_TO_END_LIST)' >> ${output_file_name}
#         echo  " " >> ${output_file_name}
# 
# 
#         @ count = 1
# 
#         while ($count <= $lib_count) 
#             if ($count == 1) then
#                 echo 'SUB_LIB_SHARED_OBS = \' >> ${output_file_name}
#             endif 
# 
#             set uc_dir = $uc_dirs[$count]
#             echo "               "'$'"(${uc_dir}_LIB_SHARED_OBS) \" >> ${output_file_name}
#              
#             @ count ++
#         end 
# 
#         echo  "               "'$(NULL_TO_END_LIST)' >> ${output_file_name}
#         echo  " " >> ${output_file_name}
#     else if (${use_sub_lib_list}) then 
#         @ count = 1
# 
#         while ($count <= $lib_count) 
#             if ($count == 1) then
#                 echo 'SUB_LIB_OBS = \' >> ${output_file_name}
#             endif 
# 
#             set uc_dir = $uc_dirs[$count]
#             echo "               "'$'"(${uc_dir}_LIB_OBS) \" >> ${output_file_name}
#              
#             @ count ++
#         end 
# 
#         echo  "               "'$(NULL_TO_END_LIST)' >> ${output_file_name}
#         echo  " " >> ${output_file_name}
# 
# 
#         @ count = 1
# 
#         while ($count <= $lib_count) 
#             if ($count == 1) then
#                 echo 'SUB_LIB_SHARED_OBS = \' >> ${output_file_name}
#             endif 
# 
#             set uc_dir = $uc_dirs[$count]
#             echo "               "'$'"(${uc_dir}_LIB_SHARED_OBS) \" >> ${output_file_name}
#              
#             @ count ++
#         end 
# 
#         echo  "               "'$(NULL_TO_END_LIST)' >> ${output_file_name}
#         echo  " " >> ${output_file_name}
#     else 
#         @ count = 1
# 
#         while ($count <= $lib_count) 
#             if ($count == 1) then
#                 echo 'SUB_LIB_OBS = \' >> ${output_file_name}
#             endif 
# 
#             set symbolic_dir = $symbolic_dirs[$count]
# 
#             set have_c = `${MAKE_SCRIPT_PATH}stream_file_names -c $real_dirs[$count] | grep -c "."`
# 
#             set have_cxx = `${MAKE_SCRIPT_PATH}stream_file_names -x $real_dirs[$count] | grep -c "."`
# 
#             if ("${have_cxx}" != "0") then
#                 echo "               "'$'"($symbolic_dir)"'$(CXX_OBJ_DIR)*.o \' >> ${output_file_name}
#             endif 
#              
#             if ("${have_c}" != "0") then
#                 echo "               "'$'"($symbolic_dir)"'$(OBJ_DIR)*.o \' >> ${output_file_name}
#             endif 
#              
#             @ count ++
#         end 
# 
#         echo  "               "'$(NULL_TO_END_LIST)' >> ${output_file_name}
#         echo  " " >> ${output_file_name}
#     endif 
# endif 
# endif 
# 
# ###############################################################################
# 
# @ count = $lib_count
# 
# echo  " " >> ${output_file_name}
# 
# while ($count > 0) 
#     echo 'Include_lines/sub_libs_needed : $('"${symbolic_dirs[$count]}"')'Include_lines/sub_libs_needed  >> ${output_file_name}
#     @ count --
# end 
# 
# echo  " " >> ${output_file_name}
# echo  " " >> ${output_file_name}
# 
# ###############################################################################
# 
# # We used to make Makefile-depend depend on <sub_lib_dir>_incl.h, but this is
# # not necessary because the dependencies do not go inside that file. On the
# # other hand, since we are currently using that file to represent the time stamp
# # of its members through touch, such a dependency would cause makefile
# # rebuilding if an dot h in the incl files touched. 
# #
# 
# # @ count = $lib_count
# # 
# # echo  " " >> ${output_file_name}
# # 
# # while ($count > 0) 
# #     # echo 'Makefile-depend : $('"${symbolic_dirs[$count]}"')'Include_lines/Makefile-depend-incl-dot-h   >> ${output_file_name}
# #     echo 'Makefile-depend : $('"${symbolic_dirs[$count]}"')'"${lc_dirs[$count]}_incl.h"   >> ${output_file_name}
# #     @ count --
# # end 
# # 
# # echo  " " >> ${output_file_name}
# # echo  " " >> ${output_file_name}
# 
# ###############################################################################
# 
# # It is not clear if we want to make doc in sub-libs of sub-libs, but whatever
# # we choose, it needs to apply to both DOC_DIR_MADE_TARGETS below and the
# # up_to_date targets here.
# #
# if ("${test_main}" != "") then
#     @ count = $lib_count
# 
#     while ($count > 0) 
#         echo '$(MAKE_DOC_DIR)up_to_date : $('"${symbolic_dirs[$count]}"')$(MAKE_DOC_DIR)'"up_to_date"   >> ${output_file_name}
#         @ count --
#     end 
# 
#     echo  " " >> ${output_file_name}
# endif 
# 
# ###############################################################################
# 
# # This should no longer be needed because the included library makefiles now
# # have the "convenience" target "tags". 
# #
# # @ count = $lib_count
# # 
# # while ($count > 0) 
# #     echo "tags : "'$('"${symbolic_dirs[$count]}"')'"tags"   >> ${output_file_name}
# #     @ count --
# # end 
# # 
# # echo  " " >> ${output_file_name}
# 
# ###############################################################################
# 
# @ count = 1
# 
# while ($count <= $lib_count) 
#     if ($count == 1) then
#         echo -n 'DEPEND_TARGETS = ' >> ${output_file_name}
#     endif 
# 
#     echo -n "depend_${lc_dirs[$count]} " >> ${output_file_name}
#      
#     @ count ++
# end 
# 
# echo  " " >> ${output_file_name}
# echo  " " >> ${output_file_name}
# 
# ###############################################################################
# 
# @ count = 1
# 
# while ($count <= $lib_count) 
#     if ($count == 1) then
#         echo -n 'DIR_MADE_TARGETS = ' >> ${output_file_name}
#     endif 
# 
#     echo -n "dir_made_${lc_dirs[$count]} " >> ${output_file_name}
#      
#     @ count ++
# end 
# 
# echo  " " >> ${output_file_name}
# echo  " " >> ${output_file_name}
# 
# ###############################################################################
# 
# # It is not clear if we want to make doc in sub-libs of sub-libs, but whatever
# # we choose, it needs to apply to both DOC_DIR_MADE_TARGETS here and the
# # up_to_date targets above.
# #
# if ("${test_main}" != "") then
#     @ count = 1
# 
#     while ($count <= $lib_count) 
#         if ($count == 1) then
#             echo -n 'DOC_DIR_MADE_TARGETS = ' >> ${output_file_name}
#         endif 
# 
#         echo -n "doc_dir_made_${lc_dirs[$count]} " >> ${output_file_name}
#          
#         @ count ++
#     end 
# 
#     echo  " " >> ${output_file_name}
#     echo  " " >> ${output_file_name}
# 
#     ###########################################
#    
#     #
#     # We used to do it this way, but having the dependency being a true target
#     # seems better. 
#     #
# #     @ count = 1
# # 
# #     while ($count <= $lib_count) 
# #         if ($count == 1) then
# #             echo -n 'DOC_TARGETS = ' >> ${output_file_name}
# #         endif 
# # 
# #         echo -n "doc_${libs_needed[$count]} " >> ${output_file_name}
# #          
# #         @ count ++
# #     end 
# # 
# #     echo  " " >> ${output_file_name}
# #     echo  " " >> ${output_file_name}
# endif 
# 
# ###############################################################################
# 
# # @ count = 1
# # 
# # while ($count <= $lib_count) 
# #     if ($count == 1) then
# #         echo -n 'TAGS_TARGETS = ' >> ${output_file_name}
# #     endif 
# # 
# #     echo -n "tags_${libs_needed[$count]} " >> ${output_file_name}
# #      
# #     @ count ++
# # end 
# # 
# # echo  " " >> ${output_file_name}
# # echo  " " >> ${output_file_name}
# 
# ###############################################################################
# 
# # if ("${test_main}" != "") then
#     @ count = 1
# 
#     while ($count <= $lib_count) 
#         if ($count == 1) then
#             echo -n 'CLEAN_TARGETS = ' >> ${output_file_name}
#         endif 
# 
#         echo -n "clean_${lc_dirs[$count]} " >> ${output_file_name}
#          
#         @ count ++
#     end 
# # endif 
# 
# 
# echo  " " >> ${output_file_name}
# echo  " " >> ${output_file_name}
# 
# if (-e Makefile-dirs) then
#     echo " "
#     echo "Moving Makefile-dirs, which must of been created by a different process, to Makefile-dirs-SAVE.$$."
#     echo "Directory is ${cwd}."
#     echo " "
#     ${KJB_MV} Makefile-dirs Makefile-dirs-SAVE.$$ 
#     echo " "
# endif 
# 
# ${KJB_MV} ${output_file_name} Makefile-dirs
# 
# echo "${KJB_VERBOSE_INDENT}Makefile-dirs installed in ${cwd} by process $$."
# 
# bail:
# 
# if ($?KJB_DEBUG) then
#     if (-e "${lock_file}") then 
#         echo "${KJB_VERBOSE_INDENT}Script build_makefile_dirs process $$ removing the lock file."
#         echo " "
#     endif 
# endif 
# 
# ${KJB_RM} "${lock_file}"
# 
# if ($?KJB_VERBOSE) then
#     echo "${KJB_VERBOSE_INDENT}Leaving script build_makefile_dirs in ${build_dir_path}."
#     echo " "
# endif
# 
# 
# 
