#!/bin/tcsh -f

###############################################################################
#
# Identification:
#     A script to reset the location ids of mac dylibs and to patch lib refs
#
# Description:
#     On mac OS, dylibs have strings that declare where they
#     should be (e.g., the path where the linker should look for them). If you
#     move them, then you have an inconsistency that can cause you grief, as
#     the library might not be found at run time (even though you tell the
#     linker where it is), or the wrong version will be loaded at run time. This
#     script fixes this, if it is fixable, which is why we report a before and
#     after. 
#
#     This script needs to be executed in the directory where the libraries are,
#     even if they are links. 
#
#     In June 2019, I added code that also changes absolute reference to any
#     dylib named in this directory, to be the one in this directory. This
#     addresses the problem that you can move lib files (e.g., lib/libboost*)
#     to somewhere else (e.g., lib/boost_1_54), but its components (e.g.,
#     libboost_filesystem-mt.dylib) can have pointers to other components (e.g.,
#     libboost_system-mt.dylib). Since these are encoded within absolute paths,
#     we need to fix the absolute paths since we know we have moved the
#     components that have those stale absolute paths. 
#
# Important: 
#     If this script changes anything, it is quite likely you will want to do
#     (as root)
# |        update_dyld_shared_cache
#     followed by a hard reboot (shutdown, not just restart). 
# 
#     You can use 'otool -L [program]' to see if your program agrees where to
#     find the libraries. Another trick is to at the flag "-t" to
#     HACK_AFTER_LOAD_FLAGS in BUILD_ENV.${USER} which will tell the linker to
#     tell you where it found stuff. This flag causes no harm, it just creates a
#     lot of output, so you will want to remove it from BUILD_ENV.${USER} when you are
#     done debugging. 
#
###############################################################################

foreach dylib (*.dylib)
    echo "BEFORE: `otool -D ${dylib}`"
    install_name_tool -id `pwd`/${dylib} ${dylib} 
    echo "AFTER:  `otool -D ${dylib}`"
    echo 
end

# set echo
foreach dylib (*.dylib)
    foreach dylib2 (*.dylib)
        if ("${dylib}" == "${dylib2}") continue
        set lib_ref = `otool -L ${dylib} | grep ${dylib2} | sed 's/(.*//'`
        if ("${lib_ref}" != "") then
            set lib_path = `echo ${lib_ref} | sed 's#	/\([^ ]*\).*$#\1#'`
            set old_lib_dir = `echo ${lib_path} | sed 's#^\(/.*\)/.*$#\1#'`

            if ("${old_lib_dir}" != "${cwd}") then
                echo "Running: install_name_tool -change ${old_lib_dir}/${dylib2} ${cwd}/${dylib2} ${dylib}"
                install_name_tool -change "${old_lib_dir}/${dylib2}" "${cwd}/${dylib2}" "${dylib}"
                if (${status}) then 
                    echo "Execution of above line failed."
                endif 
            endif 
        endif 
    end
end


