#!/bin/tcsh -f

# set echo 

# The following forces the directory to be called test, but we do not want to
# assume this. 
#
# set dir_name = `echo $cwd | sed 's#//*$##'`
# set dir_name = `echo $dir_name | sed 's#.*/##'`
# 
# # We do not really need to be in a directory named "test", but for now we guard
# # against the processing that follows for any abribrary directory. 
# if ("${dir_name}" != "test") exit

echo " "
echo "#################################################################"
echo "#            Targets and rules for testing  "
echo " "

set main_file_names = `${MAKE_SCRIPT_PATH}stream_file_names -m`
if (${status}) then
    ${P_STDERR} " "
    ${P_STDERR} "Script stream_file_names with option -m failed in script build_test_depend in directory `pwd`."
    exit 1
endif 

if ("${main_file_names}" == "") then
    # We are not in a directory that could be used for testing. 
    ${P_STDERR} " "
    ${P_STDERR} "There are no main programs in this directory."
    ${P_STDERR} "Exiting with failure instead of cluttering it up with a Makefile-test-depend."
    exit 1
endif 

if (-e "test_input") then
    if (! -d "test_input") then
        ${P_STDERR} " "
        ${P_STDERR} "Script build_test_depend reports that test_input exists but is not a directory."
        ${P_STDERR} "This should be fixed."
        exit 1
    endif 
else if ($?CREATE_TEST_DIRS) then
    ${KJB_MKDIR} test_input
    if ($status) then
        ${P_STDERR} " "
        ${P_STDERR} "Script build_test_depend cannot make directory test_input."
        exit 1
    endif 
endif 

# We might have created it, so we ask again here for clarity.
if (! -e "test_input") then
    # We are not in a directory that is being used for testing. So we do not
    # want rules related to 'test_input'.
    exit 0
endif 

echo "Makefile-test-depend : test_input"
echo 

set num_tests = 0
set tests = ()
set progs = ()

foreach f (${main_file_names}) 
    set prog = `echo $f | sed 's/\(.*\)\.[^\.]*/\1/'`

    if (-e "test_input/${prog}") then
        if (! -d "test_input/${prog}") then
            ${P_STDERR} " "
            echo "Script build_test_depend reports that test_input/${prog} exists but is not a directory."
            echo "This should be fixed."
            exit 1
        endif 
    else if ($?CREATE_TEST_DIRS) then
        ${KJB_MKDIR} test_input/${prog}
        if ($status) then
            ${P_STDERR} " "
            echo "Script build_test_depend cannot make directory test_input/${prog}."
            exit 1
        endif 
    endif 

    if (-d "test_input/${prog}") then
        pushd "test_input/${prog}" > /dev/null 
        if (${status}) then
            ${P_STDERR} " "
            ${P_STDERR} "Script build_test_depend unable to change to directory test_input/${prog} from directory `pwd`."
            exit 1
        endif 

        echo "Makefile-test-depend : test_input/${prog}" 

        set test_instances = `find . -maxdepth 1 -mindepth 1 -type d \! \( -name '.*' \) |& sed 's#./##'`

        if ("${test_instances}" == "") then
            if  ($?CREATE_TEST_DIRS) then
                mkdir NULL
                set progs = (${progs} ${prog})
                set tests = (${tests} NULL)
                @ num_tests += 1
            endif  
        else
            foreach test_instance (${test_instances})
                set progs = (${progs} ${prog})
                set tests = (${tests} ${test_instance})
                @ num_tests += 1
            end
        endif 

        popd > /dev/null
    endif 
end

if (${num_tests} == 0) exit 

echo ""
echo -n  "Makefile-test-depend :" 
set count = 1

while (${count} <= ${num_tests})
    echo -n " test_input/$progs[$count]/$tests[$count]"
    @ count += 1
end

echo ""
echo ""
echo "TEST_TARGETS = \"

set count = 1

while (${count} < ${num_tests})
    echo "    test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)/output_checked \'
    @ count += 1
end

# One more, without the backslash.
echo "    test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)/output_checked'
echo 

echo 
echo "TEST_SVN_TARGETS = \"

set count = 1

while (${count} < ${num_tests})
    echo "    test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)/svn_phony \'
    @ count += 1
end

# One more, without the backslash.
echo "    test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)/svn_phony'
echo 

echo "REGRESS_TARGETS = \"

set count = 1

while (${count} < ${num_tests})
    echo "    test_runs/$progs[$count]/$tests[$count]/regress/"'$(LD_OBJ_DIR)regression_test_passed \'
    @ count += 1
end

# One more, without the backslash.
echo "    test_runs/$progs[$count]/$tests[$count]/regress/"'$(LD_OBJ_DIR)regression_test_passed'
echo 

set count = 1

while (${count} <= ${num_tests})
    if (("$tests[$count]" != "NULL") && (-d "test_input/$progs[$count]/$tests[$count]")) then
        # pwd > /dev/stderr
        set files = `find test_input/$progs[$count]/$tests[$count] -mindepth 1 -maxdepth 1 -type f \! \( -name '.*' \) `
    else 
        set files = ""
    endif
    
    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)'"/output_checked : "'$(MAKE_SCRIPT_PATH)'"test_program "'$(MAKE_SCRIPT_PATH)'"test_program_2"
    echo ""

    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)'"/output_checked : ${files} test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)'"/run_succeeded"
    echo '	$(MAKE_SCRIPT_PATH)test_program'" -c $progs[$count] $tests[$count] "
    echo ""

    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)'"/run_succeeded : "'$(MAKE_SCRIPT_PATH)'"test_program "'$(MAKE_SCRIPT_PATH)'"test_program_2"

    echo ""

    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)'"/run_succeeded : ${files}"
    echo '	$(MAKE_SCRIPT_PATH)test_program'" -t $progs[$count] $tests[$count] "
    echo ""


    echo "test_runs/$progs[$count]/$tests[$count]/regress/"'$(LD_OBJ_DIR)regression_test_passed'" : "'$(MAKE_SCRIPT_PATH)'"test_program "'$(MAKE_SCRIPT_PATH)'"test_program_2"

    echo ""

    # We put the dependency on code first because the depency on test
    # implicitly relies on the code being there. If we do 'make test' then
    # build-2 does the make, but not if we do 'make regress'
    echo "test_runs/$progs[$count]/$tests[$count]/regress/"'$(LD_OBJ_DIR)regression_test_passed'" : ${files} "'$(LD_OBJ_DIR)'"$progs[$count] test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)'"/output_checked "
    echo '	$(MAKE_SCRIPT_PATH)test_program'" -r $progs[$count] $tests[$count]  "
    echo ""

    echo ".PHONY : test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)'"/svn_phony"
    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(CODE)'"/svn_phony :"
    echo '	$(MAKE_SCRIPT_PATH)test_program'" -s $progs[$count] $tests[$count] "
    echo ""

    @ count += 1
end

echo " "
echo " "
echo "#################################################################"
echo " "




