#!/bin/tcsh -f 

# set echo 

##################################################################################
#
# Build script for imported libraries and utilities that use cmake. This script
# starts its life as:
#     src/Make/build_with_cmake
#
# It then gets copied to where a 3rd part source code base is (typically
# src/shared). Often it gets renamed to build_ivilab. Finally, it gets tweaked
# for the particular code base. 
#
#
##################################################################################
#
# This next part is shared by all files in Make whose names begin with "build".
# Updates should be propogated. 
#
# Find out where we are in the source tree. In particular, we want to find a dir
# that has Make as a sub-dir and Make/init_compile as a file in that (to further
# check that we have the right one). 

if ($?FORCE_KJB_DIR) then
    set kjb_dirs = "${FORCE_KJB_DIR}"
else
    set kjb_dirs = ". kjb KJB ivi IVI "
endif 

set found = 0
set kjb_top = ""

pushd `pwd` > /dev/null

while ("`pwd`" != "/")
    foreach kjb_dir (${kjb_dirs}) 
        if ("${kjb_dir}" == ".") then
            set kjb_dir = ""
        else
            set kjb_dir = "${kjb_dir}/"
        endif 

        if (-e "${kjb_dir}Make/init_compile") then
            set found = 1
            break
        endif 
    end

    if (${found}) break

    set kjb_top = "../${kjb_top}"

    cd ..
end

popd > /dev/null

if (${found}) then
    if ("${kjb_dir}" == "") then
        set kjb_dir = "./"
    endif 

    setenv KJB_SRC_PATH "${kjb_top}${kjb_dir}"
else 
    # We cannot use P_STDERR here because we might not have defined it yet.
    bash -c 'echo " " >&2'
    bash -c 'echo "This directory does not seem to be below a src directory with KJB installed." >&2'

    if ($?KJB_DEBUG) then
        # We cannot use P_STDERR here because we might not have defined it yet.
        bash -c 'echo "Exiting because KJB_DEBUG is set." >&2'
        bash -c 'echo " " >&2'
        exit 1
    else 
        if ($?KJB_SRC_PATH) then 
            bash -c 'echo "Trying the value of KJB_SRC_PATH: ${KJB_SRC_PATH}. " >&2'
        else
            setenv KJB_SRC_PATH "${HOME}/src/"
            bash -c 'echo "Trying ${KJB_SRC_PATH}. " >&2'
        endif 

       if (! -e ${KJB_SRC_PATH}/Make/init_compile) then
           bash -c 'echo "${KJB_SRC_PATH}/Make/init_compile exist. " >&2'
           bash -c 'echo "Hence this build will fail." >&2'
           bash -c 'echo " " >&2'

           exit 1 
       endif 
    endif 
endif 

pushd ${KJB_SRC_PATH} > /dev/null
    setenv KJB_SRC_PATH "${cwd}/"
popd > /dev/null

################################################################################

setenv ONLY_GET_BUILD_ENV
source ${KJB_SRC_PATH}Make/scripts/build-2 

################################################################################

# Typically cmake builds have no opinion about what make should be. So we assume
# that it is most tested by simply typing "make". This feels safer than using
# our fancy system which is commented out below. 
#
set kjb_make = "make" 

# if ($?FORCE_) then
#     if ($?KJB_VERBOSE) then
#         echo "Forcing a serial make due to env var FORCE_SERIAL being set"
#     endif 
# 
#     set kjb_make = "${KJB_MAKE_SERIAL}"
# else 
#     set kjb_make = "${KJB_MAKE}"
# endif 
# 
# if ($?FORCE_STOP) then
#     if ($?KJB_VERBOSE) then
#         echo "Forcing stopping after an error due to env var FORCE_STOP being set"
#     endif 
# 
#     set kjb_make = "${kjb_make} ${KJB_MAKE_OPTS_STOP}"
# endif 

################################################################################

# Cmake specific builds 

# Controlling cmake output, reference a stackexchange post.
#
# 1) We can make with 
#        make VERBOSE=1
# 2) cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON .
# 3) 
# cmake -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON .
#
# For 1) we could do this based on KJB_VERBOSE
# However, generally we build code shared by others until it works, and then
# stop (rather than develop it, which we do sometimes, but often with a
# different paradigm.) So odds are that we want messages. 

set CMAKE_FLAGS =  "" 

set CMAKE_VERBOSE_FLAGS = "cmake -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
set CMAKE_FLAGS = "${CMAKE_FLAGS} ${CMAKE_VERBOSE_FLAGS}" 

# Example, using OPENFACE 
# set CMAKE_OPENFACE_FLAGS = "-D WITH_TBB=ON -D BUILD_SHARED_LIBS=OFF"
# set CMAKE_FLAGS = "${CMAKE_OPENFACE_FLAGS} ${CMAKE_FLAGS}
#
# Example, using OPENCV
# set CMAKE_OPENCV_FLAGS "-D WITH_TBB=ON -D WITH_GTK=OFF -D BUILD_SHARED_LIBS=ON -DWITH_IPP=OFF"
# set CMAKE_FLAGS = "${CMAKE_OPENCV_FLAGS} ${CMAKE_FLAGS}

set build_dir = "build_$MACHINE"

${KJB_MKDIR} $build_dir
if ($status) exit 1 

pushd $build_dir > /dev/null
    if ($status) exit 1 

#     /bin/rm -f CMakeCache.txt 
#     if ($status) exit 1 

    cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=local_install ${CMAKE_FLAGS}  ..
    if ($status) exit 1 

#     ${KJB_MAKE} clean 
#     if ($status) exit 1 

    ${KJB_MAKE} 
    if ($status) exit 1 

    ${KJB_MAKE} install 
    if ($status) exit 1 

    rsync -a -u -v local_install/lib/ ${INSTALL_LOAD_DIR} 
    if ($status) exit 1 

    # There should some way to tell cmake to INSTALL_THIRD_PARTY stuff, but
    # Kobus has yet to find it a general solution. This shows a hack used for
    # OpenFace.
    #
#     rsync -a -u -v lib/3rdParty/dlib/libdlib.a ${INSTALL_LOAD_DIR} 
#     if ($status) exit 1 

    rsync -a -u -v local_install/bin/ ${INSTALL_BIN_DIR} 
    if ($status) exit 1 

    rsync -a -u -v local_install/include/ ${INSTALL_INCLUDE_DIR} 
    if ($status) exit 1 

    # Sometimes there are support files such as trained classifiers. Here we
    # show how it is done for OpenFace. 
    #
#     rsync -a -u -v local_install/etc/ ${INSTALL_DATA_DIR} 
#     if ($status) exit 1 
# 
#     rsync -a -u -v local_install/etc/ ${INSTALL_DATA_DIR} 
#     if ($status) exit 1 

popd > /dev/null

# Sometimes there is data for testing etc that is not built. We might want to
# copy some of it. Here is how it is hacked for OpenFace. 

# rsync -a -u -v videos ${INSTALL_DATA_DIR}/OpenFace
# if ($status) exit 1 
# 
# rsync -a -u -v imgs ${INSTALL_DATA_DIR}/OpenFace
# if ($status) exit 1 
# 
# rsync -a -u -v image_sequence ${INSTALL_DATA_DIR}/OpenFace
# if ($status) exit 1 








