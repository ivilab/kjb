#!/bin/csh -f

# $Id: build_with_configure 22656 2019-06-30 18:42:07Z kobus $
#
# This is the vision lab build script hacked for shared code that has non-broken
# fairly standard "configure" scripts. 
#
# This script lives in src/Make/. It is best to copy this script. IE, treat it
# as a tempate. 
#
# This script is not called from any Makefiles. It needs to be executed as a
# standalone (i.e., by typing in ./<whatever_you_named_it). Names include
# "build", or if there is a build directory, then perhaps leaving the name as is
# is best. 
#
##################################################################################
#
# Build script 
# ============
#
# This file is generally called by "make". It can also be called directly. The
# main purpose is to normalize the make environment, and to implement some
# functionality that is difficult to do in a robust portable way for all flavors
# of make. 
#
##################################################################################

# This next part is shared by all files in Make whose names begin with "build".
# Updates should be propogated. 
#
# Find out where we are in the source tree. In particular, we want to find a dir
# that has Make as a sub-dir and Make/init_compile as a file in that (to further
# check that we have the right one). 

if ($?FORCE_KJB_DIR) then
    set kjb_dirs = "${FORCE_KJB_DIR}"
else
    set kjb_dirs = ". kjb KJB ivi IVI "
endif 

set found = 0
set kjb_top = ""

pushd `pwd` > /dev/null

while ("`pwd`" != "/")
    foreach kjb_dir (${kjb_dirs}) 
        if ("${kjb_dir}" == ".") then
            set kjb_dir = ""
        else
            set kjb_dir = "${kjb_dir}/"
        endif 

        if (-e "${kjb_dir}Make/init_compile") then
            set found = 1
            break
        endif 
    end

    if (${found}) break

    set kjb_top = "../${kjb_top}"

    cd ..
end

popd > /dev/null

if (${found}) then
    if ("${kjb_dir}" == "") then
        set kjb_dir = "./"
    endif 

    setenv KJB_SRC_PATH "${kjb_top}${kjb_dir}"
else 
    # We cannot use P_STDERR here because we might not have defined it yet.
    bash -c 'echo " " >&2'
    bash -c 'echo "This directory does not seem to be below a src directory with KJB installed." >&2'

    if ($?KJB_DEBUG) then
        # We cannot use P_STDERR here because we might not have defined it yet.
        bash -c 'echo "Exiting because KJB_DEBUG is set." >&2'
        bash -c 'echo " " >&2'
        exit 1
    else 
        if ($?KJB_SRC_PATH) then 
            bash -c 'echo "Trying the value of KJB_SRC_PATH: ${KJB_SRC_PATH}. " >&2'
        else
            setenv KJB_SRC_PATH "${HOME}/src/"
            bash -c 'echo "Trying ${KJB_SRC_PATH}. " >&2'
        endif 

       if (! -e ${KJB_SRC_PATH}/Make/init_compile) then
           bash -c 'echo "${KJB_SRC_PATH}/Make/init_compile exist. " >&2'
           bash -c 'echo "Hence this build will fail." >&2'
           bash -c 'echo " " >&2'

           exit 1 
       endif 
    endif 
endif 

pushd ${KJB_SRC_PATH} > /dev/null
    setenv KJB_SRC_PATH "${cwd}/"
popd > /dev/null

##############################################################################

setenv ONLY_GET_BUILD_ENV
source ${KJB_SRC_PATH}Make/scripts/build-2 

##############################################################################

if ($?KJB_CPATH) then 
    setenv CPATH "${KJB_CPATH}"
endif 
   
if ($?KJB_LIBRARY_PATH) then 
    setenv LIBRARY_PATH "${KJB_LIBRARY_PATH}"
endif 

##############################################################################

# Many configures use these. 
setenv LDFLAGS "-L${INSTALL_LOAD_DIR}" 
setenv CFLAGS  "-I${INSTALL_INCLUDE_DIR}"

make distclean

# Configure scripts vary a lot in their options. Things that we need for one
# will break another. One strategy is to start with the version below, see what
# options are invalid and remove them. Relatively often you will have to hack
# the opptions further to get what you want. 
#
# Common problems (add yours here).
#     --includedir is sometimes call --incdir 
#
#     Sometines you will want to use 
#          --datarootdir=${INSTALL_DATA_DIR}
#     but this is often not used and typically causes an error exit.  We have
#     not yet established final value for INSTALL_DATA_DIR, and if you need it,
#     please bring it to the attention of the sw mail list.
#
#     It is possible (no current examples) that the trailing slashes in our variables ending in
#     "_DIR" might break something. You could try something like:
#           setenv INSTALL_PREFIX_DIR  `echo ${INSTALL_PREFIX_DIR} | sed 's#\([^/]\)/*$#\1#'`
#           setenv INSTALL_BIN_DIR  `echo ${INSTALL_BIN_DIR} | sed 's#\([^/]\)/*$#\1#'`
#           setevn INSTALL_LOAD_DIR  `echo ${INSTALL_LOAD_DIR} | sed 's#\([^/]\)/*$#\1#'`
#           setenv INSTALL_INCLUDE_DIR  `echo ${INSTALL_INCLUDE_DIR} | sed 's#\([^/]\)/*$#\1#'`

./configure --prefix=${INSTALL_PREFIX_DIR} --libdir=${INSTALL_LOAD_DIR} --includedir=${INSTALL_INCLUDE_DIR} --bindir=${INSTALL_BIN_DIR} --enable-shared=no --enable-static=yes

make clean
make 
make install

